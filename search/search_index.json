{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#copilot-developer-camp","title":"Copilot Developer Camp","text":"<p>Welcome to Copilot Developer Camp, a workshop for professional developers who want to learn how to build agents for Microsoft 365 Copilot.</p> Watch Microsoft 365 Copilot: Developer Camp On-demand! \ud83c\udf89 <p> Let's Start with a Game! Developer's Guide to Building Copilot Agents Introducing Declarative Agents The Future of Declarative Agents Extending Declarative Agents A Conversation with the Leaders Behind the Developer Tools Introducing Custom Engine Agents Unlock the Power of Custom Engine Agents </p> Learn about Microsoft 365 Copilot 'Wave 2' <p> Microsoft 365 Copilot Wave 2 announcement with Satya Nadella and Jared Spataro </p> Video briefing: Building Agents for Microsoft 365 Copilot <p> Building Copilot agents with code (Overview) Introducing Custom engine agents Introducing Declarative agents Building API Plugins for Declarative agents </p>"},{"location":"#hands-on-labs","title":"Hands-on Labs \ud83e\uddea","text":"<p>The labs are divided into two pathways, allowing you to choose based on what you want to create. If you want to extend Microsoft 365 Copilot, building on its AI engine and orchestration, choose the \"Extend\" labs. If you want to build a completely custom agent using Azure AI Foundry (or any AI of your choice), choose the \"Build\" labs.</p> <p>New schema</p> <p>If you began the \"Extend\" labs prior to October 27, 2024, you are probably still using the developer preview schema and should upgrade to the v1.19 schema at this time. Detailed instructions are here. The solution files were updated on October 27, so if you started with those you can disregard this notice.</p> <p>Do these labs if you want to build a Declarative agent where Microsoft 365 provides the AI model and orchestration</p> <ul> <li>E0 - Setup</li> <li>E1 - First declarative agent</li> <li>E2 - Build an API</li> <li>E3 - Add a declarative agent and API plugin</li> <li>E4 - Enhance the API and plugin</li> <li>E5 - Add adaptive cards</li> <li>E6 - Add Entra ID authentication</li> <li>Bonus - Add Graph Connector</li> </ul> <p>Do these labs if you want to build a Custom engine agent with custom AI model and orchestration using Azure OpenAI and Teams AI library</p> <ul> <li>B0 - Setup</li> <li>B1 - First custom engine agent</li> <li>B2 - Index your data in Azure AI Search</li> <li>B3 - Enhance the user experience</li> <li>B4 - Add single sign on authentication</li> <li>B5 - Add actions to handle complex tasks</li> </ul>"},{"location":"#more-videos","title":"More videos \ud83d\udcfa","text":"<p>Here are some relevant videos from the Microsoft 365 Developer Channel. Please subscribe to keep up with all our latest videos on Microsoft 365 development!</p> Learn AI concepts with Doodle to Code! <p> What is Generative AI? What is Retrieval Augmented Generation (RAG)? Create an AI Powered Chatbot in Microsoft Teams with Teams AI Library Bring your AI App to Microsoft Teams from Azure AI Foundry </p> Microsoft Mechanics <p> Microsoft 365 Copilot - New agent and extensibility options for developers AI apps - Control Safety, Privacy &amp; Security - with Mark Russinovich How Microsoft 365 Copilot works Microsoft 365 Copilot Wave Two updates - Pages, Excel, OneDrive, and agents </p> Microsoft 365 Developer Essentials <p> Adaptive cards are everywhere Where is the Microsoft 365 API? </p> More on building Custom engine agents <p> Chat over your data with Azure OpenAI and Teams AI Library </p>"},{"location":"#copilot-camp-in-a-box","title":"Copilot Camp in a Box \ud83d\udce5","text":"<p>Got the labs working? Ready to share your knowledge? Why not run your own Copilot Camp workshop using our Copilot Camp in a Box resources! We've got you covered with presentation materials that even include embedded demos.</p> <p>\u2b50\ufe0f Star our repo</p>"},{"location":"#join-the-conversation","title":"Join the Conversation! \ud83d\udcac","text":"Welcome to the Copilot Developer Camp Discussions! \ud83e\udd17 <p>Introduce yourself and tell us about your experience with Copilot Developer Camp \ud83c\udfd5\ufe0f.</p> \ud83c\udf89 New Feature X: Ideas and Feedback <p>We\u2019re exploring some cool updates! Share your thoughts on Feature X and let\u2019s brainstorm together!</p> \ud83d\ude80 Troubleshooting Guide: Share Your Tips <p>Got any tips for solving common setup issues? Drop your wisdom and help the community thrive!</p> \u2728 Explore More Discussions"},{"location":"#microsoft-learn","title":"Microsoft Learn \ud83d\udcd6","text":"<p>Discover Microsoft Learn content to extend Copilot all in one place with the Official Collection: Microsoft 365 Copilot extensibility available at the link https://aka.ms/extend-microsoft365-copilot</p>"},{"location":"#issues","title":"Issues","text":"<p>We really appreciate your feedback! Please use the issues list to share your comments and issues, or if you're in Microsoft let us know in the \"Copilot Developer Camp Early Testers\" chat in Microsoft Teams. Thanks!</p>"},{"location":"#code-of-conduct","title":"Code of Conduct","text":"<p>This project has adopted the Microsoft Open Source Code of Conduct.</p> <p>Resources:</p> <ul> <li>Microsoft Open Source Code of Conduct</li> <li>Microsoft Code of Conduct FAQ</li> <li>Contact opencode@microsoft.com with questions or concerns</li> </ul> <p></p>"},{"location":"register/","title":"Registration","text":""},{"location":"demo-assets/","title":"Index","text":"<p>The following sample images are hosted in the github pages for use by code samples such as the Trey Research API Plugin. Portraits were generated using Microsoft Copilot.</p>"},{"location":"demo-assets/#consultant-pictures","title":"Consultant pictures","text":"<p> Avery Howard</p> <p> Dominique Dutertre</p> <p> Robin Zupanc</p> <p> Sanjay Puranik</p> <p> Lois Wyn</p> <p> The Unknown Consultant</p> <p> Spare 1</p> <p> Spare 2</p> <p> Spare 3</p>"},{"location":"demo-assets/#maps","title":"Maps","text":"<p> Adatum Corporation</p> <p> Alpine Ski House</p> <p> Bellows College</p> <p> Consolidated Messenger</p> <p> Contoso Pharmaceuticals</p> <p> Humongous Insurance</p> <p> Lamna Healthcare Company</p> <p> Relecloud</p> <p> Southridge Video</p> <p> Woodgrove Bank</p>"},{"location":"includes/all-labs-toc/","title":"All labs toc","text":"<p>Do these labs if you want to build a Declarative agent where Microsoft 365 provides the AI model and orchestration</p> <ul> <li>E0 - Setup</li> <li>E1 - First declarative agent</li> <li>E2 - Build an API</li> <li>E3 - Add a declarative agent and API plugin</li> <li>E4 - Enhance the API and plugin</li> <li>E5 - Add adaptive cards</li> <li>E6 - Add Entra ID authentication</li> <li>Bonus - Add Graph Connector</li> </ul> <p>Do these labs if you want to build a Custom engine agent with custom AI model and orchestration using Azure OpenAI and Teams AI library</p> <ul> <li>B0 - Setup</li> <li>B1 - First custom engine agent</li> <li>B2 - Index your data in Azure AI Search</li> <li>B3 - Enhance the user experience</li> <li>B4 - Add single sign on authentication</li> <li>B5 - Add actions to handle complex tasks</li> </ul>"},{"location":"includes/b-congratulations/","title":"B congratulations","text":"<p>CONGRATULATIONS!</p>"},{"location":"includes/b-labs-prelude/","title":"B labs prelude","text":"<p>Do these labs if you want to build a Custom engine agent with custom AI model and orchestration using Azure OpenAI and Teams AI library</p> <ul> <li>B0 - Setup</li> <li>B1 - First custom engine agent</li> <li>B2 - Index your data in Azure AI Search</li> <li>B3 - Enhance the user experience</li> <li>B4 - Add single sign on authentication</li> <li>B5 - Add actions to handle complex tasks</li> </ul> Table of Contents"},{"location":"includes/b-labs-toc/","title":"B labs toc","text":"<p>Do these labs if you want to build a Custom engine agent with custom AI model and orchestration using Azure OpenAI and Teams AI library</p> <ul> <li>B0 - Setup</li> <li>B1 - First custom engine agent</li> <li>B2 - Index your data in Azure AI Search</li> <li>B3 - Enhance the user experience</li> <li>B4 - Add single sign on authentication</li> <li>B5 - Add actions to handle complex tasks</li> </ul>"},{"location":"includes/discussions/","title":"Discussions","text":"Welcome to the Copilot Developer Camp Discussions! \ud83e\udd17 <p>Introduce yourself and tell us about your experience with Copilot Developer Camp \ud83c\udfd5\ufe0f.</p> \ud83c\udf89 New Feature X: Ideas and Feedback <p>We\u2019re exploring some cool updates! Share your thoughts on Feature X and let\u2019s brainstorm together!</p> \ud83d\ude80 Troubleshooting Guide: Share Your Tips <p>Got any tips for solving common setup issues? Drop your wisdom and help the community thrive!</p> \u2728 Explore More Discussions"},{"location":"includes/e-congratulations/","title":"E congratulations","text":"<p>CONGRATULATIONS!</p>"},{"location":"includes/e-labs-prelude/","title":"E labs prelude","text":"<p>Do these labs if you want to build a Declarative agent where Microsoft 365 provides the AI model and orchestration</p> <ul> <li>E0 - Setup</li> <li>E1 - First declarative agent</li> <li>E2 - Build an API</li> <li>E3 - Add a declarative agent and API plugin</li> <li>E4 - Enhance the API and plugin</li> <li>E5 - Add adaptive cards</li> <li>E6 - Add Entra ID authentication</li> <li>Bonus - Add Graph Connector</li> </ul> Table of Contents"},{"location":"includes/e-labs-toc/","title":"E labs toc","text":"<p>Do these labs if you want to build a Declarative agent where Microsoft 365 provides the AI model and orchestration</p> <ul> <li>E0 - Setup</li> <li>E1 - First declarative agent</li> <li>E2 - Build an API</li> <li>E3 - Add a declarative agent and API plugin</li> <li>E4 - Enhance the API and plugin</li> <li>E5 - Add adaptive cards</li> <li>E6 - Add Entra ID authentication</li> <li>Bonus - Add Graph Connector</li> </ul>"},{"location":"includes/m-path-links/","title":"M path links","text":"<ul> <li>Lab M0 - Prerequisites READY FOR TESTING</li> <li>Lab M1 - Get to know Northwind message extension READY FOR TESTING</li> <li>Lab M2 - Run app in Microsoft Copilot for Microsoft 365 READY FOR TESTINGSOON</li> <li>Lab M3 - Enhance plugin with new search command READY FOR TESTING</li> <li>Lab M4 - Add authentication READY FOR TESTING</li> <li>Lab M5 - Enhance plugin with an action command COMING SOON</li> </ul>"},{"location":"includes/starrepo/","title":"Starrepo","text":"<p>\u2b50\ufe0f Star our repo</p>"},{"location":"pages/resources/","title":"Resources","text":""},{"location":"pages/test/","title":"Lab T1 - Test Bob's new Web Controls","text":"<p>In this lab, you, the Copilot Developer Camp content developer, will learn how to use custom web controls to provide an enhanced user experience.</p> <p>Where did I leave off?</p> <p></p> <p>Table of Contents</p> <p></p>"},{"location":"pages/test/#exercise-1-learn-the-controls","title":"Exercise 1: Learn the controls","text":"<p>In this exercise, you'll learn how to use the <code>&lt;cc-end-step&gt;</code> web control, which allows users to log their process at the end of each step.</p>"},{"location":"pages/test/#step-1-write-the-markup","title":"Step 1: Write the markup","text":"<p>Each step must begin with a 3rd level header (\"###\") that includes the name of the step. Then insert the <code>&lt;cc-end-step&gt;</code> control at the end of the step.</p> <p>For example,</p> <pre><code>### Step 1: Write the markup\n\n... (all the instructions go here)\n\n&lt;cc-end-step lab=\"t1\" exercise=\"1\" step=\"1\" /&gt;\n</code></pre> <p>The control needs your lab, exercise, and step so it can store the checkbox state uniquely across page refreshes.</p> <p>For a Table of Contents, use</p> <pre><code>!!! abstract \"Table of Contents\"\n    &lt;cc-table-of-contents /&gt;\n</code></pre> <p>To show the most recent step completed use</p> <pre><code>!!! abstract \"Where did I leave off?\"\n    &lt;cc-last-completed-step /&gt;\n</code></pre> <p>Notice the checkbox at the bottom of each step. When users check it, several things happen:</p> <ul> <li>A check mark is added to the step heading</li> <li>A check mark is added to the step in the Table of Contents</li> <li>The \"where did I leave off\" message at the top of the lab, if present, is updated</li> <li>An encouraging message is added below the checkbox</li> <li>Telemetry logs the completion (anonymously)</li> </ul> <p>Try it out now!</p> <p></p>"},{"location":"pages/test/#step-2-make-sure-your-h2-and-h3-elements-are-in-order","title":"Step 2: Make sure your h2 and h3 elements are in order","text":"<p>The controls are poking around in the DOM, and they depend on you having:</p> <ul> <li>an h2 (##) for each exercise beginning with the word \"Exercise\"</li> <li>an h3 (###) for each step </li> <li>at least one step in each exercise</li> <li>the last thing in the step is the <code>&lt;cc-end-step /&gt;</code></li> </ul> <p></p>"},{"location":"pages/test/#step-3-test-the-links","title":"Step 3: Test the links","text":"<p>Now, with some checkboxes checked, notice that the \"Where did I leave off\" message is now a hyperlink that brings you directly to the end of the last step that you completed.</p> <p>The links in the Table of Contents, on the other hand, bring you to the beginning of each step.</p> <p></p>"},{"location":"pages/test/#step-4-how-does-it-work","title":"Step 4: How does it work?","text":"<p>These are written using standard web components. Checkbox state is kept in local storage so it will persist across lab sessions so long as the user returns with the same browser and profile, the checkboxes will be as they left them. If you're curious, here is the code.</p> <p></p>"},{"location":"pages/test/#exercise-2-give-feedback","title":"Exercise 2: Give feedback","text":""},{"location":"pages/test/#step-1-do-you-like-it","title":"Step 1: Do you like it?","text":"<p>Is it useful? Whow could it be improved?</p> <p></p>"},{"location":"pages/test/#step-2-long-steps-are-no-problem","title":"Step 2: Long steps are no problem","text":"<p>In the initial implementation a single checkbox was placed in the heading for each step. If a step is really long like this one, people might not scroll back up to the top to check it off. So I moved the checkboxes to the bottom. Please scroll past all the fake Latin and check it out!</p> <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nam quis nulla elit. Sed tortor turpis, mollis non pretium a, consectetur at augue. Fusce eu mi in sem imperdiet accumsan. Phasellus ullamcorper magna vel tincidunt dapibus. Pellentesque congue commodo finibus. Morbi scelerisque porta velit dictum tincidunt. Suspendisse potenti. Ut a mi suscipit, varius tellus id, luctus nisi. Aenean nec magna vel tortor fermentum laoreet. Praesent mattis hendrerit arcu nec rutrum. Maecenas sit amet sagittis ex, id interdum eros. Donec euismod a nisi nec efficitur. Cras sit amet massa elementum augue efficitur maximus non sed neque. Maecenas sit amet fringilla risus. Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas.</p> <p>Ut ultrices sem dui, eu posuere orci fermentum commodo. Nam elementum ac est sit amet feugiat. Integer eget erat pharetra, tempus sem vel, consectetur arcu. Etiam vulputate porta tellus ac viverra. Mauris id aliquam mauris, sit amet rutrum lacus. Vivamus tincidunt in massa vitae varius. Donec luctus nunc eget sodales ultricies. Curabitur molestie, urna ac sodales efficitur, ipsum odio condimentum nisl, quis imperdiet erat velit ut orci. Nunc fermentum mi nec sapien pellentesque iaculis.</p> <p>Praesent iaculis feugiat justo, at rutrum turpis venenatis eu. Phasellus tempus tincidunt purus, non semper nisi gravida id. Quisque tempor urna vitae malesuada ultrices. Nulla elit ipsum, rhoncus tempor ligula vel, aliquam commodo diam. Maecenas tristique ullamcorper blandit. Vivamus in congue tortor, rhoncus faucibus nisl. Curabitur non est justo. Fusce vitae tincidunt purus. Duis malesuada leo tellus, nec faucibus neque vehicula at. Morbi nisl risus, congue a finibus in, venenatis eget augue. Nulla tempor eu nibh id imperdiet. Maecenas scelerisque posuere nibh in dapibus. Maecenas aliquam ornare magna sed pulvinar. Aenean vel placerat elit. Nunc faucibus imperdiet fringilla. In sit amet ipsum lectus.</p> <p>Morbi in congue sem. Duis suscipit enim eu erat congue, a dapibus tortor fringilla. Cras at purus gravida leo condimentum molestie id ut sapien. Morbi in eros a magna finibus efficitur quis ac lacus. Curabitur vitae elit et felis iaculis convallis a quis sem. Vivamus sit amet sollicitudin metus, ut pulvinar ex. Nunc justo lacus, eleifend ac semper quis, condimentum a quam. Nunc sagittis urna erat, nec rhoncus urna pulvinar id. Integer fermentum fermentum sollicitudin. Mauris et vestibulum massa, at eleifend tortor. Nulla vehicula eu odio ut semper. Cras et nibh lacus. Duis in magna sit amet nunc finibus faucibus vel ut eros. Cras ullamcorper efficitur velit eu fermentum.</p> <p>Proin eget vulputate lectus. Vestibulum sit amet bibendum nisl, vel interdum odio. Sed sed odio lectus. Ut et magna vitae risus imperdiet posuere. Phasellus enim velit, tempor sed consectetur in, cursus id velit. Vestibulum sed lobortis purus. Sed libero nisi, vulputate sed nulla in, fermentum imperdiet odio. Vestibulum pellentesque blandit congue. In venenatis euismod tortor, nec sagittis ante placerat eget. Sed at nunc nunc. Curabitur consequat elit ut hendrerit vestibulum. Ut maximus laoreet condimentum. Suspendisse eget sem neque. Cras in lorem facilisis, rutrum quam vel, dictum justo.</p> <p>Integer interdum mollis nulla at blandit. Interdum et malesuada fames ac ante ipsum primis in faucibus. Vivamus aliquam commodo aliquam. Maecenas rhoncus nisl vel purus sodales, id vestibulum eros viverra. Donec vehicula semper urna. In auctor consectetur libero quis eleifend. Etiam a tellus sed metus suscipit blandit non at neque. Suspendisse placerat semper est eu commodo. Nam nunc augue, cursus nec commodo in, elementum at lacus. Duis est arcu, cursus ac rhoncus sed, hendrerit in odio. Duis congue nisi faucibus ipsum convallis, eu dapibus ante rhoncus. Suspendisse eu eros et ligula ultrices tincidunt.</p> <p>Sed blandit, felis vel auctor pharetra, nibh tellus mollis nisi, ac feugiat nisl nunc et urna. Nunc magna tortor, lobortis eu congue eget, pulvinar sit amet dolor. Sed nec mattis ante. Maecenas convallis tristique lacinia. Suspendisse non tellus quis lorem sodales finibus. Curabitur rutrum vel odio at viverra. Morbi maximus nibh sit amet nisl pellentesque bibendum. Pellentesque ultricies ex ante, at hendrerit magna posuere sed.</p> <p>Proin luctus faucibus posuere. In malesuada hendrerit arcu, et mattis ante maximus ac. Phasellus dictum nibh ac neque rutrum ultrices. Nullam sed aliquam enim. Nullam nisl erat, interdum a porta eget, congue in nisl. Nullam ligula elit, ornare eget nisl eu, aliquet semper metus. Mauris pulvinar justo sem. Fusce nec ullamcorper urna. Cras eget metus eget lectus volutpat aliquet non pharetra massa. In vitae nisi arcu.</p> <p>Sed sit amet convallis massa, vehicula auctor justo. Aliquam ultricies porttitor nulla eu lobortis. Vestibulum viverra, risus nec dapibus venenatis, eros neque bibendum augue, sit amet faucibus arcu mauris eget quam. Quisque sed mollis tellus, ac tempus elit. Sed orci lorem, tincidunt vitae egestas iaculis, finibus non sem. Curabitur quis semper est, sed tempus risus. Duis dictum lorem vulputate felis convallis, commodo sagittis diam condimentum. Curabitur vitae erat nibh. Mauris vulputate maximus libero id dignissim. Quisque viverra ante tellus, id sollicitudin elit interdum quis.</p> <p>Nunc massa velit, gravida a nunc in, efficitur viverra sapien. Sed viverra ullamcorper hendrerit. Quisque cursus felis tortor, ut facilisis lectus volutpat vel. Sed scelerisque auctor tempor. Duis ante diam, pretium vitae rhoncus id, mollis vitae lorem. Mauris pretium lorem sem, sit amet iaculis sem ullamcorper ac. Fusce vel arcu aliquet, vulputate leo at, aliquet massa. Ut at imperdiet eros. Mauris gravida mi rutrum mi egestas, sit amet varius tellus pellentesque. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer varius nunc in arcu posuere, suscipit fringilla erat commodo. Aenean vitae nisi non felis semper commodo. Donec eget neque ornare, lobortis augue nec, pharetra est. Sed accumsan semper diam, eget pharetra mauris feugiat id. Pellentesque ac velit vitae purus sollicitudin dapibus. Mauris posuere interdum nisi sed pellentesque.</p> <p></p>"},{"location":"pages/test/#step-3-thank-you","title":"Step 3: Thank you!","text":"<p>Thanks for testing the Copilot Camp web controls!</p> <p></p>"},{"location":"pages/updating-the-schema/","title":"Updating the Manifest schema","text":"<p>If you began any of the \"Extend\" path labs prior to October 27, 2024, you may be using a developer preview schema. A new, supported schema, v1.19, is now available and all preview applications need to update. The new schema also reflects the new Copilot agent naming.</p> <p>To update your project, open the appPackage/manifest.json file.</p> <p>First, replace the first two lines with these:</p> <pre><code>  \"$schema\": \"https://developer.microsoft.com/json-schemas/teams/v1.19/MicrosoftTeams.schema.json\",\n  \"manifestVersion\": \"1.19\",\n</code></pre> <p>If you see a <code>packageName</code> property like this one in your manifest.json file, remove it as it is no longer necessary or supported.</p> <pre><code>  \"packageName\": \"com.microsoft.teams.extension\",\n</code></pre> <p>Then replace the <code>copilotExtensions</code> property with this:</p> <pre><code>  \"copilotAgents\": {\n    \"declarativeAgents\": [\n      {\n        \"id\": \"treygenie\",\n        \"file\": \"trey-declarative-agent.json\"\n      }\n    ]   \n  }, \n</code></pre> <p>Finally, rename trey-declarative-copilot.json to trey-declarative-agent.json to match the lab instructions.</p>"},{"location":"pages/custom-engine/","title":"Welcome to Copilot Developer Camp's Build Path: Build your own agent","text":"<p>During Build Path of the Copilot Developer Camp, you will develop a custom engine agent specifically designed to help Human Resources departments manage resumes, create new job posts and more.</p> What is a custom engine agent? <p>Custom engine agents are chatbots powered by Generative AI, designed to provide sophisticated conversational experiences. Custom engine agents are built using the Teams AI library, which provides comprehensive AI functionalities, including managing prompts, actions, and model integration as well as extensive options for UI customization. This ensures that your chatbots leverage the full range of AI capabilities while delivering a seamless and engaging experience aligned with Microsoft platforms.</p> <p>The journey starts with building a basic custom engine agent using Teams Toolkit, Teams AI library and Azure OpenAI. Then, you will implement Retrieval Augmented Generation (RAG) that provides ability to search across diverse resumes, apply UI enhancements to make the chatbot look and feel like a Copilot experience, finally you will enable authentication to secure your custom engine agent and use Microsoft Graph to incorporate Microsoft 365 data. This sophisticated custom engine agent will utilize custom AI models and an orchestrator to meet the unique needs of the Human Resources department.</p> <p>Do these labs if you want to build a Custom engine agent with custom AI model and orchestration using Azure OpenAI and Teams AI library</p> <ul> <li>B0 - Setup</li> <li>B1 - First custom engine agent</li> <li>B2 - Index your data in Azure AI Search</li> <li>B3 - Enhance the user experience</li> <li>B4 - Add single sign on authentication</li> <li>B5 - Add actions to handle complex tasks</li> </ul>"},{"location":"pages/custom-engine/#start-here-with-lab-b0-where-youll-set-up-development-your-environment","title":"Start here with Lab B0, where you'll set up development your environment.","text":""},{"location":"pages/custom-engine/00-prerequisites/","title":"Lab B0 - Prerequisites","text":"<p>Do these labs if you want to build a Custom engine agent with custom AI model and orchestration using Azure OpenAI and Teams AI library</p> <ul> <li>B0 - Setup</li> <li>B1 - First custom engine agent</li> <li>B2 - Index your data in Azure AI Search</li> <li>B3 - Enhance the user experience</li> <li>B4 - Add single sign on authentication</li> <li>B5 - Add actions to handle complex tasks</li> </ul> Table of Contents <p>In this lab you will set up your development environment to build, test, and deploy the custom engine agent you will develop throughout the path.</p> <p>In this lab you will learn how to:</p> <ul> <li>Install and configure Teams toolkit for Visual Studio Code</li> <li>Prepare your Azure environment to create required resources</li> </ul> <p>Disclaimer</p> <p>These samples and labs are intended for instructive and demonstration purposes and are not intended for use in production. Do not put them into production without upgrading them to production quality.</p> <p>Note</p> <p>To install and run your own custom engine agent, you'll need a Microsoft 365 tenant where you have administrator permission. You won't need Microsoft 365 Copilot License to test your custom engine agent.</p>"},{"location":"pages/custom-engine/00-prerequisites/#exercise-1-setup-microsoft-teams","title":"Exercise 1 : Setup Microsoft Teams","text":""},{"location":"pages/custom-engine/00-prerequisites/#step-1-enable-teams-custom-application-uploads","title":"Step 1: Enable Teams custom application uploads","text":"<p>By default, end users can't upload applications directly; instead an Teams administrator needs to upload them into the enterprise app catalog. In this step you will ensure your tenant is set up for direct uploads by Teams Toolkit.</p> <p>1\ufe0f\u20e3 Navigate to https://admin.microsoft.com/, which is the Microsoft 365 Admin Center.</p> <p>2\ufe0f\u20e3 In the left panel of the admin center, select Show all to open up the entire navigation. When the panel opens, select Teams to open the Microsoft Teams admin center.</p> <p>3\ufe0f\u20e3 In the left of the Microsoft Teams admin center, open the Teams apps accordion. Select Setup Policies, you will see a list of App setup policies. Then, select the Global (Org-wide default) policy.</p> <p>4\ufe0f\u20e3 Ensure the first switch, Upload custom apps is turned On.</p> <p>5\ufe0f\u20e3 Be sure to scroll down and select the Save button to persist your change.</p> <p>The change can take up to 24 hours to take effect, but usually it's much faster.</p> <p></p>"},{"location":"pages/custom-engine/00-prerequisites/#exercise-2-install-teams-toolkit-and-prerequisites","title":"Exercise 2: Install Teams Toolkit and prerequisites","text":"<p>You can complete these labs on a Windows, Mac, or Linux machine, but you do need the ability to install the prerequisites. If you are not permitted to install applications on your computer, you'll need to find another machine (or virtual machine) to use throughout the workshop.</p>"},{"location":"pages/custom-engine/00-prerequisites/#step-1-install-visual-studio-code","title":"Step 1: Install Visual Studio Code","text":"<p>It should be no surprise that Teams Toolkit for Visual Studio Code requires Visual Studio Code! You can download it here: Visual Studio Code.</p> <p></p>"},{"location":"pages/custom-engine/00-prerequisites/#step-2-install-nodejs","title":"Step 2: Install NodeJS","text":"<p>NodeJS is a program that allows you to run JavaScript on your computer; it uses the open source \"V8\" engine, which is used in popular web browsers such as Microsoft Edge and Google Chrome. You will need NodeJS to run the web server code used throughout this workshop.</p> <p>Browse to https://nodejs.org/en/download/ and install version 18 or 16 for your operating system. This lab has been tested using NodeJS version 18.16.0. If you already have another version of NodeJS installed, you may want to set up the Node Version Manager (or this variation for Microsoft Windows), which allows you to easily switch Node versions on the same computer.</p> <p></p>"},{"location":"pages/custom-engine/00-prerequisites/#step-3-install-teams-toolkit","title":"Step 3: Install Teams Toolkit","text":"<p>These labs are based on Teams Toolkit version 5.0. Follow the steps as shown in the screen shot below.</p> <p>1\ufe0f\u20e3 Open Visual Studio Code and click on the Extensions toolbar button</p> <p>2\ufe0f\u20e3 Search for \"Teams\" and locate Teams Toolkit</p> <p>3\ufe0f\u20e3 Click Install</p> <p>If you have Teams Toolkit installed but hidden</p> <p>If you previously installed Teams Toolkit, and then hid it on the Visual Studio sidebar, you might wonder why you can't see it. Right-click on the left sidebar and check off Teams Toolkit to bring it back into view.</p> <p></p>"},{"location":"pages/custom-engine/00-prerequisites/#exercise-3-get-an-azure-subscription","title":"Exercise 3: Get an Azure subscription","text":"<p>To complete the exercises in Path B, you'll need an Azure subscription to create resources on Azure. If you don't have Azure subscription yet, you can activate an Azure free account that offers $200 in credits which can be used within the first 30 days on most Azure services.</p>"},{"location":"pages/custom-engine/00-prerequisites/#step-1-create-an-azure-free-account","title":"Step 1: Create an Azure free account","text":"<p>Follow the steps to activate an Azure free account:</p> <p>1\ufe0f\u20e3 Navigate to Azure free account page and select Activate.</p> <p>2\ufe0f\u20e3 Login with an account of your choice, it's recommended to use the Microsoft 365 tenant account you would like to use in the exercises.</p> <p>3\ufe0f\u20e3 Check the boxes for Privacy Statement, then select Next.</p> <p>4\ufe0f\u20e3 Provide a mobile phone number for identity verification step.</p> <p>5\ufe0f\u20e3 Provide payment details for a temporary authorization. You won\u2019t be charged unless you move to pay-as-you-go pricing. Then, select Sign up.</p> <p>Tip: Managing Azure resources after 30 days</p> <p>Azure free account will be available only for 30 days. Make sure you don't have any services running in your free subscription at the end of 30 days. If you want to continue using Azure services at the end of 30 days, you must upgrade to a pay-as-you-go subscription by removing the spending limit. This allows continued use of the Azure free account and select free services for the term.</p> <p></p> <p>CONGRATULATIONS!</p> <p>You have completed Lab B0 - Prerequisites! You are now ready to proceed to lab B1 - Build a custom engine agent using Azure OpenAI and Teams Toolkit. Select Next.</p> <p></p>"},{"location":"pages/custom-engine/01-custom-engine-agent/","title":"Lab B1 - First custom engine agent","text":"<p>Do these labs if you want to build a Custom engine agent with custom AI model and orchestration using Azure OpenAI and Teams AI library</p> <ul> <li>B0 - Setup</li> <li>B1 - First custom engine agent</li> <li>B2 - Index your data in Azure AI Search</li> <li>B3 - Enhance the user experience</li> <li>B4 - Add single sign on authentication</li> <li>B5 - Add actions to handle complex tasks</li> </ul> Table of Contents <p>In this lab you will build a custom engine agent using Teams Toolkit for Visual Studio Code. You will also utilize Azure OpenAI models in your custom engine agent and define your first prompt.</p> <p>In this lab you will:</p> <ul> <li>Learn what is a custom engine agent</li> <li>Create Azure OpenAI service and a deployment model</li> <li>Create a custom engine agent using Teams toolkit</li> <li>Define a prompt in your custom engine agent</li> <li>Learn how to run and test your app</li> </ul>"},{"location":"pages/custom-engine/01-custom-engine-agent/#introduction","title":"Introduction","text":"<p>Welcome aboard to the exciting journey of building your own custom engine agent! In this path, you'll create a custom engine agent for Microsoft Teams using cutting-edge Azure OpenAI models. You'll be able to define specific prompts, integrate complex data, and add advanced skills to make your agent truly unique. By using custom models and orchestration, your agent will tackle advanced tasks, complex conversations, and workflows, delivering an exceptional, personalized experience. Let's dive in and start building your first custom engine agent!</p> Before everything else, lets remember... What is a custom engine agent? <p>Custom engine agents are chatbots powered by Generative AI, designed to provide sophisticated conversational experiences. Custom engine agents are built using the Teams AI library, which provides comprehensive AI functionalities, including managing prompts, actions, and model integration as well as extensive options for UI customization. This ensures that your chatbots leverage the full range of AI capabilities while delivering a seamless and engaging experience aligned with Microsoft platforms.</p>"},{"location":"pages/custom-engine/01-custom-engine-agent/#exercise-1-create-azure-openai-service-and-models","title":"Exercise 1: Create Azure OpenAI service and models","text":"<p>This exercise particularly demonstrates how to create and utilize Azure OpenAI's GPT models in custom engine agents. However, Custom engine agents are not limited to using GPT models only. You can also test the lab with any other model you prefer use.</p> Choosing Between Small and Large Language Models <p>When choosing between Small Language Models (SLMs) and Large Language Models (LLMs), as well as among various GPT models, it's important to consider the specific needs of your project in terms of complexity, computational resources, and efficiency.</p> <ul> <li> <p>LLMs: Best for complex and nuanced tasks requiring deep capabilities. They have billions of parameters and excel in understanding and generating human language. GPT-4, LLaMA 2, BERT or PaLM can be examples for LLMs.  Example scenarios: Handling intricate customer inquiries, offering detailed and context-aware responses, generating high-quality articles from brief prompts, summarizing large volumes of academic papers, extracting key insights, and answering detailed questions.</p> </li> <li> <p>SLMs: Better for quick tasks with limited resources where speed and efficiency are key. They have fewer parameters and are optimized for specific tasks with lower computational needs. Phi-3 by Microsoft, ALBERT by Google or DistilBERT by HuggingFace can be examples for SLMs.  Example scenarios: Providing efficient text analysis without needing cloud resources, enabling accurate and responsive voice commands with minimal latency, smart home automation and control with natural speech.</p> </li> </ul> <p>OpenAI's GPT models are popular examples for LLMs. When choosing between OpenAI's models you may consider the following benefits:</p> <ul> <li> <p>gpt-4: The most advanced model, suitable for highly complex tasks that require extensive understanding and generation capabilities.</p> </li> <li> <p>gpt-4o: An optimized version for specific tasks, offering faster and more efficient performance in those areas.</p> </li> <li> <p>gpt-35-turbo: A balanced model that provides good performance at a lower cost, ideal for a wide range of applications.</p> </li> </ul> <p>You'll need to complete the Azure subscription pre-requisite before starting with this exercise.</p>"},{"location":"pages/custom-engine/01-custom-engine-agent/#step-1-create-azure-openai-service-resource","title":"Step 1: Create Azure OpenAI service resource","text":"Make sure the model you want to create in further steps is available in your Azure OpenAI service region <p>Please check Model summary table and region availability before creating your Azure OpenAI service in any particular region. Make sure that the model you want to use such as <code>gpt-4</code> is available in Standard or Global Standard types in the region you prefer to create your Azure OpenAI Service.</p> <ol> <li>Open the browser of your choice and navigate to Azure Portal.</li> <li>Select Create a resource, then search for <code>Azure OpenAI</code>. Select the Azure OpenAI service and then Create.</li> <li>Fill out the following details and select Next:<ul> <li>Subscription: The Azure subscription for your Azure OpenAI Service</li> <li>Resource group: The Azure resource group to contain your Azure OpenAI resource. You can create a new group or use a pre-existing group.</li> <li>Region: The location of your instance. (Make sure that the deployment model is available in your region).</li> <li>Name: A descriptive name for your Azure OpenAI Service resource, such as <code>MyOpenAIResource</code>.</li> <li>Pricing Tier: The pricing tier for the resource. Currently, only the <code>Standard</code> tier is available for the Azure OpenAI Service.</li> </ul> </li> <li>Select the network configuration of your choice and select Next.</li> <li>Leave the Tags section as default and select Next.</li> <li>Finally, review your Azure OpenAI service details and select Create.</li> </ol> <p>Once your Azure OpenAI service is created successfully, navigate to your resource, select Keys and Endpoint from the left side panel. Copy and save <code>KEY 1</code> and <code>Endpoint</code>that will be required later in Exercise 2.</p> <p></p>"},{"location":"pages/custom-engine/01-custom-engine-agent/#step-2-create-a-deployment-model","title":"Step 2: Create a deployment model","text":"<p>In your Azure OpenAI service, navigate to Model deployments from the left side panel, then select Manage deployments. This will direct you to <code>Azure AI Foundry</code> where you can create your deployment model.</p> What is Azure AI Foundry? <p>Azure AI Foundry is a playground to explore OpenAI models like <code>gpt-35-turbo</code>, <code>gpt-4</code> or <code>Dall-e</code> that helps you craft unique prompts for your use cases, and fine-tune your models. It's also a playground to models other than OpenAI such as <code>Phi-3</code>, <code>Llama 3.1</code> and a starting point to other Azure AI services such as Speech, Vision and more.</p> <p>Learn more about the Generative AI, prompting by watching this Doodle to Code video!</p> <p></p> <p>In Azure AI Foundry, select Deployments tab, Deploy model and then Deploy base model. Search the model you prefer to use such as <code>gpt-4</code> and Confirm. Fill out the following details and select Deploy:</p> <ul> <li>Deployment name: Recommended to use the same name with the selected deployment model, such as <code>gpt-4</code>.</li> <li>Select a model: Select a model, <code>gpt-4</code> is recommended.</li> <li>Deployment type: Global Standard.</li> </ul> <p>Tip: Handling no quota available message</p> <p>When you select a model, you may see No quota available message pop-up on top of the configuration page. To handle this, you have two options: 1. Select a different version or deployment type 1. Free up the resources on other deployments by requesting for more quota or adjust the existing quota</p> <p>Once your model is successfully created, select Open in playground, and test your model by selecting Prompt samples from the top and choose one of the prompts available.</p> <p>For example, choose \"Shakespearean Writing Assistant\" and select Use prompt. and ask questions such as \"tell me about Istanbul\". You'll be amazed by the descriptive and poetic style of the response \u270d\ufe0f.</p> <p></p> <p></p>"},{"location":"pages/custom-engine/01-custom-engine-agent/#exercise-2-scaffold-a-custom-engine-agent-from-a-template","title":"Exercise 2: Scaffold a custom engine agent from a template","text":"<p>You'll need to complete all the required pre-requisites before starting with this exercise.</p>"},{"location":"pages/custom-engine/01-custom-engine-agent/#step-1-use-teams-toolkit-to-create-a-new-custom-engine-agent","title":"Step 1: Use Teams Toolkit to create a new custom engine agent","text":"<ol> <li>Open Teams Toolkit on Visual Studio Code and select Create a New App &gt; Custom Engine Agent &gt; Basic AI Chatbot.</li> <li>Select TypeScript as a programming language choice and Azure OpenAI as Large Language model of your choice.<ol> <li>Paste the Azure OpenAI key and press enter.</li> <li>Paste the Azure OpenAI endpoint and press enter. (Endpoint shouldn't include forward slash at the end of its URL.)</li> <li>Type Azure OpenAI deployment model name and press enter.</li> </ol> </li> <li>Select a folder for your project root.</li> <li>Provide a name for your project such as <code>CareerGenie</code> and press enter.</li> </ol> <p>After providing all the details mentioned above, your project will be scaffolded successfully in seconds.</p> <p></p>"},{"location":"pages/custom-engine/01-custom-engine-agent/#step-2-customize-prompt-and-test-the-app","title":"Step 2: Customize prompt and test the app","text":"<p>Prompts are essential for interacting with AI language models and directing their behavior. They serve as the inputs or questions we provide to the model to obtain specific responses. By crafting prompts carefully, we can guide the AI to generate desired outputs. Let's customize the prompt of our custom engine agent and define the behavior of Career Genie!</p> <p>In your project folder, navigate to <code>src/prompts/chat/skprompt.txt</code> and replace the existing text with the following prompt:</p> <pre><code>You are a career specialist named \"Career Genie\" that helps Human Resources team for writing job posts.\nYou are friendly and professional.\nYou always greet users with excitement and introduce yourself first.\nYou like using emojis where appropriate.\n</code></pre> <p>To test the behavior of your app quickly, you can use Teams App Test Tool. Later in the exercise, you'll run and debug your custom engine agent on Microsoft Teams.</p> More information about the Teams App Test Tool <p>The Teams App Test Tool, or simply Test Tool, is a feature within Teams Toolkit that enables developers to debug, test, and refine their Teams bot applications in a web-based chat environment that mimics the behavior, look, and feel of Microsoft Teams. This tool eliminates the need for a Microsoft 365 tenant or a dev tunnel, streamlining the development process.</p> <p>Start debugging your app by selecting Run and Debug tab on Visual Studio Code and Debug in Test Tool. Teams App Test Tool will pop up on your browser and you can start chatting with your custom engine agent right away! Some of the recommended questions you can ask to test the behavior:</p> <ul> <li>\"Can you help me write a job post for a Senior Developer role?\"</li> <li>\"What would be the list of required skills for a Project Manager role?\"</li> <li>\"Can you share a job template?\"</li> </ul> <p></p> What does Teams Toolkit do behind the scene? <p>When you start debugging your app, Teams Toolkit completes some required tasks for you behind the scene, such as:</p> <ul> <li>Checking the required prerequisites such as Node.js, Microsoft 365 Account (If debugging in local or dev), ports occupancy.</li> <li>Starting local tunneling service (If debugging in local) to forward public URL to local port.</li> <li>Executing the lifecycle stage provision, available in <code>teamsapp.yml</code>, <code>teamsapp.local.user</code> or <code>teamsapp.testtool.user</code> files for creating Teams App ID, completing bot registration, executing the app manifest and creating the app package, available in <code>appPackage/</code> folder.</li> <li>Create or update variables to env file, available in <code>env/</code> folder.</li> </ul> <p>After successfully completing your testing, end your debugging session and close the terminals in Visual Studio Code.</p> <p></p> <p>CONGRATULATIONS!</p> <p>You have completed Lab B1 - Build a custom engine agent using Azure OpenAI and Teams Toolkit! If you want explore further, the source code of this lab is available in the Copilot Developer Camp repo.</p> <p>You are now ready to proceed to Lab B2 - Index your data in Azure AI Search and bring it into your custom engine agent. Select Next.</p> <p></p>"},{"location":"pages/custom-engine/02-rag/","title":"Lab B2 - Index your data in Azure AI Search","text":"<p>Do these labs if you want to build a Custom engine agent with custom AI model and orchestration using Azure OpenAI and Teams AI library</p> <ul> <li>B0 - Setup</li> <li>B1 - First custom engine agent</li> <li>B2 - Index your data in Azure AI Search</li> <li>B3 - Enhance the user experience</li> <li>B4 - Add single sign on authentication</li> <li>B5 - Add actions to handle complex tasks</li> </ul> Table of Contents <p>In this lab you will enable Retrieval-Augmented Generation for your custom engine agent and integrate with Azure AI Search to chat with your data.</p> <p>In this lab you will:</p> <ul> <li>Learn what is Retrieval-Augmented Generation (RAG)</li> <li>Setup Azure resources</li> <li>Upload your documents to Azure AI Search</li> <li>Prepare your custom engine agent for Vector Search</li> <li>Learn how to run and test your app</li> </ul>"},{"location":"pages/custom-engine/02-rag/#introduction","title":"Introduction","text":"<p>In the previous exercise, you learned how to create a custom engine agent and customize the prompt for defining the behavior of the AI chatbot, Career Genie. In this exercise, you'll apply vector search to a collection of resumes to find the best candidate for the job requirements. To enable vector search in Career Genie, you'll use the \"Azure AI Foundry on your data\" feature to:</p> <ul> <li>Create an index on Azure AI Search.</li> <li>Generate vector embeddings for the resumes (PDF documents).</li> <li>Upload the data in chunks to Azure AI Search.</li> </ul> <p>Finally, you'll integrate your custom engine agent with Azure AI Search to chat with your data and obtain the best results.</p> What is Retrieval-Augmented Generation (RAG)? <p>Retrieval-Augmented Generation (RAG) is a technique used in artificial intelligence to improve the quality of responses generated by language models. Here's a simple example to understand it better:</p> <p>Imagine you have a smart assistant that can write answers to your questions. Sometimes, this assistant might not know everything it needs to give a great answer. To help with this, RAG lets the assistant look up information from a large collection of documents, videos, images similar to how you might search the internet for answers. After finding the relevant information, the assistant then uses this data to write a better, more accurate response.</p> <p>So, RAG combines two steps:</p> <ul> <li>Retrieval: Finding relevant information from a big pool of data.</li> <li>Generation: Using that information to create a detailed and accurate response.</li> </ul> <p>This way, RAG helps in providing more informed and useful answers, making it very effective for tasks like answering questions, writing articles, and assisting with research.</p> <p>Learn more about the RAG by watching this Doodle to Code video!</p> <p></p> Benefits of using Vector Search <p>Vector search is an advanced technique used to find information quickly and accurately based on its meaning rather than just matching exact words. Unlike traditional text-based search, which relies on exact keyword matches, vector search uses numeric vectors to find content that is similar to your query. This enables Vector search to handle:</p> <ul> <li>Semantic or conceptual similarity: Matching concepts that are similar in meaning even if they use different words (e.g., \"pastry\" and \"croissant\").</li> <li>Multilingual content: Finding equivalent content across different languages (e.g., \"pastry\" in English and \"geb\u00e4ck\" in German).</li> <li>Multiple content types: Searching across different formats (e.g., \"pastry\" in text and an image of a pastry).</li> </ul> <p>Here is how vector search works:</p> <ol> <li>Converting text to vectors: Imagine turning words or sentences into a series of numbers (a vector) that captures the essence or meaning of that text. This is done using techniques like word embeddings or deep learning models.</li> <li>Storing vectors: These vectors are stored in a special database designed to handle them efficiently.</li> <li>Searching with vectors: When you search for something, your query is also converted into a vector. The search system then looks for vectors in the database that are close to your query vector in terms of meaning, not just exact word matches.</li> </ol> <p>For example, if you search for \"how to bake a cake\" the system can find documents about \"cake recipes\" or \"baking tips\" even if they don't have the exact words \"how to bake a cake\" or even if the recipes are written in another language. This makes vector search powerful for finding relevant information based on context and meaning, especially in large datasets.</p> <p>In summary, vector search improves the search process by focusing on the meaning behind the words, enabling more accurate and relevant results.</p>"},{"location":"pages/custom-engine/02-rag/#exercise-1-setup-azure-resources","title":"Exercise 1: Setup Azure Resources","text":"<p>You'll need to complete the Azure subscription pre-requisite before starting with this exercise.</p>"},{"location":"pages/custom-engine/02-rag/#step-1-create-azure-ai-search-service-resource","title":"Step 1: Create Azure AI Search service resource","text":"What is Azure AI Search? <p>Azure AI Search (formerly known as \"Azure Cognitive Search\") provides secure information retrieval at scale over user-owned content in traditional and generative AI search applications.When you create a search service, you work with the following capabilities:</p> <ul> <li>A search engine for vector search, full text and hybrid search over a search index</li> <li>Rich indexing with integrated data chunking and vectorization</li> <li>Rich query syntax for vector queries, text search, hybrid queries</li> <li>Integration with Azure AI services and Azure OpenAI</li> </ul> <ol> <li>Open the browser of your choice and navigate to Azure Portal.</li> <li>Select Create a resource, then search for <code>Azure AI Search</code>. Select the Azure AI Search service and then Create.</li> <li>Fill out the following details and select Review + Create:<ul> <li>Subscription: The Azure subscription for your Azure OpenAI Service</li> <li>Resource group: Select the pre-existing resource group you created earlier for Azure OpenAI service.</li> <li>Name: A descriptive name for your Azure OpenAI Service resource, such as <code>copilotcamp-ai-search</code>.</li> <li>Location: The location of your instance.</li> <li>Pricing Tier: Basic</li> </ul> </li> </ol> <p>Once your Azure AI Search service resource is created successfully, navigate to your resource, In Overview, copy and save <code>Url</code>. Then, navigate to Keys tab under the Settings, copy and save <code>Primary admin key</code>. Both of them will be required later in the following exercises.</p> <p></p>"},{"location":"pages/custom-engine/02-rag/#step-2-create-a-storage-account-service-resource","title":"Step 2: Create a storage account service resource","text":"<ol> <li>Open the browser of your choice and navigate to Azure Portal.</li> <li>Select Create a resource, then search for <code>Storage Account</code>. Select the Storage Account service and then Create.</li> <li>Fill out the following details and select Review, then Create:<ul> <li>Subscription: The Azure subscription for your Azure OpenAI Service</li> <li>Resource group: Select the pre-existing resource group you created earlier for Azure OpenAI service.</li> <li>Name: A descriptive name for your Azure OpenAI Service resource, such as <code>copilotcampstorage</code>.</li> <li>Region: The location of your instance.</li> <li>Performance: Standard</li> <li>Redundancy: Geo-redundant storage (GRS)</li> </ul> </li> </ol>"},{"location":"pages/custom-engine/02-rag/#step-3-create-a-text-embedding-ada-002-model","title":"Step 3: Create a <code>text-embedding-ada-002</code> model","text":"What does <code>text-embedding-ada-002</code> do? <p>The <code>text-embedding-ada-002</code> model on Azure OpenAI converts text into numeric vectors that represent the meaning of the text. This allows for vector search, where instead of matching exact words, the search finds text with similar meanings. It works with multiple languages and different content types, making it useful for comparing text across languages and formats. When used with Azure AI Search, it improves search results by finding the most relevant and contextually accurate information. This model is perfect for creating advanced search solutions and applications that need to understand natural language.</p> <p>Open Azure AI Foundry in your browser, then select Deployments. Select Create a new deployment. Fill out the following details and select Create:</p> <ul> <li>Select a model: <code>text-embedding-ada-002</code>.</li> <li>Model version: Default.</li> <li>Deployment type: Standard.</li> <li>Deployment name: Choose a memorable name, such as <code>text-embeddings</code></li> <li>Content Filter: Default.</li> </ul> <p>Tip: Handling no quota available message</p> <p>When you select a model, you may see No quota available message pop-up on top of the configuration page. To handle this, you have two options: 1. Select a different version or deployment type 1. Free up the resources on other deployments by requesting for more quota or adjust the existing quota</p> <p></p>"},{"location":"pages/custom-engine/02-rag/#exercise-2-upload-your-documents-to-azure-ai-search-using-azure-ai-foundry-chat-playground","title":"Exercise 2: Upload your documents to Azure AI Search using Azure AI Foundry Chat Playground","text":"<p>For this exercise, download fictitious_resumes.zip and unzip the folder.</p>"},{"location":"pages/custom-engine/02-rag/#step-1-upload-your-documents-to-azure-ai-search","title":"Step 1: Upload your documents to Azure AI Search","text":"<ol> <li> <p>Open Azure AI Foundry in your browser, then select Chat playground. In the Setup section, first make sure you reset the model instructions by selecting Reset and delete examples related to Shakespearean writing to start from scratch. If you already have the Chat playground in empty and default setup, you can proceed to the next step.</p> <p></p> </li> <li> <p>Select Add your data and then Add a data source.</p> <p></p> </li> <li> <p>Select Upload files (preview), then fill the details as the following and select Next:</p> <ul> <li>Subscription: Select the subscription you created your Azure resources.</li> <li>Select Azure Blob storage resource: Select your storage resource, <code>copilotcampstorage</code>. (You'll see a message Azure OpenAI needs your permission to access this resource, select Turn on CORS.)</li> <li>Select Azure AI Search resource: Select your Azure AI Search resournce, <code>copilotcamp-ai-search</code>.</li> <li>Enter the index name: Index name, such as <code>resumes</code>; make note of this</li> <li>Select the box for Add vector search to this search resource.</li> <li>Select an embedding model: Select your text-embedding-ada-002 model, <code>text-embeddings</code>.</li> </ul> </li> </ol> <p>Take note of the index name as you will use this in the INDEX_NAME environment variable.</p> <p></p> <ol> <li>Select Browse for a file and select the pdf documents from the <code>resumes</code> folder. Then, select Upload files and Next.</li> <li>Select Search type as <code>Vector</code> and chunk size as <code>1024(Default)</code>, then Next.</li> <li>Select <code>API Key</code> as Azure resource authentication type, then Next.</li> </ol> <p>It takes couple of minutes to complete the data ingestion. Once the data is ready, you can proceed with testing.</p> <p></p> <p>Note</p> <p>Once you index your data, your index remains on Azure AI Search even if you close or refresh the Chat Playground. If the Chat Playground resets itself and you have to add your data again, you don't have to index your data for the second time using Upload files, instead you can select Azure AI Search from Add Your Data section and select your existing index to test out your data.</p>"},{"location":"pages/custom-engine/02-rag/#step-2-test-your-data-on-azure-ai-foundry","title":"Step 2: Test your data on Azure AI Foundry","text":"<p>Once your data  ingestion is completed, use Chat playground to ask questions about your data. </p> <p>You can ask questions such as \"Can you suggest me a candidate who is suitable for Spanish speaking role that requires at least 2 years of .NET experience?\".</p> <p>Tip: Making the most out of your data</p> <p>Review your dataset before asking questions testing the vector search. Go through the <code>resumes</code> folder and recognize the resumes provided in different languages with diverse professions, years of experience, skills and more. Start chatting with your data by asking questions to find out the right candidate for a skill, language, profession, years of experience and other categories. Try to test out the combination of requirements to challenge the search experience!</p> <p></p> <p></p>"},{"location":"pages/custom-engine/02-rag/#step-3-sneak-peek-to-your-index-on-azure-ai-search","title":"Step 3: Sneak peek to your index on Azure AI Search","text":"<p>To understand more about your dataset and explore more, select resumes from the Add your data section of the Chat playground. This will redirect you to your resumes index on Azure AI Search.</p> <p></p> <p>First, let's include the vector content in our data. Select Fields tab in your Resumes index page, then check the box for contentVector, finally select Save.</p> <p></p> <p>Go back to Search explorer tab, select Query options in your Resumes index page and then change the API version as <code>2023-11-01</code>, then select Close. To view your data, press Search.</p> <p>Tip: Recognize <code>contentVector</code> parameter</p> <p>When scrolling through your data, recognize that each document has <code>contentVector</code> parameter that contains the numeric vectors of the pdf document. These numeric vectors will be used for Vector Search to identify the best matching results.</p> <p></p> <p></p>"},{"location":"pages/custom-engine/02-rag/#exercise-3-integrate-your-app-with-azure-ai-search","title":"Exercise 3: Integrate your app with Azure AI Search","text":"<p>For this exercise, ensure that you obtain Azure OpenAI text embedding deployment name and Azure AI Search key and endpoint.</p>"},{"location":"pages/custom-engine/02-rag/#step-1-configure-environment-variables","title":"Step 1: Configure environment variables","text":"<p>In your Career Genie project, navigate to <code>env/.env.local.user</code> and paste the following environment variables:</p> <pre><code>AZURE_OPENAI_EMBEDDING_DEPLOYMENT_NAME='&lt;Your-Text-Embedding-Model-Name&gt;'\nSECRET_AZURE_SEARCH_KEY='&lt;Your-Azure-AI-Search-Key&gt;'\nAZURE_SEARCH_ENDPOINT='&lt;Your-Azure-AI-Search-Endpoint&gt;'\nINDEX_NAME='&lt;Your-index-name&gt;'\n</code></pre> <p>Open <code>teamsapp.local.yml</code> and add the following snippet at the bottom of the file, under <code>uses: file/createOrUpdateEnvironmentFile</code>:</p> <pre><code>AZURE_OPENAI_EMBEDDING_DEPLOYMENT_NAME: ${{AZURE_OPENAI_EMBEDDING_DEPLOYMENT_NAME}}\nAZURE_SEARCH_KEY: ${{SECRET_AZURE_SEARCH_KEY}}\nAZURE_SEARCH_ENDPOINT: ${{AZURE_SEARCH_ENDPOINT}}\nINDEX_NAME: ${{INDEX_NAME}}\n</code></pre> <p>Navigate to <code>src/config.ts</code> and add the following snippet inside <code>config</code>:</p> <pre><code>azureOpenAIEmbeddingDeploymentName: process.env.AZURE_OPENAI_EMBEDDING_DEPLOYMENT_NAME,\nazureSearchKey: process.env.AZURE_SEARCH_KEY,\nazureSearchEndpoint: process.env.AZURE_SEARCH_ENDPOINT,\nindexName: process.env.INDEX_NAME,\n</code></pre> <p></p>"},{"location":"pages/custom-engine/02-rag/#step-2-configure-azure-ai-search-as-a-data-source","title":"Step 2: Configure Azure AI Search as a data source","text":"<p>Open <code>src/prompts/chat/config.json</code> in your project, then add <code>data_sources</code> inside the <code>completion</code> brackets:</p> <pre><code>\"data_sources\": [\n{\n    \"type\": \"azure_search\",\n    \"parameters\": {\n        \"endpoint\": \"$searchEndpoint\",\n        \"index_name\": \"$indexName\",\n        \"authentication\": {\n            \"type\": \"api_key\",\n            \"key\": \"$searchApiKey\"\n        },\n        \"query_type\":\"vector\",\n        \"in_scope\": true,\n        \"strictness\": 3,\n        \"top_n_documents\": 3,\n        \"embedding_dependency\": {\n        \"type\": \"deployment_name\",\n        \"deployment_name\": \"$azureOpenAIEmbeddingDeploymentName\"\n        }\n    }\n}\n]\n</code></pre> <p>Open <code>src/prompts/chat/skprompt.txt</code> and update the prompt as the following:</p> <pre><code>You are a career specialist named \"Career Genie\" that helps Human Resources team for finding the right candidate for the jobs. \nYou are friendly and professional.\nYou always greet users with excitement and introduce yourself first.\nYou like using emojis where appropriate.\nAlways mention all citations in your content.\n</code></pre> <p>Open the terminal in Visual Studio Code, and run the following script from the project root:</p> <pre><code>npm install fs\n</code></pre> <p>Go to <code>src/app/app.ts</code> and add the following parameter in your  <code>OpenAIModel</code>:</p> <pre><code>azureApiVersion: '2024-02-15-preview'\n</code></pre> <p>Add the following import on top of the <code>src/app/app.ts</code> file:</p> <pre><code>import fs from 'fs';\n</code></pre> <p>In <code>src/app/app.ts</code>, replace the <code>defaultPrompt</code> inside the <code>ActionPlanner</code> with the following code snippet:</p> <pre><code>defaultPrompt: async () =&gt; {\n    const template = await prompts.getPrompt('chat');\n    const skprompt = fs.readFileSync(path.join(__dirname, '..', 'prompts', 'chat', 'skprompt.txt'));\n\n    const dataSources = (template.config.completion as any)['data_sources'];\n\n    dataSources.forEach((dataSource: any) =&gt; {\n      if (dataSource.type === 'azure_search') {\n        dataSource.parameters.authentication.key = config.azureSearchKey;\n        dataSource.parameters.endpoint = config.azureSearchEndpoint;\n        dataSource.parameters.indexName = config.indexName;\n        dataSource.parameters.embedding_dependency.deployment_name =\n          config.azureOpenAIEmbeddingDeploymentName;\n        dataSource.parameters.role_information = `${skprompt.toString('utf-8')}`;\n      }\n    });\n\n    return template;\n}\n</code></pre> <p></p>"},{"location":"pages/custom-engine/02-rag/#step-3-debug-your-app-and-chat-with-your-data","title":"Step 3: Debug your app and chat with your data","text":"<p>Disclaimer: Debug locally instead of using the Test Tool</p> <p>Note that some advanced features you've added in your app may not show up properly in the App Test Tool. Therefore, you are going to debug your app locally on Teams instead of using the Test Tool moving forward.</p> <p>Let's test Career Genie on Teams this time. Start debugging your app by selecting Run and Debug tab on Visual Studio Code and Debug in Teams (Edge) or Debug in Teams (Chrome). Microsoft Teams will pop up on your browser. Once your app details show up on Teams, select Add and start chatting with your app.</p> <p>Tip: Testing this exercise locally</p> <p>Make sure to test and debug this exercise on Teams locally, as some of the Teams AI library capabilities you've implemented in your app so far won't smoothly work in the Teams App Test Tool.</p> <p>Ensure your questions are related to your dataset. Go through pdf documents in the <code>resumes</code> folder to understand more about your data. Challenge your custom engine agent by combining requirements and asking complex questions! Some suggestions would be:</p> <ul> <li>Can you suggest a candidate who is suitable for spanish speaking role that requires at least 2 years of .NET experience?</li> <li>Who are the other good candidates?</li> <li>Who would be suitable for a position that requires 5+ python development experience?</li> <li>Can you suggest any candidates for a senior developer position with 7+ year experience that requires Japanese speaking?</li> </ul> <p></p> <p></p> <p>CONGRATULATIONS!</p> <p>You have completed Lab B2 - Index your data in Azure AI Search and bring it into your custom engine agent! If you want explore further, the source code of this lab is available in the Copilot Developer Camp repo.</p> <p>You are now ready to proceed to Lab B3 - Enhance User Experience with the Powered by AI kit! Select Next. </p> <p></p>"},{"location":"pages/custom-engine/03-powered-by-ai/","title":"B3 - Enhance User Experience","text":"<p>Do these labs if you want to build a Custom engine agent with custom AI model and orchestration using Azure OpenAI and Teams AI library</p> <ul> <li>B0 - Setup</li> <li>B1 - First custom engine agent</li> <li>B2 - Index your data in Azure AI Search</li> <li>B3 - Enhance the user experience</li> <li>B4 - Add single sign on authentication</li> <li>B5 - Add actions to handle complex tasks</li> </ul> Table of Contents <p>In this lab you will learn about the Powered by AI, a set of features Teams AI library provides and utilize them in your custom engine agent to enhance the user experience.</p> <p>In this lab you will:</p> <ul> <li>Learn what are the Powered by AI features</li> <li>Enable Feedback Loop to collect user feedback</li> <li>Customize citations with Adaptive Cards</li> <li>Enable Generated by AI label</li> <li>Enable Sensitivity Label</li> </ul>"},{"location":"pages/custom-engine/03-powered-by-ai/#introduction","title":"Introduction","text":"What is Powered by AI? <p>Powered by AI is a set of features provided by the Teams AI library that enhances interactions with custom engine agents, making them more engaging and user-friendly. These features include:</p> <ul> <li> <p>Feedback Loop: Users can rate AI responses with a thumbs up or down. This feedback helps refine the AI's accuracy and usefulness over time.</p> </li> <li> <p>Citations: The AI provides references to the sources of information, ensuring transparency and credibility.</p> </li> <li> <p>Generated by AI: Messages created by the AI system are labeled as \"AI generated,\" so users can distinguish between AI and human responses.</p> </li> <li> <p>Sensitivity Information: If the information shared is sensitive, a sensitivity label will appear, advising whether it can be shared outside your organization.</p> </li> </ul> <p>In the previous exercise, you explored Retrieval-Augmented Generation (RAG) and its integration into your custom engine agent. In this exercise, you'll enhance the user experience by leveraging \"Powered by AI\" features. Follow these steps:</p> <ul> <li>Implement the Feedback Loop</li> <li>Customize Citations</li> <li>Label AI-Generated messages</li> <li>Display Sensitivity information</li> </ul> <p>By incorporating these \"Powered by AI\" features, you'll make your custom engine agent more transparent, reliable, and user-friendly, which will enhance the overall user experience.</p>"},{"location":"pages/custom-engine/03-powered-by-ai/#exercise-1-enable-feedback-loop","title":"Exercise 1: Enable Feedback Loop","text":"<p>In this exercise, you can continue using the same source code you developed in the previous lab.</p>"},{"location":"pages/custom-engine/03-powered-by-ai/#step-1-integrate-feedback-loop-in-your-app","title":"Step 1: Integrate Feedback Loop in your app","text":"<p>In your project, open <code>src/app/app.ts</code>, locate your application instance and add <code>enable_feedback_loop: true</code> inside the ai property brackets. The updated application instance will look like the following:</p> <pre><code>const app = new Application({\n  storage,\n  ai: {\n    planner,\n    //feedback loop is enabled\n    enable_feedback_loop: true\n  },\n});\n</code></pre> <p>To handle the feedback responses, add the following code snippet in the <code>src/app/app.ts</code>:</p> <pre><code>app.feedbackLoop(async (_context, _state, feedbackLoopData) =&gt; {\n  if (feedbackLoopData.actionValue.reaction === 'like') {\n      console.log('\ud83d\udc4d' + ' ' + feedbackLoopData.actionValue.feedback!);\n  } else {\n      console.log('\ud83d\udc4e' + ' ' + feedbackLoopData.actionValue.feedback!);\n  }\n});\n</code></pre> <p></p>"},{"location":"pages/custom-engine/03-powered-by-ai/#step-2-test-the-feedback-loop-feature","title":"Step 2: Test the Feedback Loop feature","text":"<p>Let's test Career Genie with the Feedback Loop feature. Start debugging your app by selecting Run and Debug tab on Visual Studio Code and Debug in Teams (Edge) or Debug in Teams (Chrome). This will open Microsoft Teams in your browser. When your app details appear in Teams, select Add to start chatting with your app.</p> <p>Tip: Testing this exercise locally</p> <p>Make sure to test and debug this exercise on Teams locally, as some of the Teams AI library capabilities you've implemented in your app so far won't smoothly work in the Teams App Test Tool.</p> <p>Before testing the Feedback Loop, type \"Hi\" or ask a question similar to \"Suggest me .NET developers who can speak Spanish.\" You'll notice that the response from your custom engine agent includes thumbs up and down buttons at the bottom left corner.</p> <p></p> <p>Now, let's test the feedback loop. Click on either the thumbs up or down button. A feedback card will immediately pop up. Provide your feedback in the text field on the card and click Submit.</p> <p></p> <p>To verify that your feedback was recorded, return to Visual Studio Code and check your terminal. You'll see the feedback you provided, including whether you gave a thumbs up or down and your comment.</p> <p></p> <p>Dive deeper into the Feedback Loop by debugging</p> <p>Debugging the code is an excellent way to understand how it works. To delve deeper into how the Feedback Loop handler functions, set a breakpoint at <code>app.feedbackLoop</code>. Run the app and test the Feedback Loop by clicking thumbs up or down. You'll observe that <code>feedbackLoopData.actionValue.reaction</code> captures the reaction, while <code>feedbackLoopData.actionValue.feedback</code> captures the text feedback you provide.</p> <p></p>"},{"location":"pages/custom-engine/03-powered-by-ai/#exercise-2-customize-citations-with-adaptive-cards","title":"Exercise 2: Customize citations with Adaptive Cards","text":"<p>When you define a data source in a custom engine agent, the Teams AI library dynamically enables citations to reference related documents. Recognize the current experience in your custom engine agent, ask a question similar to \"Suggest me .NET developers who can speak Spanish.\". You will realize that you can hover over the citation to see the beginning of the document.</p> <p></p> <p>In this exercise, you'll tailor this citation experience further and use Adaptive Cards to customize the way citations are presented.</p>"},{"location":"pages/custom-engine/03-powered-by-ai/#step-1-create-an-adaptive-card-for-citations","title":"Step 1: Create an Adaptive Card for citations","text":"<p>Go to <code>src/app/</code> folder and create a new file named card.ts. Add the following code snippet inside the <code>card.ts</code> file:</p> <pre><code>import { AdaptiveCard, Message, Utilities } from '@microsoft/teams-ai';\n/**\n * Create an adaptive card from a prompt response.\n * @param {Message&lt;string&gt;} response The prompt response to create the card from.\n * @returns {AdaptiveCard} The response card.\n */\n\n//Adaptive card to display the response and citations\nexport function createResponseCard(response: Message&lt;string&gt;): AdaptiveCard {\n    const citationCards = response.context?.citations.map((citation, i) =&gt; ({\n            type: 'Action.ShowCard',\n            title: `${i+1}`,\n            card: {\n                type: 'AdaptiveCard',\n                body: [\n                    {\n                        type: 'TextBlock',\n                        text: citation.title,\n                        fontType: 'Default',\n                        weight: 'Bolder'\n                    },\n                    {\n                        type: 'TextBlock',\n                        text: citation.content,\n                        wrap: true\n                    }\n                ]\n            }\n        }));\n\n    const text = Utilities.formatCitationsResponse(response.content!);\n    return {\n        type: 'AdaptiveCard',\n        body: [\n            {\n                type: 'TextBlock',\n                text: text,\n                wrap: true\n            },\n            {\n                type: 'TextBlock',\n                text: 'Citations',\n                wrap: true,\n                fontType: 'Default',\n                weight: 'Bolder'\n            },\n            {\n                type: 'ActionSet',\n                actions: citationCards\n            }\n        ],\n        $schema: 'http://adaptivecards.io/schemas/adaptive-card.json',\n        version: '1.5'\n    };\n}\n</code></pre> <p>This Adaptive Card allows you to list citations as <code>Action.ShowCard</code> buttons which show more details when clicked. It also displays the main content of the response alongside the citation buttons. If a user wants to learn more about a citation, they can click the button to read the entire document.</p> <p></p>"},{"location":"pages/custom-engine/03-powered-by-ai/#step-2-use-predictedsaycommand-to-customize-the-citation-experience","title":"Step 2: Use PredictedSayCommand to customize the citation experience","text":"What does <code>PredictedSayCommand</code> do? <p>A PredictedSayCommand is a response directive that the AI system executes. By customizing PredictedSayCommand, you gain granular control over integrating Powered by AI features like citations, feedback loops into the custom engine agent's activities. This allows you to precisely tailor the AI responses to meet your application needs.</p> <p>Go to <code>src/app/app.ts</code> and add the following snippet on top of your code to import your adaptive card:</p> <pre><code>import { createResponseCard } from './card';\n</code></pre> <p>Add <code>CardFactory</code> and <code>MessageFactory</code> inside the \"botbuilder\" import,  the updated version of the import will look like the following:</p> <pre><code>import { CardFactory, MemoryStorage, MessageFactory } from \"botbuilder\";\n</code></pre> <p>Add <code>AI</code> and <code>PredictedSayCommand</code> inside the \"@microsoft/teams-ai\" import, the updated version of the import will look like the following:</p> <pre><code>import { Application, ActionPlanner, OpenAIModel, PromptManager, AI, PredictedSayCommand} from \"@microsoft/teams-ai\";\n</code></pre> <p>Add the following PredictedSayCommand action in the <code>src/app/app.ts</code> to customize the citation:</p> <pre><code>app.ai.action&lt;PredictedSayCommand&gt;(AI.SayCommandActionName, async (context, state, data, action) =&gt; {\n  let activity;\n  if (data.response.context &amp;&amp; data.response.context.citations.length &gt; 0 ) {\n      const attachment = CardFactory.adaptiveCard(createResponseCard(data.response));\n      activity = MessageFactory.attachment(attachment);\n  }\n  else {\n      activity = MessageFactory.text(data.response.content);\n  }\n\n  activity.entities = [\n    {\n        type: \"https://schema.org/Message\",\n        \"@type\": \"Message\",\n        \"@context\": \"https://schema.org\",\n        \"@id\": \"\"\n    }\n  ];\n  activity.channelData = {\n    feedbackLoopEnabled: true\n  };\n\n  await context.sendActivity(activity);\n\n  return \"success\";\n\n});\n\nexport default app;\n</code></pre> <p></p>"},{"location":"pages/custom-engine/03-powered-by-ai/#step-3-test-the-customized-citation-experience","title":"Step 3: Test the customized citation experience","text":"<p>Let's test Career Genie with the customized citation experience. Start debugging your app by selecting Run and Debug tab on Visual Studio Code and Debug in Teams (Edge) or Debug in Teams (Chrome). Microsoft Teams will pop up on your browser. This will open Microsoft Teams in your browser. When your app details appear in Teams, select Add to start chatting with your app.</p> <p>Tip: Testing this exercise locally</p> <p>Make sure to test and debug this exercise on Teams locally, as some of the Teams AI library capabilities you've implemented in your app so far won't smoothly work in the Teams App Test Tool.</p> <p>To test the new citation experience, start by greeting Career Genie with \"Hi\" or \"Hello\". Then, try to ask questions similar to \"Can you suggest any candidates for a senior developer position with 7+ year experience that requires Japanese speaking?\"</p> <p></p> <p>Now, recognize that the customized citation experience with Adaptive Cards provides a button for each citation. Click on citation buttons to extend the document view and review the resume details for each candidate.</p> <p></p>"},{"location":"pages/custom-engine/03-powered-by-ai/#exercise-3-enable-the-generated-by-ai-label","title":"Exercise 3: Enable the Generated by AI label","text":"<p>In this exercise, you will continue customizing the user experience of your custom engine agent using <code>PredictedSayCommand</code>. To help users differentiate between AI and human responses, you'll enable the \"AI generated\" label that appears on top of the messages created by the AI system.</p>"},{"location":"pages/custom-engine/03-powered-by-ai/#step-1-use-predictedsaycommand-to-enable-the-generated-by-ai-label","title":"Step 1: Use PredictedSayCommand to enable the Generated by AI label","text":"<p>Go to <code>src/app/app.ts</code> and locate your <code>PredictedSayCommand</code> action. Add the following code snippet inside <code>activity.entities</code>:</p> <pre><code>// Generated by AI label\nadditionalType: [\"AIGeneratedContent\"]\n</code></pre> <p>The update <code>activity.entities</code> will look like the following:</p> <pre><code>activity.entities = [\n    {\n        type: \"https://schema.org/Message\",\n        \"@type\": \"Message\",\n        \"@context\": \"https://schema.org\",\n        \"@id\": \"\",\n        // Generated by AI label\n        additionalType: [\"AIGeneratedContent\"],\n    },\n\n];\n</code></pre> <p></p>"},{"location":"pages/custom-engine/03-powered-by-ai/#step-2-test-the-generated-by-ai-label","title":"Step 2: Test the Generated by AI label","text":"<p>Let's test Career Genie with the \"Generated by AI\" label. Start debugging your app by selecting Run and Debug tab on Visual Studio Code and Debug in Teams (Edge) or Debug in Teams (Chrome). This will open Microsoft Teams in your browser. When your app details appear in Teams, select Add to start chatting with your app.</p> <p>Tip: Testing this exercise locally</p> <p>Make sure to test and debug this exercise on Teams locally, as some of the Teams AI library capabilities you've implemented in your app so far won't smoothly work in the Teams App Test Tool.</p> <p>To test the \"Generated by AI\" label, simply greet Career Genie. The first message you receive will have a small \"AI generated\" label on top.</p> <p></p> <p></p>"},{"location":"pages/custom-engine/03-powered-by-ai/#exercise-4-enable-the-sensitivity-label","title":"Exercise 4: Enable the Sensitivity label","text":"<p>In this final exercise, you will continue utilizing <code>PredictedSayCommand</code> to enable the sensitivity label. Remember, Career Genie is an expert in Human Resources tasks that often require sharing confidential information within your organization. For scenarios like Career Genie, where the information shared is sensitive, a sensitivity label will appear on top of the AI-generated messages, advising whether it can be shared outside your organization.</p>"},{"location":"pages/custom-engine/03-powered-by-ai/#step-1-use-predictedsaycommand-to-enable-the-sensitivity-label","title":"Step 1: Use PredictedSayCommand to enable the Sensitivity label","text":"<p>Go to <code>src/app/app.ts</code> and locate your <code>PredictedSayCommand</code> action. Add the following code snippet inside <code>activity.entities</code>:</p> <pre><code>// Sensitivity label\nusageInfo: {\n    \"@type\": \"CreativeWork\",\n    name: \"Confidential\",\n    description: \"Sensitive information, do not share outside of your organization.\",\n}\n</code></pre> <p>The update <code>activity.entities</code> will look like the following:</p> <pre><code>activity.entities = [\n    {\n        type: \"https://schema.org/Message\",\n        \"@type\": \"Message\",\n        \"@context\": \"https://schema.org\",\n        \"@id\": \"\",\n        // Generated by AI label\n        additionalType: [\"AIGeneratedContent\"],\n        // Sensitivity label\n        usageInfo: {\n          \"@type\": \"CreativeWork\",\n          name: \"Confidential\",\n          description: \"Sensitive information, do not share outside of your organization.\",\n        }\n    },\n\n  ];\n</code></pre> <p></p>"},{"location":"pages/custom-engine/03-powered-by-ai/#step-2-test-the-sensitivity-label","title":"Step 2: Test the Sensitivity label","text":"<p>Let's test Career Genie with the Sensitivity label. Start debugging your app by selecting Run and Debug tab on Visual Studio Code and Debug in Teams (Edge) or Debug in Teams (Chrome). Microsoft Teams will pop up on your browser. Once your app details show up on Teams, select Add and start chatting with your app.</p> <p>Tip: Testing this exercise locally</p> <p>Make sure to test and debug this exercise on Teams locally, as some of the Teams AI library capabilities you've implemented in your app so far won't smoothly work in the Teams App Test Tool.</p> <p>To test the Sensitivity label, greet Career Genie or try to ask questions similar to \"Can you suggest a candidate who is suitable for spanish speaking role that requires at least 2 years of .NET experience?\".</p> <p></p> <p>Notice that the sensitivity label appears right next to the \"AI Generated\" label in Career Genie's message. Hover over the sensitivity label to read the guidance specific to your organization.</p> <p></p> <p>CONGRATULATIONS!</p> <p>You have completed Lab B3 - Enhance User Experience with the Powered by AI kit!  If you want explore further, the source code of this lab is available in the Copilot Developer Camp repo.</p> <p>You are now ready to proceed to Lab A4 - Secure your solution using authentication. Select Next.</p> <p></p>"},{"location":"pages/custom-engine/04-authentication/","title":"B4 - Add single sign on authentication","text":"<p>Do these labs if you want to build a Custom engine agent with custom AI model and orchestration using Azure OpenAI and Teams AI library</p> <ul> <li>B0 - Setup</li> <li>B1 - First custom engine agent</li> <li>B2 - Index your data in Azure AI Search</li> <li>B3 - Enhance the user experience</li> <li>B4 - Add single sign on authentication</li> <li>B5 - Add actions to handle complex tasks</li> </ul> Table of Contents <p>In this lab, you'll learn how to authenticate users with Entra Single Sign-On in Career Genie, and to call the Microsoft Graph API using the token to get logged in user information.</p> <p>In this lab you will learn to:</p> <ul> <li>Add Entra ID single sign-on (SSO) in your app, so users can seamlessly log into your app with the same account they use in Microsoft Teams</li> <li>Use Teams AI library and Bot Framework to implement the single sign on.</li> <li>Acquire and use tokens for app users to enhance security and user experience.</li> </ul>"},{"location":"pages/custom-engine/04-authentication/#introduction","title":"Introduction","text":"<p>Get ready to enhance your CareerGenie by integrating Entra ID (formerly Azure AD) single sign-on (SSO). This will allow your app to seamlessly acquire tokens for accessing Microsoft 365 data via Microsoft Graph, ensuring smooth authentication and authorization. You'll be incorporating this SSO capability using the Teams AI library and the Bot Framework, specifically focusing on a multi-tenant configuration.</p>"},{"location":"pages/custom-engine/04-authentication/#exercise-1-set-up-your-project-for-entra-id-single-sign-on","title":"Exercise 1: Set up your project for Entra ID Single Sign-on","text":"<p>Applications secured with Entra ID must be registered and granted permission. Teams Toolkit will do this work for you, but you have to update your project to make that happen. In this exercise, you'll modify the Teams Toolkit project files to provision your app registration in Entra ID.</p> <p>In this exercise, use the source code for Lab B3 as the base project and proceed to next steps.</p>"},{"location":"pages/custom-engine/04-authentication/#step-1-add-an-entra-id-app-manifest-file-to-define-the-entra-id-application","title":"Step 1: Add an Entra ID App manifest file to define the Entra ID Application","text":"<p>In this step, you'll add a file that defines the application that Teams Toolkit will register for your application in Entra ID. This manifest file allows you to customize various aspects of your application registration. For example, this one sets up <code>User.Read</code> permission on the Microsoft Graph API so your app can read the user's profile.</p> <p>Create a file aad.manifest.json in the root of your project folder, and paste in this JSON:</p> <pre><code>{\n    \"id\": \"${{AAD_APP_OBJECT_ID}}\",\n    \"appId\": \"${{AAD_APP_CLIENT_ID}}\",\n    \"name\": \"CareerGenieBot-aad\",\n    \"accessTokenAcceptedVersion\": 2,\n    \"signInAudience\": \"AzureADMultipleOrgs\",\n    \"optionalClaims\": {\n        \"idToken\": [],\n        \"accessToken\": [\n            {\n                \"name\": \"idtyp\",\n                \"source\": null,\n                \"essential\": false,\n                \"additionalProperties\": []\n            }\n        ],\n        \"saml2Token\": []\n    },\n    \"requiredResourceAccess\": [\n        {\n            \"resourceAppId\": \"Microsoft Graph\",\n            \"resourceAccess\": [\n                {\n                    \"id\": \"User.Read\",\n                    \"type\": \"Scope\"\n                }\n            ]\n        }\n    ],\n    \"oauth2Permissions\": [\n        {\n            \"adminConsentDescription\": \"Allows Teams to call the app's web APIs as the current user.\",\n            \"adminConsentDisplayName\": \"Teams can access app's web APIs\",\n            \"id\": \"${{AAD_APP_ACCESS_AS_USER_PERMISSION_ID}}\",\n            \"isEnabled\": true,\n            \"type\": \"User\",\n            \"userConsentDescription\": \"Enable Teams to call this app's web APIs with the same rights that you have\",\n            \"userConsentDisplayName\": \"Teams can access app's web APIs and make requests on your behalf\",\n            \"value\": \"access_as_user\"\n        }\n    ],\n    \"preAuthorizedApplications\": [\n        {\n            \"appId\": \"1fec8e78-bce4-4aaf-ab1b-5451cc387264\",\n            \"permissionIds\": [\n                \"${{AAD_APP_ACCESS_AS_USER_PERMISSION_ID}}\"\n            ]\n        },\n        {\n            \"appId\": \"5e3ce6c0-2b1f-4285-8d4b-75ee78787346\",\n            \"permissionIds\": [\n                \"${{AAD_APP_ACCESS_AS_USER_PERMISSION_ID}}\"\n            ]\n        },\n        {\n            \"appId\": \"d3590ed6-52b3-4102-aeff-aad2292ab01c\",\n            \"permissionIds\": [\n                \"${{AAD_APP_ACCESS_AS_USER_PERMISSION_ID}}\"\n            ]\n        },\n        {\n            \"appId\": \"00000002-0000-0ff1-ce00-000000000000\",\n            \"permissionIds\": [\n                \"${{AAD_APP_ACCESS_AS_USER_PERMISSION_ID}}\"\n            ]\n        },\n        {\n            \"appId\": \"bc59ab01-8403-45c6-8796-ac3ef710b3e3\",\n            \"permissionIds\": [\n                \"${{AAD_APP_ACCESS_AS_USER_PERMISSION_ID}}\"\n            ]\n        },\n        {\n            \"appId\": \"0ec893e0-5785-4de6-99da-4ed124e5296c\",\n            \"permissionIds\": [\n                \"${{AAD_APP_ACCESS_AS_USER_PERMISSION_ID}}\"\n            ]\n        },\n        {\n            \"appId\": \"4765445b-32c6-49b0-83e6-1d93765276ca\",\n            \"permissionIds\": [\n                \"${{AAD_APP_ACCESS_AS_USER_PERMISSION_ID}}\"\n            ]\n        },\n        {\n            \"appId\": \"4345a7b9-9a63-4910-a426-35363201d503\",\n            \"permissionIds\": [\n                \"${{AAD_APP_ACCESS_AS_USER_PERMISSION_ID}}\"\n            ]\n        }\n    ],\n    \"identifierUris\":[\n        \"api://botid-${{BOT_ID}}\"\n    ],\n    \"replyUrlsWithType\":[\n        {\n          \"url\": \"https://${{BOT_DOMAIN}}/auth-end.html\",\n          \"type\": \"Web\"\n        }\n    ]\n}\n</code></pre> <p></p>"},{"location":"pages/custom-engine/04-authentication/#step-2-update-teams-toolkit-configuration-file-to-create-the-entra-id-app","title":"Step 2: Update Teams Toolkit configuration file to create the Entra ID App","text":"<p>Open the <code>teamsapp.local.yml</code> file. This is a YAML file that defines the steps Teams Toolkit takes to run your project. There are 3 steps in the \"LIFECYCLE\" section of the Teams Toolkit user interface.</p> <ul> <li> <p>Provision - In this phase, any infrastructure needed by your app is created. This includes things like the bot registration, the Teams app package, and, in this case, the Entra ID app registration</p> </li> <li> <p>Deploy - In this phase, the code is built and run locally, or uploaded to Azure for environments other than \"local\"</p> </li> <li> <p>Publish - In this phase, the app package is published to Microsoft Teams</p> </li> </ul> <p>To provision your Entra ID app, add these lines to teamsapp.local.yml. You can put them directly below the <code>provision</code>:</p> <pre><code>  - uses: aadApp/create # Creates a new Entra ID (AAD) app to authenticate users if the environment variable that stores clientId is empty\n    with:\n      name: CareerGenieBot-aad # Note: when you run aadApp/update, the AAD app name will be updated based on the definition in manifest. If you don't want to change the name, make sure the name in AAD manifest is the same with the name defined here.\n      generateClientSecret: true # If the value is false, the action will not generate client secret for you\n      signInAudience: \"AzureADMultipleOrgs\" # Authenticate users with a Microsoft work or school account in your organization's Entra ID tenant (for example, single tenant).\n    writeToEnvironmentFile: # Write the information of created resources into environment file for the specified environment variable(s).\n      clientId: AAD_APP_CLIENT_ID\n      clientSecret: SECRET_AAD_APP_CLIENT_SECRET # Environment variable that starts with `SECRET_` will be stored to the .env.{envName}.user environment file\n      objectId: AAD_APP_OBJECT_ID\n      tenantId: AAD_APP_TENANT_ID\n      authority: AAD_APP_OAUTH_AUTHORITY\n      authorityHost: AAD_APP_OAUTH_AUTHORITY_HOST\n\n</code></pre> <p>And after <code>botFramework/create</code> add below to update the existing AAD app.</p> <pre><code>  - uses: aadApp/update # Apply the AAD manifest to an existing AAD app. Will use the object id in manifest file to determine which AAD app to update.\n    with:\n      manifestPath: ./aad.manifest.json # Relative path to teamsfx folder. Environment variables in manifest will be replaced before apply to AAD app\n      outputFilePath: ./build/aad.manifest.${{TEAMSFX_ENV}}.json\n</code></pre> <p>Tip: YAML requires proper indentation</p> <p>YAML requires proper indentation; each level in the object hierarchy must be indented to indicate the structure. 2 spaces (not tabs) is a good choice. Visual Studio Code will help you here, and will underline any syntax errors in red. You'll know you got it right when the red lines disappear!</p> <p>Now scroll down and find the <code>file/createOrUpdateEnvironmentFile</code> directive in the deploy phase. Add these variables to the envs: collection, right below the ones you added in the previous lab:</p> <pre><code> BOT_DOMAIN: ${{BOT_DOMAIN}}\n AAD_APP_CLIENT_ID: ${{AAD_APP_CLIENT_ID}}\n AAD_APP_CLIENT_SECRET: ${{SECRET_AAD_APP_CLIENT_SECRET}}\n AAD_APP_TENANT_ID: ${{AAD_APP_TENANT_ID}}\n AAD_APP_OAUTH_AUTHORITY_HOST: ${{AAD_APP_OAUTH_AUTHORITY_HOST}}\n AAD_APP_OAUTH_AUTHORITY: ${{AAD_APP_OAUTH_AUTHORITY}}\n</code></pre> <p></p>"},{"location":"pages/custom-engine/04-authentication/#exercise-2-add-sso-in-teams-app-manifest","title":"Exercise 2: Add SSO in Teams app manifest","text":"<p>In this exercise, you'll update the Teams app manifest to add single sign on.</p>"},{"location":"pages/custom-engine/04-authentication/#step-1-update-your-teams-app-manifest-for-sso","title":"Step 1: Update your Teams app manifest for SSO","text":"<p>In the single sign-on process, Teams will hand your code an Entra ID access token for your application. Teams can't provide this access token, however, unless it knows about your application; specifically, it needs to know the application (client) ID and the ID of the bot that's connected to Teams. So you need to add this information to your Teams app manifest.</p> <p>Find the Teams app manifest template in ./appPackage/manifest.json and add the following:</p> <pre><code> \"webApplicationInfo\": {\n        \"id\": \"${{BOT_ID}}\",\n        \"resource\": \"api://botid-${{BOT_ID}}\"\n    }\n</code></pre> <p>Add it below the <code>validDomains</code> node, with a comma in between.</p> <p>While we're here, we need to tell Teams to display web pages from your bot's domain, which allows access to the <code>auth-start.html</code> and <code>auth-end.html</code> pages used for user consent to call the Microsoft Graph. This only happens the first time a user accesses the custom engine agent.</p> <p>So you need to add your bot's domain, ${{BOT_DOMAIN}} to the <code>validDomains</code> array. After making these changes, the end of your <code>manifest.json</code> file should look like this:</p> <pre><code>  \"validDomains\": [\n        \"${{BOT_DOMAIN}}\",\n        \"*.botframework.com\"\n    ],\n</code></pre> <p></p>"},{"location":"pages/custom-engine/04-authentication/#exercise-3-update-the-application-code-for-sso","title":"Exercise 3: Update the application code for SSO","text":"<p>In this exercise, you'll modify the code to accommodate the SSO process.</p>"},{"location":"pages/custom-engine/04-authentication/#step-1-provide-html-pages-for-the-consent-dialog","title":"Step 1: Provide HTML pages for the consent dialog","text":"<p>The first time a user accesses your application, they may need to consent to giving the app permission to read their profile information. This is performed by the Teams AI library. It will display a pop-up window; these HTML pages are to be displayed in that pop-up, and will redirect to Entra ID to do the actual consent.</p> <p>The code snippets for pop up for permission grant are from official teams-ai library sample for Teams SSO</p> <p>Create a new folder called public inside the src folder of the project.</p> <p>Create a file auth-start.html and paste in the contents below:</p> <pre><code>&lt;!--This file is used during the Teams Bot authentication flow to assist with retrieval of the access token.--&gt;\n&lt;!--If you're not familiar with this, do not alter or remove this file from your project.--&gt;\n&lt;html lang=\"en\"&gt;\n\n&lt;head&gt;\n    &lt;title&gt;Login Start Page&lt;/title&gt;\n    &lt;meta charset=\"utf-8\" /&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" /&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n    &lt;script type=\"text/javascript\"&gt;\n        popUpSignInWindow();\n\n        async function popUpSignInWindow() {\n            // Generate random state string and store it, so we can verify it in the callback\n            let state = _guid();\n            localStorage.setItem('state', state);\n            localStorage.removeItem('codeVerifier');\n            var currentURL = new URL(window.location);\n            var clientId = currentURL.searchParams.get('clientId');\n            var tenantId = currentURL.searchParams.get('tenantId');\n            var loginHint = currentURL.searchParams.get('loginHint');\n            var scope = currentURL.searchParams.get('scope');\n            if (!loginHint) {\n                loginHint = '';\n            }\n            var originalCode = _guid();\n            var codeChallenge = await pkceChallengeFromVerifier(originalCode);\n            localStorage.setItem('codeVerifier', originalCode);\n            let queryParams = {\n                client_id: clientId,\n                response_type: 'code',\n                response_mode: 'fragment',\n                scope: scope,\n                redirect_uri: window.location.origin + '/auth-end.html',\n                nonce: _guid(),\n                login_hint: loginHint,\n                state: state,\n                code_challenge: codeChallenge,\n                code_challenge_method: 'S256'\n            };\n            let authorizeEndpoint = `https://login.microsoftonline.com/common/oauth2/v2.0/authorize?${toQueryString(queryParams)}`;     \n            window.location.assign(authorizeEndpoint);\n        }\n\n        // Build query string from map of query parameter\n        function toQueryString(queryParams) {\n            let encodedQueryParams = [];\n            for (let key in queryParams) {\n                encodedQueryParams.push(key + '=' + encodeURIComponent(queryParams[key]));\n            }\n            return encodedQueryParams.join('&amp;');\n        }\n\n        // Converts decimal to hex equivalent      \n        function _decimalToHex(number) {\n            var hex = number.toString(16);\n            while (hex.length &lt; 2) {\n                hex = '0' + hex;\n            }\n            return hex;\n        }\n\n        // Generates RFC4122 version 4 guid (128 bits)\n        function _guid() {\n            // RFC4122: The version 4 UUID is meant for generating UUIDs from truly-random or\n            // pseudo-random numbers.\n            // The algorithm is as follows:\n            //     Set the two most significant bits (bits 6 and 7) of the\n            //        clock_seq_hi_and_reserved to zero and one, respectively.\n            //     Set the four most significant bits (bits 12 through 15) of the\n            //        time_hi_and_version field to the 4-bit version number from\n            //        Section 4.1.3. Version4\n            //     Set all the other bits to randomly (or pseudo-randomly) chosen\n            //     values.\n            // UUID                   = time-low \"-\" time-mid \"-\"time-high-and-version \"-\"clock-seq-reserved and low(2hexOctet)\"-\" node\n            // time-low               = 4hexOctet\n            // time-mid               = 2hexOctet\n            // time-high-and-version  = 2hexOctet\n            // clock-seq-and-reserved = hexOctet:\n            // clock-seq-low          = hexOctet\n            // node                   = 6hexOctet\n            // Format: xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\n            // y could be 1000, 1001, 1010, 1011 since most significant two bits needs to be 10\n            // y values are 8, 9, A, B\n            var cryptoObj = window.crypto || window.msCrypto; // for IE 11\n            if (cryptoObj &amp;&amp; cryptoObj.getRandomValues) {\n                var buffer = new Uint8Array(16);\n                cryptoObj.getRandomValues(buffer);\n                //buffer[6] and buffer[7] represents the time_hi_and_version field. We will set the four most significant bits (4 through 7) of buffer[6] to represent decimal number 4 (UUID version number).\n                buffer[6] |= 0x40; //buffer[6] | 01000000 will set the 6 bit to 1.\n                buffer[6] &amp;= 0x4f; //buffer[6] &amp; 01001111 will set the 4, 5, and 7 bit to 0 such that bits 4-7 == 0100 = \"4\".\n                //buffer[8] represents the clock_seq_hi_and_reserved field. We will set the two most significant bits (6 and 7) of the clock_seq_hi_and_reserved to zero and one, respectively.\n                buffer[8] |= 0x80; //buffer[8] | 10000000 will set the 7 bit to 1.\n                buffer[8] &amp;= 0xbf; //buffer[8] &amp; 10111111 will set the 6 bit to 0.\n                return (\n                    _decimalToHex(buffer[0]) +\n                    _decimalToHex(buffer[1]) +\n                    _decimalToHex(buffer[2]) +\n                    _decimalToHex(buffer[3]) +\n                    '-' +\n                    _decimalToHex(buffer[4]) +\n                    _decimalToHex(buffer[5]) +\n                    '-' +\n                    _decimalToHex(buffer[6]) +\n                    _decimalToHex(buffer[7]) +\n                    '-' +\n                    _decimalToHex(buffer[8]) +\n                    _decimalToHex(buffer[9]) +\n                    '-' +\n                    _decimalToHex(buffer[10]) +\n                    _decimalToHex(buffer[11]) +\n                    _decimalToHex(buffer[12]) +\n                    _decimalToHex(buffer[13]) +\n                    _decimalToHex(buffer[14]) +\n                    _decimalToHex(buffer[15])\n                );\n            } else {\n                var guidHolder = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx';\n                var hex = '0123456789abcdef';\n                var r = 0;\n                var guidResponse = '';\n                for (var i = 0; i &lt; 36; i++) {\n                    if (guidHolder[i] !== '-' &amp;&amp; guidHolder[i] !== '4') {\n                        // each x and y needs to be random\n                        r = (Math.random() * 16) | 0;\n                    }\n                    if (guidHolder[i] === 'x') {\n                        guidResponse += hex[r];\n                    } else if (guidHolder[i] === 'y') {\n                        // clock-seq-and-reserved first hex is filtered and remaining hex values are random\n                        r &amp;= 0x3; // bit and with 0011 to set pos 2 to zero ?0??\n                        r |= 0x8; // set pos 3 to 1 as 1???\n                        guidResponse += hex[r];\n                    } else {\n                        guidResponse += guidHolder[i];\n                    }\n                }\n                return guidResponse;\n            }\n        }\n\n        // Calculate the SHA256 hash of the input text.\n        // Returns a promise that resolves to an ArrayBuffer\n        function sha256(plain) {\n            const encoder = new TextEncoder();\n            const data = encoder.encode(plain);\n            return window.crypto.subtle.digest('SHA-256', data);\n        }\n\n        // Base64-urlencodes the input string\n        function base64urlencode(str) {\n            // Convert the ArrayBuffer to string using Uint8 array to convert to what btoa accepts.\n            // btoa accepts chars only within ascii 0-255 and base64 encodes them.\n            // Then convert the base64 encoded to base64url encoded\n            //   (replace + with -, replace / with _, trim trailing =)\n            return btoa(String.fromCharCode.apply(null, new Uint8Array(str)))\n                .replace(/\\+/g, '-')\n                .replace(/\\//g, '_')\n                .replace(/=+$/, '');\n        }\n\n        // Return the base64-urlencoded sha256 hash for the PKCE challenge\n        async function pkceChallengeFromVerifier(v) {\n            hashed = await sha256(v);\n            return base64urlencode(hashed);\n        }\n    &lt;/script&gt;\n&lt;/body&gt;\n\n&lt;/html&gt;\n</code></pre> <p>Create a file auth-end.html and paste in the contents below:</p> <pre><code>&lt;html lang=\"en\"&gt;\n    &lt;head&gt;\n        &lt;title&gt;Login End Page&lt;/title&gt;\n        &lt;meta charset=\"utf-8\" /&gt;\n        &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" /&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;script\n            src=\"https://statics.teams.cdn.office.net/sdk/v1.6.0/js/MicrosoftTeams.min.js\"\n            integrity=\"sha384-mhp2E+BLMiZLe7rDIzj19WjgXJeI32NkPvrvvZBrMi5IvWup/1NUfS5xuYN5S3VT\"\n            crossorigin=\"anonymous\"\n        &gt;&lt;/script&gt;\n        &lt;div id=\"divError\"&gt;&lt;/div&gt;\n        &lt;script type=\"text/javascript\"&gt;\n            microsoftTeams.initialize();\n            let hashParams = getHashParameters();\n\n            if (hashParams['error']) {\n                // Authentication failed\n                handleAuthError(hashParams['error'], hashParams);\n            } else if (hashParams['code']) {\n                // Get the stored state parameter and compare with incoming state\n                let expectedState = localStorage.getItem('state');\n                if (expectedState !== hashParams['state']) {\n                    // State does not match, report error\n                    handleAuthError('StateDoesNotMatch', hashParams);\n                } else {\n                    microsoftTeams.authentication.notifySuccess();\n                }\n            } else {\n                // Unexpected condition: hash does not contain error or access_token parameter\n                handleAuthError('UnexpectedFailure', hashParams);\n            }\n\n            // Parse hash parameters into key-value pairs\n            function getHashParameters() {\n                let hashParams = {};\n                location.hash\n                    .substr(1)\n                    .split('&amp;')\n                    .forEach(function (item) {\n                        let s = item.split('='),\n                            k = s[0],\n                            v = s[1] &amp;&amp; decodeURIComponent(s[1]);\n                        hashParams[k] = v;\n                    });\n                return hashParams;\n            }\n\n            // Show error information\n            function handleAuthError(errorType, errorMessage) {\n                const err = JSON.stringify({\n                    error: errorType,\n                    message: JSON.stringify(errorMessage)\n                });\n                let para = document.createElement('p');\n                let node = document.createTextNode(err);\n                para.appendChild(node);\n\n                let element = document.getElementById('divError');\n                element.appendChild(para);\n            }\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n\n</code></pre> <p></p>"},{"location":"pages/custom-engine/04-authentication/#step-2-update-code-to-handle-sso","title":"Step 2: Update code to handle SSO","text":"<ul> <li>Changes to index.ts file is as follows:</li> </ul> <p>To serve static files from the public folder, include the following import for <code>path</code>:</p> <pre><code>import * as path from 'path';\n\n</code></pre> <p>And then add below code after the <code>server.listen</code> method .</p> <pre><code>server.get(\n  '/auth-:name(start|end).html',\n  restify.plugins.serveStatic({\n      directory: path.join(__dirname, 'public')\n  })\n);\n</code></pre> <ul> <li>Changes to adapter.ts file is as follows: Import the TeamsAdapter from teams-ai library.</li> </ul> <pre><code>import { TeamsAdapter } from '@microsoft/teams-ai';\n</code></pre> <p>Replace the adapter definition with <code>TeamsAdapter</code> instead of <code>CloudAdapter</code> for Teams SSO.</p> <pre><code>const adapter = new TeamsAdapter(\n  {},\n  new ConfigurationServiceClientCredentialFactory({\n    MicrosoftAppId: config.botId,\n    MicrosoftAppPassword: config.botPassword,\n    MicrosoftAppType: 'MultiTenant',\n  })\n);\n\n</code></pre> <p>Comment out the definition for <code>botFrameworkAuthentication</code> which is not needed anymore.</p> <ul> <li>Changes to config.ts file is as follows: Add below properties to the constant <code>config</code>. Add a comma and after <code>process.env.INDEX_NAME</code> and append below snippet:</li> </ul> <pre><code>aadAppClientId: process.env.AAD_APP_CLIENT_ID,\naadAppClientSecret: process.env.AAD_APP_CLIENT_SECRET,\naadAppOauthAuthorityHost: process.env.AAD_APP_OAUTH_AUTHORITY_HOST,\naadAppTenantId: process.env.AAD_APP_TENANT_ID,\nbotDomain: process.env.BOT_DOMAIN,\naadAppOauthAuthority: process.env.AAD_APP_OAUTH_AUTHORITY,\n</code></pre> <ul> <li>Changes to app.ts file is as follows:</li> </ul> <p>We will be using the <code>TurnContext</code> module so include it in your import statement from the <code>botbuilder</code> library as shown below:</p> <pre>\nimport { CardFactory, MemoryStorage, MessageFactory,TurnContext } from \"botbuilder\";\n</pre> <p>We will be using the <code>TurnState</code> and <code>AuthError</code> modules so include it in your import statement from the <code>@microsoft/teams-ai</code> library as shown below:</p> <pre>\nImport { Application, ActionPlanner, OpenAIModel, PromptManager, AI, PredictedSayCommand, AuthError, TurnState } from \"@microsoft/teams-ai\";\n</pre> <p>Now to pass authentication setting to the Application definition, replace <code>const app</code> definition with below code snippet:</p> <pre><code>const app = new Application({\n  storage,\n  authentication: {settings: {\n    graph: {\n      scopes: ['User.Read'],\n      msalConfig: {\n        auth: {\n          clientId: config.aadAppClientId!,\n          clientSecret: config.aadAppClientSecret!,\n          authority: `${config.aadAppOauthAuthorityHost}/common`\n        }\n      },\n      signInLink: `https://${config.botDomain}/auth-start.html`,\n      endOnInvalidMessage: true\n    }\n  }},\n  ai: {\n    planner,\n    //feedback loop is enabled\n    enable_feedback_loop: true\n  },\n});\n</code></pre> <p>Teams AI library handles exchange of token between your custom engine agent and Microsoft Teams, so you can just call Microsoft Graph immediately upon receiving the token. Now let's add code to define and handle various authentication and messaging events using the Teams AI library. Paste below code after the app definition method:</p> <pre><code>interface ConversationState {\n  count: number;\n}\ntype ApplicationTurnState = TurnState&lt;ConversationState&gt;;\napp.authentication.get('graph').onUserSignInSuccess(async (context: TurnContext, state: ApplicationTurnState) =&gt; {\n  const token = state.temp.authTokens['graph'];\n  await context.sendActivity(`Hello ${await getUserDisplayName(token)}. You have successfully logged in to CareerGenie!`);     \n});\napp.authentication\n    .get('graph')\n    .onUserSignInFailure(async (context: TurnContext, _state: ApplicationTurnState, error: AuthError) =&gt; {\n        await context.sendActivity('Failed to login');\n        await context.sendActivity(`Error message: ${error.message}`);\n    });\n\n    // Listen for user to say '/reset' and then delete conversation state\napp.message('/reset', async (context: TurnContext, state: ApplicationTurnState) =&gt; {\n  state.deleteConversationState();\n  await context.sendActivity(`Ok I've deleted the current conversation state.`);\n});\n\napp.message('/signout', async (context: TurnContext, state: ApplicationTurnState) =&gt; {\n  await app.authentication.signOutUser(context, state);\n\n  // Echo back users request\n  await context.sendActivity(`You have signed out`);\n});\n\n</code></pre> <p>The above code called a function <code>getUserDisplayName()</code> after token is successfully received with which we can now call Microsoft Graph to get user information. So let's add the function definition. You will install the Graph SDK first. </p> <p>Run below script in the terminal to install the npm package:</p> <pre><code>npm install @microsoft/microsoft-graph-client @microsoft/microsoft-graph-types\n</code></pre> <p>Now, import module needed from the package in app.ts file.</p> <pre><code>import { Client } from \"@microsoft/microsoft-graph-client\";\n</code></pre> <p>Paste below code snippet after <code>app.message</code> method:</p> <pre><code>async function getUserDisplayName(token: string): Promise&lt;string | undefined&gt; {\n  let displayName: string | undefined;\n\n  const client = Client.init({\n    authProvider: (done) =&gt; {\n      done(null, token);\n    }\n  });\n\n  try {\n    const user = await client.api('/me').get();\n    displayName = user.displayName;\n  } catch (error) {\n    console.log(`Error calling Graph SDK in getUserDisplayName: ${error}`);\n  }\n\n  return displayName;\n}\n</code></pre> To make this app only work in single tenant, make below changes <ul> <li>Go to <code>aad.manifest.json</code> and update signInAudience node as <code>\"signInAudience\": \"AzureADMyOrg\"</code></li> <li>Got to <code>teamsapp.local.yml</code> and update signInAudience node for the aadApp\\create as <code>\"signInAudience: \"AzureADMyOrg\"</code></li> <li>Got to <code>src\\app\\app.ts</code> and update application definition's auth setting's authority as <code>authority: config.aadAppOauthAuthority</code></li> <li>Got to <code>src\\public\\auth-start.html</code> and set variable <code>authorizeEndpoint</code> to <code>https://login.microsoftonline.com/${tenantId}/oauth2/v2.0/authorize?${toQueryString(queryParams)}</code> </li> <li>Go to <code>src\\adapter.ts</code> and update the adapter definition <code>MicrosoftAppType: 'SingleTenant'</code> </li> </ul> <p></p>"},{"location":"pages/custom-engine/04-authentication/#exercise-4-run-the-application","title":"Exercise 4: Run the application","text":"<p>Now we are code complete for Teams SSO in Career Genie. Let's take it for a ride.</p>"},{"location":"pages/custom-engine/04-authentication/#step-1-app-installation-in-teams","title":"Step 1: App installation in Teams","text":"<p>Start debugging your app by selecting Run and Debug tab on Visual Studio Code and Debug in Teams (Edge) or Debug in Teams (Chrome). This will open Microsoft Teams in your browser. When your app details appear in Teams, select Add to start chatting with your app.</p> <p>Tip: Testing this exercise locally</p> <p>Make sure to test and debug this exercise on Teams locally, as some of the Teams AI library capabilities you've implemented in your app so far won't smoothly work in the Teams App Test Tool.</p> <p></p>"},{"location":"pages/custom-engine/04-authentication/#step-2-giving-consent","title":"Step 2: Giving consent","text":"<p>To start a conversation with the Career Genie, simply type a message. For example, you can begin by typing and sending 'Hi'.</p> <p>Tip: Check pop up settings in your browser</p> <p>Make sure <code>Pop up</code> is not blocked by browser for a smoother experience for below instructions.</p> <p>You will see a small dialog box for the additional permissions with \u2018Cancel\u2019 and \u2018Continue\u2019 buttons. This dialog is for logging in and giving your consent to the required permissions. Select Continue.</p> <p></p> <p>Known issues</p> <ul> <li>There is a delay for the consent dialog to show up in Teams chat. This has been identified as a platform issue and we are monitoring. Keep pinging 2-3 times.</li> </ul> <p>Since you're running locally with Developer Tunnels, you'll see a warning screen, select Continue. Users won't see this when your app is deployed.</p> <p></p> <p>You'll be redirected to Entra ID, where you'll be asked to consent to the app's permissions. (You were directed there by public/auth-start.html which gets displayed when it found you hadn't consented).</p> <p></p> <p>Tip: Consent on behalf of your organization</p> <p>If you're a Microsoft 365 administrator, you will also be given the option to \"Consent on behalf of your organization\" which will consent for every user in your tenant.</p> <p>Select Accept to consent to the permissions and run Career Genie.</p> <p>You will now get this message from the custom engine agent with your logged in name showing successful authentication.</p> <p></p> <p>You can start chatting with your custom engine agent.</p> <p></p> <p>CONGRATULATIONS!</p> <p>You have completed Lab B4 - Secure your custom engine agent using authentication!  If you want explore further, the source code of this lab is available in the Copilot Developer Camp repo.</p> <p>You can now proceed to Lab B5 - Add actions to handle complex tasks. Select Next.</p> <p></p>"},{"location":"pages/custom-engine/05-actions/","title":"B5 - Add actions to handle complex tasks","text":"<p>Do these labs if you want to build a Custom engine agent with custom AI model and orchestration using Azure OpenAI and Teams AI library</p> <ul> <li>B0 - Setup</li> <li>B1 - First custom engine agent</li> <li>B2 - Index your data in Azure AI Search</li> <li>B3 - Enhance the user experience</li> <li>B4 - Add single sign on authentication</li> <li>B5 - Add actions to handle complex tasks</li> </ul> Table of Contents <p>In this lab you will:</p> <ul> <li>Learn what actions are and how to handle complex tasks with them</li> <li>Integrate multi-prompt in your custom engine agent to handle actions</li> <li>Implement actions in your custom engine agent</li> <li>Utilize Microsoft Graph and actions together to automate workflows</li> </ul>"},{"location":"pages/custom-engine/05-actions/#introduction","title":"Introduction","text":"<p>It's time to add some actions for Career Genie to handle complex tasks and workflows! In this lab, you'll integrate a new prompt in Career Genie's logic that can handle lists of candidates. That basically means that when you are searching for candidates with Career Genie, you can also create lists for candidates and add their names in. Once you are done, you can also send these lists to HR for scheduling interviews. All these will be handled by actions you'll implement in Career Genie! Let's get started.</p> What are actions in Custom engine agents? <p>An action in an AI system is like a basic function or method in your code\u2014it's a specific task that the system can perform. Actions are the building blocks that the AI uses to accomplish various tasks based on the user\u2019s input. The AI system decides which action to execute depending on what the user asks for.</p> <p>For example, actions could include:</p> <ul> <li> <p>Creating a new list.</p> </li> <li> <p>Remove a list.</p> </li> <li> <p>Adding items to an existing list.</p> </li> <li> <p>Remove items from an existing list.</p> </li> </ul> <p>When a user interacts with the AI system, the system interprets the prompt and selects the appropriate actions to carry out. It\u2019s like having a toolbox of functions, and the AI picks the right tool for the job based on the user\u2019s needs.</p>"},{"location":"pages/custom-engine/05-actions/#exercise-1-create-a-new-prompt-with-actions","title":"Exercise 1: Create a new prompt with actions","text":"<p>In this exercise, you'll create a new prompt in \"prompts\" folder to handle actions.</p>"},{"location":"pages/custom-engine/05-actions/#step-1-create-a-monologue-prompt","title":"Step 1: Create a \"monologue\" prompt","text":"<p>In your project go to <code>src/prompts/</code> and add a new folder with a name monologue. In <code>src/prompts/monologue/</code> folder, create a new file with a name config.json and copy the following code snippet in the file:</p> <pre><code>{\n  \"schema\": 1.1,\n  \"description\": \"A bot that can chat with users\",\n  \"type\": \"completion\",\n  \"completion\": {\n    \"completion_type\": \"chat\",\n    \"include_history\": true,\n    \"include_input\": true,\n    \"max_input_tokens\": 2800,\n    \"max_tokens\": 1000,\n    \"temperature\": 0.9,\n    \"top_p\": 0.0,\n    \"presence_penalty\": 0.6,\n    \"frequency_penalty\": 0.0\n  },\n  \"augmentation\": {\n      \"augmentation_type\": \"monologue\"\n  }\n}\n</code></pre> <p>Brief intro about <code>augmentation</code> in config.json</p> <p>Augmentations help simplify prompt engineering by automatically adding specific instructions to your prompts. With augmentations, you can configure whether you want the AI to handle multi-step tasks (sequence) or think through its actions step by step (monologue).</p> <p>In <code>src/prompts/monologue/</code> folder, create a new file with a name skprompt.txt and copy the following text in the file:</p> <pre><code>You are a career specialist named \"Career Genie\" that helps Human Resources team who can manage lists of Candidates. \nYou are friendly and professional. You like using emojis where appropriate.\nAlways share the lists in bullet points.\n\nrules:\n- only create lists the user has explicitly asked to create.\n- only add Candidates to a list that the user has asked to have added.\n- if multiple lists are being manipulated, call a separate action for each list.\n- if Candidates are being added and removed from a list, call a separate action for each operation.\n- if user asks for a summary, share all the lists and candidates. \n- only send an email to HR if user has explicitly asked to send.\n\nCurrent lists:\n{{$conversation.lists}}\n</code></pre> <p>In <code>src/prompts/monologue/</code> folder, create a new file with a name actions.json and copy the following code snippet in the file:</p> <pre><code>[\n    {\n        \"name\": \"createList\",\n        \"description\": \"Creates a new list with an optional set of initial Candidates\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"list\": {\n                    \"type\": \"string\",\n                    \"description\": \"The name of the list to create\"\n                },\n                \"Candidates\": {\n                    \"type\": \"array\",\n                    \"description\": \"The Candidates to add to the list\",\n                    \"Candidates\": {\n                        \"type\": \"string\"\n                    }\n                }\n            },\n            \"required\": [\n                \"list\"\n            ]\n        }\n    },\n    {\n        \"name\": \"deleteList\",\n        \"description\": \"Deletes a list\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"list\": {\n                    \"type\": \"string\",\n                    \"description\": \"The name of the list to delete\"\n                }\n            },\n            \"required\": [\n                \"list\"\n            ]\n        }\n    },\n    {\n        \"name\": \"addCandidates\",\n        \"description\": \"Adds one or more Candidates to a list\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"list\": {\n                    \"type\": \"string\",\n                    \"description\": \"The name of the list to add the item to\"\n                },\n                \"Candidates\": {\n                    \"type\": \"array\",\n                    \"description\": \"The Candidates to add to the list\",\n                    \"Candidates\": {\n                        \"type\": \"string\"\n                    }\n                }\n            },\n            \"required\": [\n                \"list\",\n                \"Candidates\"\n            ]\n        }\n    },\n    {\n        \"name\": \"removeCandidates\",\n        \"description\": \"Removes one or more Candidates from a list\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"list\": {\n                    \"type\": \"string\",\n                    \"description\": \"The name of the list to remove the item from\"\n                },\n                \"Candidates\": {\n                    \"type\": \"array\",\n                    \"description\": \"The Candidates to remove from the list\",\n                    \"Candidates\": {\n                        \"type\": \"string\"\n                    }\n                }\n            },\n            \"required\": [\n                \"list\",\n                \"Candidates\"\n            ]\n        }\n    }\n]\n</code></pre> <p></p>"},{"location":"pages/custom-engine/05-actions/#exercise-2-implement-a-logic-in-the-planner-to-choose-between-prompts","title":"Exercise 2: Implement a logic in the planner to choose between prompts","text":"<p>In this exercise, you'll write a function that checks the user prompt and decides between \"chat\" or \"monologue\" prompts.</p>"},{"location":"pages/custom-engine/05-actions/#step-1-create-a-function-for-defaultprompt-in-the-planner","title":"Step 1: Create a function for <code>defaultPrompt</code> in the planner","text":"<p>In your project, go to <code>src/app/app.ts</code> file, and add the following function in your project:</p> <pre><code>async function choosePrompt(context){\n  if (context.activity.text.includes('list')){\n    const template = await prompts.getPrompt('monologue');\n    return template;\n  }\n  else {\n    const template = await prompts.getPrompt('chat');\n    const skprompt = fs.readFileSync(path.join(__dirname, '..', 'prompts', 'chat', 'skprompt.txt'));\n\n    const dataSources = (template.config.completion as any)['data_sources'];\n\n    dataSources.forEach((dataSource: any) =&gt; {\n      if (dataSource.type === 'azure_search') {\n        dataSource.parameters.authentication.key = config.azureSearchKey;\n        dataSource.parameters.endpoint = config.azureSearchEndpoint;\n        dataSource.parameters.indexName = config.indexName;\n        dataSource.parameters.embedding_dependency.deployment_name =\n          config.azureOpenAIEmbeddingDeploymentName;\n        dataSource.parameters.role_information = `${skprompt.toString('utf-8')}`;\n      }\n    });\n\n    return template;\n  }\n}\n</code></pre> <p>Review <code>choosePrompt</code> function</p> <p>Recognize that the choosePrompt function checks if user prompt includes \"list\". If yes, then it returns monologue prompt, if no, then it returns the chat that is currently our default prompt.</p> <p>In <code>src/app/app.ts</code> file, find the <code>planner</code> and remove the code assigned to the defaultPrompt. Then, define <code>choosePrompt</code> function as the defaultPrompt. The final version of the planner will look like below:</p> <pre><code>const planner = new ActionPlanner({\n  model,\n  prompts,\n  defaultPrompt: choosePrompt,\n});\n</code></pre> <p></p>"},{"location":"pages/custom-engine/05-actions/#exercise-3-implement-actions-in-the-app","title":"Exercise 3: Implement actions in the app","text":"<p>In this exercise, you'll create functions for your actions and register the action handlers in the app.</p>"},{"location":"pages/custom-engine/05-actions/#step-1-update-conversationstate-and-define-functions-for-each-action","title":"Step 1: Update <code>ConversationState</code> and define functions for each action","text":"<p>In <code>src/app/app.ts</code>, update the <code>@microsoft/teams-ai</code> with DefaultConversationState. The final version of the import will look as below:</p> <pre><code>import { AuthError, ActionPlanner, OpenAIModel, PromptManager, AI, PredictedSayCommand, Application, TurnState, DefaultConversationState } from \"@microsoft/teams-ai\";\n</code></pre> <p>In <code>src/app/app.ts</code>, find the ConversationState and ApplicationTurnState, replace them with the following code:</p> <pre><code>import { TurnState, DefaultConversationState } from \"@microsoft/teams-ai\";\n\n// Strongly type the applications turn state\ninterface ConversationState extends DefaultConversationState {\n  lists: Record&lt;string, string[]&gt;;\n}\nexport type ApplicationTurnState = TurnState&lt;ConversationState&gt;;\n</code></pre> <p>In <code>src/app/</code>, create another file with a name actions.ts and add the following source code to define functions for the actions:</p> <pre><code>import { ApplicationTurnState } from './app';\n\nfunction getCandidates(state: ApplicationTurnState, list: string): string[] {\n    ensureListExists(state, list);\n    return state.conversation.lists[list];\n}\n\nfunction setCandidates(state: ApplicationTurnState, list: string, Candidates: string[]): void {\nensureListExists(state, list);\nstate.conversation.lists[list] = Candidates ?? [];\n}\n\nfunction ensureListExists(state: ApplicationTurnState, listName: string): void {\nif (typeof state.conversation.lists != 'object') {\n    state.conversation.lists = {};\n}\n\nif (!Object.prototype.hasOwnProperty.call(state.conversation.lists, listName)) {\n    state.conversation.lists[listName] = [];\n}\n}\n\nfunction deleteList(state: ApplicationTurnState, listName: string): void {\nif (\n    typeof state.conversation.lists == 'object' &amp;&amp;\n    Object.prototype.hasOwnProperty.call(state.conversation.lists, listName)\n) {\n    delete state.conversation.lists[listName];\n}\n}\n\nexport { getCandidates, setCandidates, ensureListExists, deleteList };\n</code></pre> <p></p>"},{"location":"pages/custom-engine/05-actions/#step-2-register-action-handlers-in-the-app","title":"Step 2: Register action handlers in the app","text":"<p>In<code>src/app/app.ts</code>, add the following action imports on top of the file:</p> <pre><code>import { ensureListExists, getCandidates, setCandidates, deleteList } from \"./actions\";\n</code></pre> <p>Then add the following code snippet in the <code>src/app/app.ts</code> to register action handlers in the AI System:</p> <pre><code>// Register action handlers\ninterface ListOnly {\n  list: string;\n}\n\ninterface ListAndCandidates extends ListOnly {\n  Candidates?: string[];\n}\n\napp.ai.action('createList', async (context: TurnContext, state: ApplicationTurnState, parameters: ListAndCandidates) =&gt; {\n  ensureListExists(state, parameters.list);\n  if (Array.isArray(parameters.Candidates) &amp;&amp; parameters.Candidates.length &gt; 0) {\n      await app.ai.doAction(context, state, 'addCandidates', parameters);\n      return `List created and Candidates added. Summarize your action.`;\n  } else {\n      return `List created. Summarize your action.`;\n  }\n});\n\napp.ai.action('deleteList', async (context: TurnContext, state: ApplicationTurnState, parameters: ListOnly) =&gt; {\n  deleteList(state, parameters.list);\n  return `list deleted. Summarize your action.`;\n});\n\napp.ai.action('addCandidates', async (context: TurnContext, state: ApplicationTurnState, parameters: ListAndCandidates) =&gt; {\n  const Candidates = getCandidates(state, parameters.list);\n  Candidates.push(...(parameters.Candidates ?? []));\n  setCandidates(state, parameters.list, Candidates);\n  return `Candidates added. Summarize your action.`;\n});\n\napp.ai.action('removeCandidates', async (context: TurnContext, state: ApplicationTurnState, parameters: ListAndCandidates) =&gt; {\n  const Candidates = getCandidates(state, parameters.list);\n  (parameters.Candidates ?? []).forEach((candidate: string) =&gt; {\n      const index = Candidates.indexOf(candidate);\n      if (index &gt;= 0) {\n          Candidates.splice(index, 1);\n      }\n  });\n  setCandidates(state, parameters.list, Candidates);\n  return `Candidates removed. Summarize your action.`;\n});\n\n</code></pre> <p></p>"},{"location":"pages/custom-engine/05-actions/#step-3-test-your-app-with-the-new-actions","title":"Step 3: Test your app with the new actions","text":"<p>Let's test Career Genie with the new actions. Start debugging your app by selecting Run and Debug tab on Visual Studio Code and Debug in Teams (Edge) or Debug in Teams (Chrome). Microsoft Teams will pop up on your browser. Once your app details show up on Teams, select Add and start chatting with your app.</p> <p>Tip: Testing this exercise locally</p> <p>Make sure to test and debug this exercise on Teams locally, as some of the Teams AI library capabilities you've implemented in your app so far won't smoothly work in the Teams App Test Tool.</p> <p>To understand how to flow works, you may ask the following questions in order:</p> <ul> <li>Hello</li> <li>Can you suggest candidates who have experience in .NET?</li> <li>Great, add Isaac Talbot in the .NET Developer Candidates list</li> <li>Add Anthony Ivanov in the same list with Isaac</li> <li>Can you summarize my lists</li> <li>Suggest candidates who have experience in Python and are able to speak Spanish</li> <li>Nice! Add Sara Folgueroles in the Python Developer Candidates (Spanish speaking) list</li> <li>Can you suggest candidates who have 10+ years of experience</li> <li>Ok, remove Anthony from the .NET Developer Candidates list</li> <li>Add Anthony Ivanov in the Talent list</li> <li>Summarize my lists</li> </ul> <p></p> <p></p>"},{"location":"pages/custom-engine/05-actions/#exercise-4-utilize-actions-together-with-the-microsoft-graph-to-automate-workflows","title":"Exercise 4: Utilize actions together with the Microsoft Graph to automate workflows","text":"<p>In this exercise, you'll implement a new action that utilizes Microsoft Graph to send the candidates lists to the HR for scheduling interviews.</p>"},{"location":"pages/custom-engine/05-actions/#step-1-define-a-new-action-in-your-prompt-for-sending-emails","title":"Step 1: Define a new action in your prompt for sending emails","text":"<p>In your project, go to <code>src/prompts/monologue/actions.json</code> and add the following action:</p> <pre><code>,\n{\n    \"name\": \"sendLists\",\n    \"description\": \"Send list of Candidates to Human Resources, aka HR for scheduling interviews\",\n    \"parameters\": {\n        \"type\": \"object\",\n        \"properties\": {\n            \"list\": {\n                \"type\": \"string\",\n                \"description\": \"The name of the list to send Human Resources, aka HR for scheduling interviews\"\n            },\n            \"Candidates\": {\n                \"type\": \"array\",\n                \"description\": \"The Candidates in the list to send Human Resources, aka HR for scheduling interviews\",\n                \"Candidates\": {\n                    \"type\": \"string\"\n                }\n            }\n        },\n        \"required\": [\n            \"list\",\n            \"Candidates\"\n        ]\n    }\n}\n</code></pre> <p></p>"},{"location":"pages/custom-engine/05-actions/#step-2-create-a-new-function-for-the-new-sendlists-action","title":"Step 2: Create a new function for the new <code>sendLists</code> action","text":"<p>In your project, go to <code>src/app/app.ts</code>, locate the <code>getUserDisplayName</code> and add export in front of the function. The final version of the function will look like below:</p> <pre><code>export async function getUserDisplayName {\n...\n...\n...\n}\n\n</code></pre> <p>Locate <code>app</code> in the <code>src/app/app.ts</code> and update the scope with 'Mail.Send'. The final version of the app will look like below:</p> <pre><code>const app = new Application({\n  storage,\n  authentication: {settings: {\n    graph: {\n      scopes: ['User.Read', 'Mail.Send'],\n        ...\n        ...\n    }\n  }}});\n</code></pre> <p>Go to <code>env/.env.local.user</code> and add the following HR email as an environment variable:</p> <pre><code>HR_EMAIL=&lt;YOUR-EMAIL-ADDRESS&gt;\n</code></pre> <p><code>HR_EMAIL</code> details to test this lab</p> <p>Please enter your own account email address in <code>HR_EMAIL</code> to test this lab. In an ideal scenario, you'll use an email address of a Human Resources Team to send interview scheduling emails. Note that this lab is only for prototyping purposes and shouldn't be used in production.</p> <p>Go to <code>teamsapp.local.yml</code> and add the following line under the <code>file/createOrUpdateEnvironmentFile</code>, envs list:</p> <pre><code>HR_EMAIL: ${{HR_EMAIL}}\n</code></pre> <p>Go to <code>src/config.ts</code> and add the following line in the config:</p> <pre><code>HR_EMAIL: process.env.HR_EMAIL\n</code></pre> <p>Go to <code>src/app/actions.ts</code> and update the imports on top of the code as below:</p> <pre><code>import { getUserDisplayName, ApplicationTurnState } from './app';\nimport { Client } from \"@microsoft/microsoft-graph-client\";\nimport config from '../config';\n</code></pre> <p>Then, add the following functions in the <code>actions.ts</code>:</p> <pre><code>async function sendLists(state: ApplicationTurnState, token): Promise&lt;string&gt; {\n    const email = await createEmailContent(state.conversation.lists, token);\n    try {\n        const client = Client.init({\n            authProvider: (done) =&gt; {\n                done(null, token);\n            }\n        });\n        const sendEmail = await client.api('/me/sendMail').post(JSON.stringify(email));\n        if (sendEmail.ok) {\n            return email.message.body.content;\n        }\n        else {\n            console.log(`Error ${sendEmail.status} calling Graph in sendToHR: ${sendEmail.statusText}`);\n            return 'Error sending email';\n        }\n    } catch (error) {\n        console.error('Error in sendLists:', error);\n        throw error;\n    }\n}\n\nasync function createEmailContent(lists, token) {\nlet emailContent = '';\nfor (const listName in lists) {\n    if (lists.hasOwnProperty(listName)) {\n    emailContent += `${listName}:\\n`;\n    lists[listName].forEach(candidate =&gt; {\n        emailContent += `  \u2022 ${candidate}\\n`;\n    });\n    emailContent += '\\n'; // Add an extra line between different lists\n    }\n}\n\nconst profileName = await getUserDisplayName(token);\n\nconst email ={\n    \"message\": {\n    \"subject\": \"Request to Schedule Interviews with Shortlisted Candidates\",\n    \"body\": {\n        \"contentType\": \"Text\",\n        \"content\": `Hello HR Team, \\nI hope this email finds you well. \\n\\nCould you please assist in scheduling 1:1 interviews with the following shortlisted candidates? \\n\\n${emailContent} Please arrange suitable times and send out the calendar invites accordingly. \\n\\n Best Regards, \\n ${profileName}`\n    },\n    \"toRecipients\": [\n        {\n        \"emailAddress\": {\n            \"address\": `${config.HR_EMAIL}`\n        }\n        }\n    ]\n    },\n    \"saveToSentCandidates\": \"true\"\n};\nreturn await email;\n}\n</code></pre> <p>Finally in <code>src/app/actions.ts</code>m add sendLists in the<code>actions.ts</code> exports. The final version of the exports will look like below:</p> <pre><code>export { getCandidates, setCandidates, ensureListExists, deleteList, sendLists };\n</code></pre>"},{"location":"pages/custom-engine/05-actions/#step-3-register-sendlists-action-handler","title":"Step 3: Register <code>sendLists</code> action handler","text":"<p>Go to <code>src/app/app.ts</code> and update the <code>./actions</code> import with the sendLists function. The final version of the import will look as below:</p> <pre><code>import { ensureListExists, getCandidates, setCandidates, deleteList, sendLists } from \"./actions\";\n</code></pre> <p>Then, add the following code snippet to register <code>sendLists</code> action in the AI System:</p> <pre><code>app.ai.action('sendLists', async (context: TurnContext, state: ApplicationTurnState, parameters: ListAndCandidates) =&gt; {\n  await sendLists(state, state.temp.authTokens['graph']);\n  return `Email sent to HR. Summarize your action.`;\n});\n</code></pre> <p></p>"},{"location":"pages/custom-engine/05-actions/#step-4-update-your-entra-id-app-registration","title":"Step 4: Update your Entra ID app registration","text":"<p>Update the script for your Entra ID app for new scope <code>Mail.Send</code>. Go to file aad.manifest.json and inside the node <code>requiredResourceAccess</code> find <code>\"resourceAppId\": \"Microsoft Graph\",</code>. In the <code>resourceAccess</code> array add below scope after adding a comma.</p> <pre><code> {\n    \"id\": \"Mail.Send\",\n    \"type\": \"Scope\"\n}\n</code></pre> <p></p>"},{"location":"pages/custom-engine/05-actions/#step-5-test-your-app-and-the-new-sendlists-action","title":"Step 5: Test your app and the new <code>sendLists</code> action","text":"<p>Let's test Career Genie with the new sendLists actions. Start debugging your app by selecting Run and Debug tab on Visual Studio Code and Debug in Teams (Edge) or Debug in Teams (Chrome). Microsoft Teams will pop up on your browser. Once your app details show up on Teams, select Add and start chatting with your app.</p> <p>Tip: Testing this exercise locally</p> <p>Make sure to test and debug this exercise on Teams locally, as some of the Teams AI library capabilities you've implemented in your app so far won't smoothly work in the Teams App Test Tool.</p> <p>To start a conversation with Career Genie, simply type a message. For example, you can begin with 'Hi'.</p> <p>Tip: Check pop up settings in your browser</p> <p>Make sure <code>Pop up</code> is not blocked by browser for a smoother experience for below instructions.</p> <p>You will see a small dialog box for the additional permissions with \u2018Cancel\u2019 and \u2018Continue\u2019 buttons. This dialog is for logging in and giving your consent to the required permissions. Select Continue.</p> <p></p> <p>Since you're running locally with Developer Tunnels, you'll see a warning screen, select Continue. Users won't see this when your app is deployed. You'll be redirected to login and consent to the app's permissions.</p> <p>Tip: Consent on behalf of your organization</p> <p>If you're a Microsoft 365 administrator, you will also be given the option to \"Consent on behalf of your organization\" which will consent for every user in your tenant.</p> <p>Select Accept to consent to the permissions.</p> <p>You will now get this message from the Career Genie with your logged in name showing successful authentication. Now, you can start testing the new action in Career Genie!</p> <p>To understand how to flow works, you may ask the following questions in order:</p> <ul> <li>Hello</li> <li>Can you suggest candidates who have experience in .NET?</li> <li>Great, add Isaac Talbot in the .NET Developer Candidates list</li> <li>Add Anthony Ivanov in the same list with Isaac</li> <li>Can you summarize my lists</li> <li>Suggest candidates who have experience in Python and are able to speak Spanish</li> <li>Nice! Add Sara Folgueroles in the Python Developer Candidates (Spanish speaking) list</li> <li>Can you suggest candidates who have 10+ years of experience</li> <li>Ok, remove Anthony from the .NET Developer Candidates list</li> <li>Add Anthony Ivanov in the Talent list</li> <li>Summarize my lists</li> <li>Add Pedro Armijo in the same list with Sara</li> <li>Summarize my lists</li> <li>Send my lists to HR</li> </ul> <p>Check your mailbox</p> <p>After the last step, check your mailbox to see if you receive any email for the lists of candidates.</p> <p></p> <p></p> <p>CONGRATULATIONS!</p> <p>You have completed B5 - Add actions to handle complex tasks!  If you want explore further, the source code of this lab is available in the Copilot Developer Camp repo.</p> <p>This is the end of the Build your own agent path! Did you enjoy building Career Genie? Let us know about your experience and feedback. \ud83d\udc9c</p> <p></p>"},{"location":"pages/extend-m365-copilot/","title":"Welcome to Copilot Developer Camp's Extend Path: Extend Copilot for Microsoft 365","text":"<p>During Extend Path of the Copilot Developer Camp, learners will construct a customized assistant tailored for a Human Resource department. The process will begin with the creation of a basic declarative Copilot and progress towards developing fully skilled assistant. This advanced assistant will be equipped with security features, including authentication mechanism linked to the Microsoft 365 tenant to get organizational data.</p> <p>Do these labs if you want to build a Declarative agent where Microsoft 365 provides the AI model and orchestration</p> <ul> <li>E0 - Setup</li> <li>E1 - First declarative agent</li> <li>E2 - Build an API</li> <li>E3 - Add a declarative agent and API plugin</li> <li>E4 - Enhance the API and plugin</li> <li>E5 - Add adaptive cards</li> <li>E6 - Add Entra ID authentication</li> <li>Bonus - Add Graph Connector</li> </ul>"},{"location":"pages/extend-m365-copilot/#start-here-with-lab-e0-where-youll-set-up-development-your-environment","title":"Start here with Lab E0, where you'll set up development your environment.","text":""},{"location":"pages/extend-m365-copilot/00-prerequisites/","title":"Lab E0 - Setup","text":"<p>Do these labs if you want to build a Declarative agent where Microsoft 365 provides the AI model and orchestration</p> <ul> <li>E0 - Setup</li> <li>E1 - First declarative agent</li> <li>E2 - Build an API</li> <li>E3 - Add a declarative agent and API plugin</li> <li>E4 - Enhance the API and plugin</li> <li>E5 - Add adaptive cards</li> <li>E6 - Add Entra ID authentication</li> <li>Bonus - Add Graph Connector</li> </ul> Table of Contents <p>In this lab, you will set up the development environment to build, test, and deploy the Copilot agents, that will help you achieve tailor made AI assitance using Microsoft 365 Copilot. </p> <p>Set up your development environment for Microsoft 365 Copilot</p> <p>This lab currently assumes you already have a tenant to setup. You can reference off to the page here that explains the current way you can get a tenant.</p> <p>In this lab you will learn:</p> <ul> <li>How to configure your Microsoft 365 tenant's Teams upload policy for lab use</li> <li>How to install and configure Teams toolkit for Visual Studio Code</li> </ul> <p>Disclaimer</p> <p>These samples and labs are intended for instructive and demonstration purposes and are not intended for use in production. Do not put them into production without upgrading them to production quality.</p>"},{"location":"pages/extend-m365-copilot/00-prerequisites/#exercise-1-configure-teams-upload-policy","title":"Exercise 1 : Configure Teams upload policy","text":""},{"location":"pages/extend-m365-copilot/00-prerequisites/#step-1-enable-teams-custom-application-uploads","title":"Step 1: Enable Teams custom application uploads","text":"<p>By default, end users can't upload applications directly; instead a Teams Administrator needs to upload them into the enterprise app catalog. In this step you will ensure your tenant is set up for direct uploads by Teams Toolkit.</p> <p>1\ufe0f\u20e3 Navigate to https://admin.microsoft.com/, which is the Microsoft 365 Admin Center.</p> <p>2\ufe0f\u20e3 In the left panel of the admin center, select Show all to open up the entire navigation. When the panel opens, select Teams to open the Microsoft Teams admin center.</p> <p>3\ufe0f\u20e3 In the left of the Microsoft Teams admin center, open the Teams apps accordion. Select Setup Policies, you will see a list of App setup policies. Then, select the Global (Org-wide default) policy.</p> <p>4\ufe0f\u20e3 Ensure the first switch, Upload custom apps is turned On.</p> <p>5\ufe0f\u20e3 Be sure to scroll down and select the Save button to persist your change.</p> <p>The change can take up to 24 hours to take effect, but usually it's much faster.</p> <p></p>"},{"location":"pages/extend-m365-copilot/00-prerequisites/#exercise-2-install-teams-toolkit-and-prerequisites","title":"Exercise 2: Install Teams Toolkit and prerequisites","text":"<p>You can complete these labs on a Windows, Mac, or Linux machine, but you do need the ability to install the prerequisites. If you are not permitted to install applications on your computer, you'll need to find another machine (or virtual machine) to use throughout the workshop.</p>"},{"location":"pages/extend-m365-copilot/00-prerequisites/#step-1-install-visual-studio-code","title":"Step 1: Install Visual Studio Code","text":"<p>It should be no surprise that Teams Toolkit for Visual Studio Code requires Visual Studio Code! You can download it here: Visual Studio Code.</p> <p></p>"},{"location":"pages/extend-m365-copilot/00-prerequisites/#step-2-install-nodejs","title":"Step 2: Install NodeJS","text":"<p>NodeJS is a program that allows you to run JavaScript on your computer; it uses the open source \"V8\" engine, which is used in popular web browsers such as Microsoft Edge and Google Chrome. You will need NodeJS to run the web server code used throughout this workshop.</p> <p>Browse to https://nodejs.org/en/download/ and install version 18 or 16 for your operating system. This lab has been tested using NodeJS version 18.16.0. If you already have another version of NodeJS installed, you may want to set up the Node Version Manager (or this variation for Microsoft Windows), which allows you to easily switch Node versions on the same computer.</p> <p></p>"},{"location":"pages/extend-m365-copilot/00-prerequisites/#step-3-install-teams-toolkit","title":"Step 3: Install Teams Toolkit","text":"<p>These labs are based on Teams Toolkit version 5.0. Follow the steps as shown in the screen shot below.</p> <p>1\ufe0f\u20e3 Open Visual Studio Code and click on the Extensions toolbar button</p> <p>2\ufe0f\u20e3 Search for \"Teams\" and locate Teams Toolkit</p> <p>3\ufe0f\u20e3 Click Install</p> <p>If you have Teams Toolkit installed but hidden</p> <p>If you previously installed Teams Toolkit, and then hid it on the Visual Studio sidebar, you might wonder why you can't see it. Right-click on the left sidebar and check off Teams Toolkit to bring it back into view.</p> <p></p> <p>CONGRATULATIONS!</p> <p>Now you are all set to create your first extensibility feature for Copilot for Microsoft 365. Proceed to create a Declarative Agent in the next lab. </p> <p></p>"},{"location":"pages/extend-m365-copilot/01-declarative-copilot/","title":"Lab E1 - First declarative agent","text":"<p>Do these labs if you want to build a Declarative agent where Microsoft 365 provides the AI model and orchestration</p> <ul> <li>E0 - Setup</li> <li>E1 - First declarative agent</li> <li>E2 - Build an API</li> <li>E3 - Add a declarative agent and API plugin</li> <li>E4 - Enhance the API and plugin</li> <li>E5 - Add adaptive cards</li> <li>E6 - Add Entra ID authentication</li> <li>Bonus - Add Graph Connector</li> </ul> Table of Contents <p>In this lab, you'll build a simple declarative agent using Teams Toolkit for Visual Studio Code. Your agent is designed to give you a fun and educational break from work by helping you explore cities across the globe. It presents abstract clues for you to guess a city, with fewer points awarded the more clues you use. At the end, your final score will be revealed.</p> <p>In this lab you will learn:</p> <ul> <li>What is a declarative agent for Microsoft 365 Copilot</li> <li>Create a declarative agent using Teams Toolkit template</li> <li>Customise the agent to create the geo locator game using instructions </li> <li>Learn how to run and test your app </li> <li>For bonus exercise, you will need a SharePoint teams site</li> </ul>"},{"location":"pages/extend-m365-copilot/01-declarative-copilot/#introduction","title":"Introduction","text":"<p>Declarative agents leverage the same scalable infrastructure and platform of Microsoft 365 Copilot, tailored specifically to meet focus on a special area of your needs. They function as subject matter experts in a specific area or business need, allowing you to use the same interface as a standard Microsoft 365 Copilot chat while ensuring they focus exclusively on the specific task at hand. </p> <p>Welcome on board to building your own declarative agent \u263a\ufe0f! Let's dive in and make your Copilot work magic!</p> <p>In this lab you will start out building a declarative agent using Teams Toolkit with a default template used in the tool. This is to help you get started with something. Next, you will modify your agent to be focused on a geo location game. </p> <p>The goal of your AI is to provide a fun break from work while helping you learn about different cities around the world. It offers abstract clues for you to identify a city. The more clues you need, the fewer points you earn. At the end of the game, it will reveal your final score.</p> <p></p> <p>As a bonus you will also give your agent some files to refer to a secret diary \ud83d\udd75\ud83c\udffd and a map \ud83d\uddfa\ufe0f to give more challenges to the player. </p> <p>So let's begin \ud83d\udcaa\ud83c\udffc</p>"},{"location":"pages/extend-m365-copilot/01-declarative-copilot/#anatomy-of-a-declarative-agent","title":"Anatomy of a Declarative agent","text":"<p>You will see as we develop more and more extensions to Copilot,  that in the end what you will build is collection of few files in a zip file which we will refer to as an <code>app package</code> that you will  then install and use. So it's important you have a basic understanding of what the app package consists of. The app package of a declarative agent is similar to a Teams app if you have built one before with additonal elements. See the table to see all the core elements. You will also see that the app deployment process is very similar to deploying a teams app. </p> Element Description Name of file App manifest Describes app configuration, capabilities, required resources, and important attributes. manifest.json App icons Requires a color (192x192) and outline (32x32) icon for your declarative agent. icon.png, color.png Declarative agent manifest Describes agent configuration, instructions, required fields, capabilities, conversation starters, and actions. declarativeAgent.json <p>Note</p> <p>You can add reference data form SharePoint, OneDrive, Websearch etc and add extension capabilities to a declarative agent like CodeInterpreter support, GraphicArt skill,  plugins and connectors. You will learn how to add a plugin in the upcoming labs in this path. </p>"},{"location":"pages/extend-m365-copilot/01-declarative-copilot/#capabilities-of-a-declarative-agent","title":"Capabilities of a Declarative agent","text":"<p>You can enhance the agent's focus on context and data by not only adding instructions but also specifying the knowledge base it should access. They are called capabilities and there are five types of capabilities supported.</p> <ul> <li>Microsoft Graph Connectors - Pass connections of Graph connectors into the agent, allowing the agent to access and utilize the connector's knowledge.</li> <li>OneDrive and SharePoint - Provides URLs of files and sites to agent, for it to gain access to those contents.</li> <li>Web search - Enables or disables web content as part of the agent's knowledge base.</li> <li>Code interpreter - Enables the capabilities for better solve the Math problem and leverage Python code to do the complex data analysis or generate chart if needed.</li> <li>GraphicArt - Enable the agent to support image or video generation by using DALL-e capability.</li> </ul> <p></p> <p>OnDrive and SharePoint</p> <p>URLs should be full path to SharePoint items (site, document library, folder, or file). You can use the \"Copy direct link\" option in SharePoint to get the full path of files and folders. To achieve this, right-click on the file or folder and select Details. Navigate to Path and click on the copy icon. Not specifying the URLs, the entire corpus of OneDrive and SharePoint content available to the logged in user will be used by the agent.</p> <p>Microsoft Graph Connector</p> <p>Not specifying the connections, the entire corpus of Graph Connectors content available to the logged in user will be used by the agent.</p> <p>Web search</p> <p>Not specifying the sites, the agent is allowed to search all the sites. You can specify up to four sites with no more than 2 path segments and no querystring parameters. </p>"},{"location":"pages/extend-m365-copilot/01-declarative-copilot/#exercise-1-scaffold-a-declarative-agent-from-template","title":"Exercise 1: Scaffold a declarative agent from template","text":"<p>You can use just any editor to create a declarative agent if you know the structure of the files in the app package mentioned above. But things are easier if you use a tool like Teams Toolkit to not only create these files for you but also help you deploy and publish your app.  So to keep things as simple as possible you will use Teams Toolkit.</p>"},{"location":"pages/extend-m365-copilot/01-declarative-copilot/#step-1-install-teams-toolkit","title":"Step 1: Install Teams Toolkit","text":"<ul> <li>Go to extensions tab of your Visual Studio Code and type team as in step 1\ufe0f\u20e3 in the image below.</li> <li>Select Teams Toolkit as step 2\ufe0f\u20e3. </li> </ul>"},{"location":"pages/extend-m365-copilot/01-declarative-copilot/#step-2-use-teams-toolkit-to-create-a-declarative-agent-app","title":"Step 2: Use Teams Toolkit to create a declarative agent app","text":"<p>Go to the Teams Toolkit extension in your Visual Studio Code editor and select Create a New App</p> <p></p> <p>A panel opens up where you need to select Copilot Agent from the list of project types.</p> <p></p> <p>Next, you will be asked to choose the app feature of Copilot Agent. Choose <code>declarative agent</code> and select Enter. </p> <p></p> <p>Next, you will be asked to choose want to create a basic declarative agent or one with an API plugin.  Choose the No Plugin option.</p> <p></p> <p>Why not create one with API plugin here? </p> <p>You will build API plugins in the next lab and you will also learn how to integrate an API plugin with a declarative agent in the following one in this same path. Here we are just going to create a declarative agent. Baby steps!</p> <p>Next, type in the directory where the project folder has to be created.</p> <p></p> <p>Next, give it an application name <code>Geo Locator Game</code> and select Enter. </p> <p></p> <p>The project will be created in a few seconds in the folder you mentioned and will open up in a new project window of Visual Studio Code. This is your working folder.</p> <p></p> <p>Well done! You have successfully set up the base declarative agent! Now, proceed to examine the files contained within to be able to customise it to make the geo locator game app. </p> <p></p>"},{"location":"pages/extend-m365-copilot/01-declarative-copilot/#step-3-set-up-accounts-in-teams-toolkit","title":"Step 3: Set up accounts in Teams Toolkit","text":"<p>Now select the Teams Toolkit icon in the left 1\ufe0f\u20e3 . Under \"Accounts\" click \"Sign in to Microsoft 365\" 2\ufe0f\u20e3 and log in with your own Microsoft 365 account.</p> <p></p> <p>A browser window will pop up and offer to log into Microsoft 365. When it says \"You are signed in now and close this page\", please do so.</p> <p>Now verify that the \"Custom App Upload Enabled\" checker has a green checkmark. If it doesn't, that means that your user account doesn't have permission to upload Teams applications. Follow steps in Exercise 1 of this lab. </p> <p>Now verify that the \"Copilot Access Enabled\" checker has a green checkmark. If it doesn't, that means that your user account license for Copilot. This is required to continue the labs.</p> <p></p> <p>Now, let's do a code tour.</p> <p></p>"},{"location":"pages/extend-m365-copilot/01-declarative-copilot/#step-4-understanding-the-files-in-the-app","title":"Step 4: Understanding the files in the app","text":"<p>Here's how the base project looks: </p> Folder/File Contents <code>.vscode</code> VSCode files for debugging <code>appPackage</code> Templates for the Teams application manifest, the agent manifest, and the API specification, if any <code>env</code> Environment files with a default  <code>.env.dev</code>    file <code>appPackage/color.png</code> Application logo image <code>appPackage/outline.png</code> Application logo outline image <code>appPackage/declarativeAgent.json</code> Defines settings and configurations of the declarative agent. <code>appPackage/instruction.txt</code> Defines the behaviour of declarative agent. <code>appPackage/manifest.json</code> Teams application manifest that defines metadata for your declarative agent. <code>teamsapp.yml</code> Main Teams Toolkit project file. The project file defines two primary things: Properties and configuration Stage definitions. <p>The file of interest for our lab is primarily the appPackage/instruction.txt file which is the core directives needed for your agent. It's a plain text file and you can write natural language instructions in it. </p> <p>Another important file is appPackage/declarativeAgent.json where there is a schema to be followed to extend Microsoft 365 Copilot with the new declarative agent. Let's look at what propertis the schema of this file has. </p> <ul> <li>The <code>$schema</code> is the schema reference </li> <li>The <code>version</code> is the schema version </li> <li>The <code>name</code> key represents the name of the declarative agent.</li> <li>The <code>description</code> provides a description.</li> <li>The <code>instructions</code> provides the path to the instructions.txt file which holds directives which will determine the operational behavior. You can also put your instructions as plain text as a value here. But for this lab we will use the instructions.txt file.</li> </ul> <p>Another important file is the <code>appPackage/manifest.json</code> file, which contains crucial metadata, including the package name, the developer\u2019s name, and references to the copilot agents utilised by the application. The following excerpt from the manifest.json file illustrates these details:</p> <pre><code>\"copilotAgents\": {\n        \"declarativeAgents\": [            \n            {\n                \"id\": \"declarativeAgent\",\n                \"file\": \"declarativeAgent.json\"\n            }\n        ]\n    },\n</code></pre> <p>You could also update the logo files <code>color.png</code> and <code>outline.png</code> to make it match your application's brand. In today's lab you will change color.png icon for the agent to stand out. </p> <p></p>"},{"location":"pages/extend-m365-copilot/01-declarative-copilot/#exercise-2-update-instructions-and-icons","title":"Exercise 2: Update instructions and icons","text":""},{"location":"pages/extend-m365-copilot/01-declarative-copilot/#step-1-update-icons-and-manifests","title":"Step 1: Update icons and manifests","text":"<p>First we will do the easy bit which is replacing the logo. Copy the image located here and replace it with the image of same name in the folder appPackage in your root project. </p> <p>Next, go to the file appPackage/manifest.json  in your root project and find the node copilotAgents. Update the id value of the declarativeAgents array's first entry from <code>declarativeAgent</code> to <code>dcGeolocator</code> to make this ID unique.</p> <pre>\n \"copilotAgents\": {\n        \"declarativeAgents\": [            \n            {\n                \"id\": \"dcGeolocator\",\n                \"file\": \"declarativeAgent.json\"\n            }\n        ]\n    },\n\n</pre> <p>Next, go to the file appPackage/instruction.txt and copy paste the below instruction to overwrite the existing contents of the file.</p> <pre><code>System Role: You are the game host for a geo-location guessing game. Your goal is to provide the player with clues about a specific city and guide them through the game until they guess the correct answer. You will progressively offer more detailed clues if the player guesses incorrectly. You will also reference PDF files in special rounds to create a clever and immersive game experience.\n\nGame play Instructions:\nGame Introduction Prompt\nUse the following prompt to welcome the player and explain the rules:\nWelcome to the Geo Location Game! I\u2019ll give you clues about a city, and your task is to guess the name of the city. After each wrong guess, I\u2019ll give you a more detailed clue. The fewer clues you use, the more points you score! Let\u2019s get started. Here\u2019s your first clue:\nClue Progression Prompts\nStart with vague clues and become progressively specific if the player guesses incorrectly. Use the following structure:\nClue 1: Provide a general geographical clue about the city (e.g., continent, climate, latitude/longitude).\nClue 2: Offer a hint about the city\u2019s landmarks or natural features (e.g., a famous monument, a river).\nClue 3: Give a historical or cultural clue about the city (e.g., famous events, cultural significance).\nClue 4: Offer a specific clue related to the city\u2019s cuisine, local people, or industry.\nResponse Handling\nAfter the player\u2019s guess, respond accordingly:\n\nIf the player guesses correctly, say:\nThat\u2019s correct! You\u2019ve guessed the city in [number of clues] clues and earned [score] points. Would you like to play another round?\nIf the guess is wrong, say:\nNice try! [followed by more clues]\nPDF-Based Scenario\nFor special rounds, use a PDF file to provide clues from a historical document, traveler's diary, or ancient map:\nThis round is different! I\u2019ve got a secret document to help us. I\u2019ll read clues from this [historical map/traveler\u2019s diary] and guide you to guess the city. Here\u2019s the first clue:\nReference the specific PDF to extract details:\nTraveler's Diary PDF,Historical Map PDF.\nUse emojis where necessary to have friendly tone. \nScorekeeping System\nTrack how many clues the player uses and calculate points:\n\n1 clue: 10 points\n2 clues: 8 points\n3 clues: 5 points\n4 clues: 3 points\nEnd of Game Prompt\nAfter the player guesses the city or exhausts all clues, prompt:\nWould you like to play another round, try a special challenge?\n\n</code></pre> <p>Follow the next step to make sure our agent can help user engage with it by giving conversation starters.  </p> <p>Include your own files in appPackage files</p> <p>Notice this line in appPackage/declarativeAgent.json:</p> <p><code>\"instructions\": \"$[file('instruction.txt')]\",</code></p> <p>This brings in your instructions from the instruction.txt file. If you want to modularize your packaging files, you can use this technique in any of the JSON files in the appPackage folder.</p> <p></p>"},{"location":"pages/extend-m365-copilot/01-declarative-copilot/#step-2-add-conversation-starters","title":"Step 2 : Add conversation starters","text":"<p>You can enhance user engagement with the declarative agent by adding conversation starters to it. </p> <p>Some of the benefits of having conversation starters are: </p> <ul> <li> <p>Engagement: They help initiate interaction, making users feel more comfortable and encouraging participation.</p> </li> <li> <p>Context Setting: Starters set the tone and topic of the conversation, guiding users on how to proceed.</p> </li> <li> <p>Efficiency: By leading with a clear focus, starters reduce ambiguity, allowing the conversation to progress smoothly.</p> </li> <li> <p>User Retention: Well-designed starters keep users interested, encouraging repeat interactions with the AI.</p> </li> </ul> <p>Open file <code>declarativeAgent.json</code> and right after the <code>instructions</code> node add a comma <code>,</code> and paste below code.</p> <pre><code> \"conversation_starters\": [\n      { \n            \"title\": \"Getting Started\",\n            \"text\":\"I am ready to play the Geo Location Game! Give me a city to guess, and start with the first clue.\"          \n\n         },\n        {\n            \"title\": \"Ready for a Challenge\",\n            \"text\": \"Let us try something different. Can we play a round using the travelers diary?\"\n        },\n        { \n            \"title\": \"Feeling More Adventurous\",\n            \"text\": \"I am in the mood for a challenge! Can we play the game using the historical map? I want to see if I can figure out the city from those ancient clues.\"\n        }\n    ]\n</code></pre> <p>Now all the changes are done to the agent, it's time to test it.</p> <p></p>"},{"location":"pages/extend-m365-copilot/01-declarative-copilot/#step-3-test-the-app","title":"Step 3: Test the app","text":"<p>To test the app go to the <code>Teams Toolkit</code> extension in <code>Visual Studio Code</code>. This will open up the left pane. Under \"LIFECYCLE\" select \"Provision\".  You can see the value of Teams Toolkit here, as it makes publishing so simple. </p> <p></p> <p>In this step Teams toolkit will package up all the files inside the <code>appPackage</code> folder as a zip file and install the declarative agent to your own app catalog.</p> <p>Open the Microsoft 365 Copilot BizChat https://microsoft365.com/copilot/ logged into your developer tenant.</p> <p>Once the Copilot app is loaded, Find the \"Geo Locator Game\" from the right panel as shown. </p> <p></p> <p>If you can't find it, this may be a long list and you can find your agent by expanding the list by selecting \"see more\"</p> <p>Once launched, you will be in this focused chat window with the agent. And you will see the conversation starters as marked below:</p> <p></p> <p>Select one of the conversation starters and it will fill your compose message box with the starter prompt, just waiting for you to hit \"Enter\". It is still only your assistant and will wait for you to take action \ud83d\udfe2</p> <p>Check out the demo of the game. </p> <p></p> <p></p>"},{"location":"pages/extend-m365-copilot/01-declarative-copilot/#exercise-3-add-files-for-reference-bonus-exercise","title":"Exercise 3: Add files for reference (Bonus exercise)","text":"<p>Playing the same game over and over can get dull. To keep things fun and engaging, the game needs access to data that\u2019s regularly updated. Let\u2019s give the agent a new ability to refresh the game and ramp up the challenge. As we covered earlier, declarative agents can have three main capabilities, one of which is referencing SharePoint sites and OneDrive. So, let's go ahead and add the ability for your agent to access a couple of files.</p>"},{"location":"pages/extend-m365-copilot/01-declarative-copilot/#step-1-upload-files-to-sharepoint","title":"Step 1: Upload files to SharePoint.","text":"<p>Download this zip file consisting of two PDF file by selecting this link</p> <p>Extract the two files from the zip and upload to a SharePoint Teams site in the same tenant in the document library Documents. These documents are historical_map.pdf and travelers_diary to help make the game more challenging. </p> <p>Copy the absolute url of the site. For eg. <code>https://xyz.sharepoint.com/sites/contoso</code> and proceed to next step.</p> <p></p>"},{"location":"pages/extend-m365-copilot/01-declarative-copilot/#step-2-update-declarative-agent-manifest","title":"Step 2: Update declarative agent manifest","text":"<p>Go to the environment file called .env.dev and create a new variable called \"SP_SITE_URL\" and paste the absolute url of the SharePoint site as its value.</p> <p>Next, go to the agent manifest appPackage/declarativeAgent.json and add a comma <code>,</code> after conversation_starters array and paste the belwo new array object for extending the agent's capability to refer to SharePoint data of a particular site.</p> <pre><code> \"capabilities\": [\n        {\n\n            \"name\": \"OneDriveAndSharePoint\",\n            \"items_by_url\": [\n            {\n                \"url\": \"${{SP_SITE_URL}}\"\n            }\n        ]\n        }\n    ]\n</code></pre> <p>This widens declarative agent's knowledge to read documents in this SharePoint site specifically to help spice up the game.  There is no limit to how many URLs you can add \ud83d\udcaa\ud83c\udffc</p> <p></p>"},{"location":"pages/extend-m365-copilot/01-declarative-copilot/#step-3-upgrade-app-manifest","title":"Step 3: Upgrade app manifest","text":"<p>Next, go to the file appPackage/manifest.json and upgrade the app <code>version</code> from \"1.0.0\"\" to \"1.0.1\" so the changes are reflected when you install. </p> <p></p>"},{"location":"pages/extend-m365-copilot/01-declarative-copilot/#step-4-test-the-app","title":"Step 4: Test the app","text":"<ul> <li> <p>To test the app go back to the <code>Teams Toolkit</code> extension in <code>Visual Studio Code</code>. This will open up the left pane. Under \"LIFECYCLE\" select \"Provision\" for packaging and installing the upgraded declarative agent to your own app catalog.</p> </li> <li> <p>Open the Microsoft 365 Copilot BizChat https://microsoft365.com/copilot/ logged into your developer tenant.</p> </li> <li> <p>Launch the \"Geo Locator Game\" again.</p> </li> </ul> <p></p> <p>This time, try the challenge which will be based on the travel diary. Choose the second converation starter.</p> <p></p> <p>You have basically become a declarative agent boss. Find out more from this video we did.</p> Introducing Declarative agents <p></p>"},{"location":"pages/extend-m365-copilot/01-declarative-copilot/#resources","title":"Resources","text":"<ul> <li>Declarative agents</li> <li>Declarative agent manifest schema</li> <li>Supported content types</li> <li>Capabilities of Declarative agents</li> </ul> <p>Great job on building your game agent \ud83c\udf89 ! In the next lab, you\u2019ll create a REST API, use it to build a plugin, and dive into a real-world business scenario solved by another agent. Exciting stuff ahead. Select Next</p> <p>CONGRATULATIONS!</p> <p></p>"},{"location":"pages/extend-m365-copilot/02-build-the-api/","title":"Lab E2: Build an API","text":"<p>Do these labs if you want to build a Declarative agent where Microsoft 365 provides the AI model and orchestration</p> <ul> <li>E0 - Setup</li> <li>E1 - First declarative agent</li> <li>E2 - Build an API</li> <li>E3 - Add a declarative agent and API plugin</li> <li>E4 - Enhance the API and plugin</li> <li>E5 - Add adaptive cards</li> <li>E6 - Add Entra ID authentication</li> <li>Bonus - Add Graph Connector</li> </ul> Table of Contents <p>In this lab you will set up an API based on Azure Functions and install it as an API plugin for Copilot for Microsoft 365.</p>"},{"location":"pages/extend-m365-copilot/02-build-the-api/#introduction","title":"Introduction","text":"<p>In this lab you will set up a REST API for Trey Research, a hypothetical consulting company. It provides API's for accessing information about consultants (using the /api/consultants path) and about the current user (using the /api/me path). For now the API doesn't support authentication, so the current user will always be \"Avery Howard\"; in Lab E6 you will add authentication and the ability to access the logged in user.</p> <p>The code consists of Azure Functions written in TypeScript, backed by a database in Azure Table storage. When you run the app locally, table storage will be provided by the Azurite storage emulator.</p> How did you create this API? <p>The project was created using Teams Toolkit. You can create the same scaffolding for your own project by opening an empty folder in VS Code and going to Teams Toolkit. Create a new app project and select \"Agent\", then \"Declarative Agent\" and \"Add plugin\".</p>"},{"location":"pages/extend-m365-copilot/02-build-the-api/#exercise-1-configure-and-run-the-starting-application","title":"Exercise 1: Configure and run the starting application","text":""},{"location":"pages/extend-m365-copilot/02-build-the-api/#step-1-install-additional-prerequisites","title":"Step 1: Install additional prerequisites","text":"<p>This lab calls for a couple of additional prerequisites; please install them now.</p> <ul> <li>Azure functions core tool OR REST Client add-in for Visual Studio Code: You will use one of these toolks to test your API locally</li> <li>(optional) Azure Storage Explorer: This will allow you to view and modify the Trey Research database</li> </ul> <p></p>"},{"location":"pages/extend-m365-copilot/02-build-the-api/#step-2-download-the-starting-application","title":"Step 2: Download the starting application","text":"<p>Begin by downloading the Copilot Developer Camp repository at https://github.com/microsoft/copilot-camp. Select the \"Code\" button and clone or download the content to your computer.</p> <p>Find starting code in the repo at /src/extend-m365-copilot/path-e-lab02-build-api/trey-research. Copy this folder to a location on your computer where you want to do your work. These instructions will refer to this as the \"working folder\" going forward.</p> <p>Note</p> <p>The next several labs build on this one, and you should be able to continue working in the same folder for labs E2-E6. At the completion of this lab you will not have changed any of the files visible in Github, so the folder /src/extend-m365-copilot/path-e-lab02-build-api/trey-research is the same at the beginning and end of the lab.</p> <p></p>"},{"location":"pages/extend-m365-copilot/02-build-the-api/#step-3-set-up-the-local-environment-files","title":"Step 3: Set up the local environment files","text":"<p>Open your working folder in Visual Studio Code. You might see a popup dialog asking you to \"trust the authors of the files in this folder\". If that is the case, select the button \"Yes, I trust the authors\" to proceed. Copy the /env/.env.local.user.sample file to /env/.env.local.user. If env.local.user already exists, ensure this line is present:</p> <pre><code>SECRET_STORAGE_ACCOUNT_CONNECTION_STRING=UseDevelopmentStorage=true\n</code></pre> <p></p>"},{"location":"pages/extend-m365-copilot/02-build-the-api/#step-4-install-the-dependencies","title":"Step 4: Install the dependencies","text":"<p>Open a command line in your working folder and type:</p> <pre><code>npm install\n</code></pre> <p></p>"},{"location":"pages/extend-m365-copilot/02-build-the-api/#step-5-run-the-application","title":"Step 5: Run the application","text":"<p>In Visual Studio Code, click the Teams logo in the left sidebar to open Teams Toolkit. Ensure you are logged into Microsoft 365 1\ufe0f\u20e3 and that Custom App Uploads and Copilot Access Enabled indicators 2\ufe0f\u20e3 are both showing green checkmarks.</p> <p></p> <p>Now you can just hit F5 to debug using Microsoft Edge, or you can hover over the \"local\" enviroment and click the debugger symbol that will be displayed 1\ufe0f\u20e3, then select the browser of your choice 2\ufe0f\u20e3.</p> <p></p> <p>Eventually a browser will open (it's faster after the first time). You'll log into this in the next lab to test with Copilot, but for now just minimize the browser so your app keeps running, and we'll proceed to test the API.</p> <p></p> <p></p>"},{"location":"pages/extend-m365-copilot/02-build-the-api/#exercise-2-test-the-apps-web-services","title":"Exercise 2: Test the app's web services","text":"<p>The Trey Resarch project is an API plugin, so naturally it includes an API. In this exercise you'll test the API manually and, in the process, learn about what it does. </p>"},{"location":"pages/extend-m365-copilot/02-build-the-api/#step-1-get-the-me-resource","title":"Step 1: GET the /me resource","text":"<p>With the debugger still running 1\ufe0f\u20e3, switch to the code view in Visual Studio Code 2\ufe0f\u20e3. Open the http folder and select the treyResearchAPI.http file 3\ufe0f\u20e3.</p> <p>Before proceeding, ensure the log file is in view by opening the \"Debug console\" tab 4\ufe0f\u20e3 and ensuring that the console called \"Attach to Backend\" is selected 5\ufe0f\u20e3.</p> <p>Now click the \"Send Request\" link in treyResearchAAPI.http just above the link <code>{{base_url}}/me</code> 6\ufe0f\u20e3.</p> <p></p> <p>You should see the response in the right panel, and a log of the request in the bottom panel. The response shows the information about the logged-in user, but since we haven't implemented authentication as yet (that's coming in Lab 6), the app will return information on the fictitious consultant \"Avery Howard\". Take a moment to scroll through the response to see details about Avery, including a list of project assignments.</p> <p></p> <p></p>"},{"location":"pages/extend-m365-copilot/02-build-the-api/#step-2-try-the-other-methods-and-resources","title":"Step 2: Try the other methods and resources","text":"<p>Now try sending the POST request for <code>{{base_url}}/me/chargeTime</code>. This will charge 3 hours of Avery's time to the Woodgrove Bank project. This is stored in the project database, which is a locally hosted emulation of Azure Table Storage, so the system will remember that Avery has delivered these hours. (To test this, call the <code>/me</code> resource again and look at the <code>\"deliveredThisMonth\"</code> property under the Woodgrove project).</p> <p>Continue to try the various GET requests in the .http file to find consultants with various skills, certifications, roles, and availability. All this information will be available to Copilot so it can answer user prompts.</p> <p></p>"},{"location":"pages/extend-m365-copilot/02-build-the-api/#step-3-examine-the-database-optional","title":"Step 3: Examine the database (optional)","text":"<p>If you've installed the Azure Storage Explorer, you can examine and modify the application's data. The data is stored in Azure Table Storage, which in this case is running locally using the Azurite emulator.</p> <p>Note</p> <p>When you ran <code>npm install</code> in the previous exercise you installed the Azurite storage emulator. For more information check the Azurite documention here, and when you start the project, Azurite is automatically started up. So as long as your project is started successfully you can view the storage.</p> <p>Within the Azure Storage Explorer, open the \"Emulator &amp; Attached\" selection and pick the \"(Emulator: Default Ports)\" collection; then drill down to \"Tables\". You shold see 3 tables:</p> <ul> <li>Consultant: This table stores details about Trey Research consultants</li> <li>Project: This table stores details about Trey Research projects</li> <li>Assignment: This table stores consultant assignments to projects, such as Avery Howard's assignment to the Woodgrove Bank project. This table includes a \"delivered\" field that contains a JSON representation of the hours delivered by that consultant on the project over time.</li> </ul> <p></p> <p></p> <p>CONGRATULATIONS!</p> <p>You've successfully built the lab sample API! You can now proceed to make it into a Copilot plugin, and expose it via a Declarative agent.</p> <p></p>"},{"location":"pages/extend-m365-copilot/03-add-declarative-agent/","title":"Lab E3 - Add a declarative agent and API plugin","text":"<p>Do these labs if you want to build a Declarative agent where Microsoft 365 provides the AI model and orchestration</p> <ul> <li>E0 - Setup</li> <li>E1 - First declarative agent</li> <li>E2 - Build an API</li> <li>E3 - Add a declarative agent and API plugin</li> <li>E4 - Enhance the API and plugin</li> <li>E5 - Add adaptive cards</li> <li>E6 - Add Entra ID authentication</li> <li>Bonus - Add Graph Connector</li> </ul> Table of Contents <p>In this lab you will add a declarative agent which is grounded in the API plugin you created in the previous lab, as well as in specific SharePoint files</p> <p>Note</p> <p>This lab builds on the previous one, Lab E2. You should be able to continue working in the same folder for labs E2-E6, but solution folders have been provided for your reference. The finished solution for this lab is in the /src/extend-m365-copilot/path-e-lab03-build-declarative-agent/trey-research-lab03-END folder.</p>"},{"location":"pages/extend-m365-copilot/03-add-declarative-agent/#exercise-1-upload-sample-documents","title":"Exercise 1: Upload sample documents","text":"<p>In this step you will upload sample documents which will be used by your declarative agent to respond to user prompts. These include some consulting documents such as Statements of Work, and a simple spreadsheet containing your hours as a consultant.</p>"},{"location":"pages/extend-m365-copilot/03-add-declarative-agent/#step-1-create-a-sharepoint-site","title":"Step 1: Create a SharePoint site","text":"<p>Within the Microsoft 365 app, or elsewhere in Microsoft 365, click the \"waffle\" menu 1\ufe0f\u20e3 and select \"SharePoint\" 2\ufe0f\u20e3.</p> <p></p> <p>Then click \"Create Site\" 1\ufe0f\u20e3 and choose a \"Team site\" 2\ufe0f\u20e3.</p> <p></p> <p>Select the Standard team site template; you will be shown a preview of the site. Click \"Use Template\" to continue.</p> <p></p> <p>Give your site a name such as \"Trey Research legal documents\" 1\ufe0f\u20e3 and click \"Next\" 2\ufe0f\u20e3.</p> <p></p> <p>Then select your privacy settings and language, and click \"Create Site\"</p> <p></p> <p>After a few moments, you will be presented with a new SharePoint site. </p> <p></p>"},{"location":"pages/extend-m365-copilot/03-add-declarative-agent/#step-2-upload-the-sample-documents","title":"Step 2: Upload the sample documents","text":"<p>In the Documents web part, select \"See all\" to view the document library page.</p> <p></p> <p>Next, click the \"Upload\" 1\ufe0f\u20e3 toolbar button and select \"Files\" 2\ufe0f\u20e3.</p> <p></p> <p>Navigte to your working folder; you will find a directory called sampleDocs within. Highlight all the sample documents 1\ufe0f\u20e3 and click \"Open\" 2\ufe0f\u20e3.</p> <p>Make note of the site url, which will resemble \"https://&lt;your-tenant&gt;.sharepoint.com/sites/TreyResearchlegaldocuments\", as you will need it in the next exercise.</p> <p></p> <p></p>"},{"location":"pages/extend-m365-copilot/03-add-declarative-agent/#exercise-2-create-the-declarative-agent","title":"Exercise 2: Create the declarative agent","text":""},{"location":"pages/extend-m365-copilot/03-add-declarative-agent/#step-1-add-the-declarative-agent-json-to-your-project","title":"Step 1: Add the declarative agent JSON to your project","text":"<p>Create a new file called trey-declarative-agent.json within your appPackage folder. Copy the following JSON into this file and save it.</p> <pre><code>{\n    \"$schema\": \"https://aka.ms/json-schemas/copilot-extensions/vNext/declarative-copilot.schema.json\",\n    \"version\": \"v1.0\",\n    \"name\": \"Trey Genie Local\",\n    \"description\": \"You are a handy assistant for consultants at Trey Research, a boutique consultancy specializing in software development and clinical trials. \",\n    \"instructions\": \"You are consulting agent. Greet users professionally and introduce yourself as the Trey Genie. Offer assistance with their consulting projects and hours. Remind users of the Trey motto, 'Always be Billing!'. Your primary role is to support consultants by helping them manage their projects and hours. Using the TreyResearch action, you can: You can assist users in retrieving consultant profiles or project details for administrative purposes but do not participate in decisions related to hiring, performance evaluation, or assignments. You can assist users to find consultants data based on their names, project assignments, skills, roles, and certifications. You can assist users to retrieve project details based on the project or client name. You can assist users to charge hours to a project. You can assist users to add a consultant to a project. If a user inquires about the hours they have billed, charged, or worked on a project, rephrase the request to ask about the hours they have delivered. Additionally, you may provide general consulting advice. If there is any confusion, encourage users to consult their Managing Consultant. Avoid providing legal advice.\",\n    \"conversation_starters\": [\n        {\n            \"title\": \"Find consultants\",\n            \"text\": \"Find consultants with TypeScript skills\"\n        },\n        {\n            \"title\": \"My Projects\",\n            \"text\": \"What projects am I assigned to?\"\n        },\n        {\n            \"title\": \"My Hours\",\n            \"text\": \"How many hours have I delivered on projects this month?\"\n        }\n    ],\n    \"capabilities\": [\n        {\n            \"name\": \"OneDriveAndSharePoint\",\n            \"items_by_url\": [\n                {\n                    \"url\": \"${{SHAREPOINT_DOCS_URL}}\"\n                }\n            ]\n        }\n    ],\n    \"actions\": [\n        {\n            \"id\": \"treyresearch\",\n            \"file\": \"trey-plugin.json\"\n        }\n    ]\n}\n</code></pre> <p>Notice that the file includes a name, description, and instructions for the declarative agent. Notice that as part of the instructions, Copilot is instructed to \"Always remind users of the Trey motto, 'Always be Billing!'.\" You should see this when you prompt Copilot in the next exercise.</p> <p></p>"},{"location":"pages/extend-m365-copilot/03-add-declarative-agent/#step-2-add-the-url-of-your-sharepoint-site-to-the-declarative-agent","title":"Step 2: Add the URL of your SharePoint site to the declarative agent","text":"<p>Under \"Capabilities\" you will notice a SharePoint file container. While Microsoft 365 Copilot may reference any documents in SharePoint or OneDrive, this declarative agent will only access files in the Trey Research Legal Documents site you created in Exercise 1. </p> <pre><code>\"capabilities\": [\n    {\n        \"name\": \"OneDriveAndSharePoint\",\n        \"items_by_url\": [\n            {\n                    \"url\": \"${{SHAREPOINT_DOCS_URL}}\"\n            }\n        ]\n    }\n],\n</code></pre> <p>Notice that the SharePoint URL is actually an environment variable <code>SHAREPOINT_DOCS_URL</code>, so you need to add that to your .env.local file in the env folder. Add this in its own line at the end of the file, using your SharePoint URL:</p> <pre><code>SHAREPOINT_DOCS_URL=https://mytenant.sharepoint.com/sites/TreyResearchLegalDocuments\n</code></pre> <p></p>"},{"location":"pages/extend-m365-copilot/03-add-declarative-agent/#step-3-examine-the-api-plugin-files","title":"Step 3: Examine the API Plugin files","text":"<p>Within the trey-declarative-agent.json file, you'll find an \"actions\" section, which tells the declarative agent to access the Trey Research API.</p> <pre><code>\"actions\": [\n    {\n        \"id\": \"treyresearch\",\n        \"file\": \"trey-plugin.json\"\n    }\n]\n</code></pre> <p>In this step we'll look at trey-plugin.json and how it and another file describe the API to Copilot so it can make the REST calls.</p> <p>These two files are used to describe your API to Copilot. They were already included in the project you downloaded in Lab 2, so you can examine them now:</p> <ul> <li>appPackage/trey-definition.json - This is the OpenAPI Specifiction (OAS) or \"Swagger\" file, which is an industry standard format for describing a REST API</li> <li>appPackage/trey-plugin.json - This file contains all the Copilot-specific details that aren't described in the OAS file</li> </ul> <p>In this step, take a moment to examine these files. In the next few labs you'll get to know them better as we add more features to the solution.</p> <p>In appPackage/trey-definition.json, you'll find the general description of the aplication. This includes the server URL; Teams Toolkit will create a developer tunnel to expose your local API on the Internet, and replace the token <code>\"${{OPENAPI_SERVER_URL}}</code> with the public URL. It then goes on to describe every resource path, verb, and paremeter in the API. Notice the detailed descriptions; these are important to help Copilot understand how the API is to be used.</p> <pre><code>{\n  \"openapi\": \"3.0.1\",\n  \"info\": {\n      \"version\": \"1.0.0\",\n      \"title\": \"Trey Research API\",\n      \"description\": \"API to streamline consultant assignment and project management.\"\n  },\n  \"servers\": [\n      {\n          \"url\": \"${{OPENAPI_SERVER_URL}}/api/\",\n          \"description\": \"Production server\"\n      }\n  ],\n  \"paths\": {\n      \"/consultants/\": {\n          \"get\": {\n              \"operationId\": \"getConsultants\",\n              \"summary\": \"Get consultants working at Trey Research based on consultant name, project name, certifications, skills, roles and hours available\",\n              \"description\": \"Returns detailed information about consultants identified from filters like name of the consultant, name of project, certifications, skills, roles and hours available. Multiple filters can be used in combination to refine the list of consultants returned\",\n              \"parameters\": [\n                  {\n                      \"name\": \"consultantName\",\n                      \"in\": \"query\",\n                      \"description\": \"Name of the consultant to retrieve\",\n                      \"required\": false,\n                      \"schema\": {\n                          \"type\": \"string\"\n                      }\n                  },\n      ...\n</code></pre> <p>The appPackage/trey-plugin.json file has the Copilot-specific details. This includes breaking the API calls down into functions which can be called when Copilot has a particular use case. For example, all GET requests for <code>/consultants</code> look up one or more consultants with various parameter options, and they are grouped into a function <code>getConsultants</code>:</p> <pre><code>  \"functions\": [\n    {\n      \"name\": \"getConsultants\",\n      \"description\": \"Returns detailed information about consultants identified from filters like name of the consultant, name of project, certifications, skills, roles and hours available. Multiple filters can be used in combination to refine the list of consultants returned\",\n      \"capabilities\": {\n        \"response_semantics\": {\n          \"data_path\": \"$.results\",\n          \"properties\": {\n            \"title\": \"$.name\",\n            \"subtitle\": \"$.id\",\n            \"url\": \"$.consultantPhotoUrl\"\n          }\n        }\n      }\n    },\n</code></pre> <p>Scrolling down you can find the runtime settings: </p> <pre><code>\"runtimes\": [\n  {\n    \"type\": \"OpenApi\",\n    \"auth\": {\n      \"type\": \"None\"\n    },\n    \"spec\": {\n      \"url\": \"trey-definition.json\"\n    },\n    \"run_for_functions\": [\n      \"getConsultants\",\n      \"getUserInformation\",\n      \"postBillhours\"\n    ]\n  }\n],\n</code></pre> <p>They include a pointer to the trey-definition.json file, and an enumeration of the available functions.</p> <p></p>"},{"location":"pages/extend-m365-copilot/03-add-declarative-agent/#step-4-add-the-declarative-agent-to-your-app-manifest","title":"Step 4: Add the declarative agent to your app manifest","text":"<p>Now open the manifest.json file within the appPackage directory. Add, just before the <code>staticTabs</code> object, a new <code>copilotAgents</code> object with a <code>declarativeAgents</code> object inside as follows, so it references the declarative agent JSON file you created in the previous step.</p> <pre><code>  \"copilotAgents\": {\n    \"declarativeAgents\": [\n      {\n        \"id\": \"treygenie\",\n      \"file\": \"trey-declarative-agent.json\"\n      }\n    ]\n  }, \n</code></pre> <p>Be sure to save your work. </p> <p></p>"},{"location":"pages/extend-m365-copilot/03-add-declarative-agent/#step-5-remove-the-dummy-feature-from-the-app-manifest","title":"Step 5: Remove the dummy feature from the app manifest","text":"<p>The initial solution that you ran in Lab E2 didn't have a declarative agent yet, so the manifest would not install because it had no features. So we added a \"dummy\" feature, which is a static tab pointing to the Copilot Camp home page. This would allow users to view the Copilot Camp web site in a tab within Teams, Outlook, and the the Microsoft 365 app (https://office.com).</p> <p>If you ever tried Teams App Camp you would know all about them. If not, don't worry about it, just delete these lines from manifest.json as they aren't needed anymore.</p> <pre><code>\"staticTabs\": [\n  {\n    \"entityId\": \"index\",\n    \"name\": \"Copilot Camp\",\n    \"contentUrl\": \"https://microsoft.github.io/copilot-camp/\",\n    \"websiteUrl\": \"https://microsoft.github.io/copilot-camp/\",\n    \"scopes\": [\n      \"personal\"\n    ]\n  }\n],\n\"validDomains\": [\n  \"microsoft.github.io\"\n],\n</code></pre> <p></p>"},{"location":"pages/extend-m365-copilot/03-add-declarative-agent/#exercise-3-run-and-test-the-declarative-agent","title":"Exercise 3: Run and test the declarative agent","text":""},{"location":"pages/extend-m365-copilot/03-add-declarative-agent/#step-1-run-the-new-project","title":"Step 1: Run the new project","text":"<p>If you're still in the debugger, stop it to force a complete re-deloyment.</p> <p>Then start the debugger by clicking the arrow or pressing F5 and return to the Copilot user interface.</p> <p></p>"},{"location":"pages/extend-m365-copilot/03-add-declarative-agent/#step-2-test-the-declarative-agent","title":"Step 2: Test the declarative agent","text":"<p>Open the Copilot chat and the right flyout 1\ufe0f\u20e3 to show your previous chats and declarative agents and select the Trey Genie Local copilot 2\ufe0f\u20e3.</p> <p></p> <p>Try a prompt such as \"Please list my projects along with details from the Statement of Work doc\".  You should see a list of your projects from the API plugin, enhanced with details from each project's Statement of Work 1\ufe0f\u20e3. Notice that Copilot includes the Trey Research motto 2\ufe0f\u20e3 and references to the documents 3\ufe0f\u20e3. Click one of the references to check out the document.</p> <p></p> <p></p>"},{"location":"pages/extend-m365-copilot/03-add-declarative-agent/#step-3-learn-to-troubleshoot-your-api-plugin","title":"Step 3: Learn to troubleshoot your API Plugin","text":"<p>With any luck your declarative agent is working, but what if it's not? If your API is working but Copilot isn't calling it, what can you do?</p> <p>The answer is simple, and it's called developer mode.</p> <p>To enable developer mode, enter this prompt into Copilot:</p> <pre><code>-developer on\n</code></pre> <p>Then when you issue a prompt, Copilot will include an adaptive card at the end of its response with the words \"Show plugin developer info\". </p> <p></p> <p>If you expand by selecting the \"Show plugin developer info\" button , you will find details like enabled plugins that the agent can use, the matched functions and selected function that is used in the response sent by the agent. </p> <p>Note</p> <p>This screen shot includes functions you won't add until the next lab.</p> <p></p> <p>If you expand the selected function, you will see the execution details of the API/function.</p> <p></p> <p>Summary of developer mode info and their sections:</p> <ul> <li>Enabled plugins - explains which API plugins are available within your declarative agent</li> <li>Matched functions - shows the available functions in your plugin JSON (trey-plugin.json in this case).</li> <li>Selected functions for execution - shows which of the functions Copilot chose</li> <li>Function execution details - shows the HTTP status code returned by the API when Copilot called it and allows to dig into the details of the HTTP request and response</li> </ul> <p>For more details please see the developer mode documentation</p> <p></p> <p>CONGRATULATIONS!</p> <p>You've completed adding a declarative agent to your API plugin. You are now ready to proceed to add authentication to your API plugin. </p> <p></p>"},{"location":"pages/extend-m365-copilot/04-enhance-api-plugin/","title":"Lab E4 - Enhance the API and Plugin","text":"<p>Do these labs if you want to build a Declarative agent where Microsoft 365 provides the AI model and orchestration</p> <ul> <li>E0 - Setup</li> <li>E1 - First declarative agent</li> <li>E2 - Build an API</li> <li>E3 - Add a declarative agent and API plugin</li> <li>E4 - Enhance the API and plugin</li> <li>E5 - Add adaptive cards</li> <li>E6 - Add Entra ID authentication</li> <li>Bonus - Add Graph Connector</li> </ul> Table of Contents <p>In this lab you will add additional REST calls to the API and add them to the API Plugin packaging so Copilot can call them. In the process you will learn all the places where an API needs to be defined for Copilot.</p> <p>Note</p> <p>This lab builds on the previous one, Lab E3. You should be able to continue working in the same folder for labs E2-E6, but solution folders have been provided for your reference. The finished solution for this lab is in the /src/extend-m365-copilot/path-e-lab04-enhance-api-plugin/trey-research-lab04-END folder.</p>"},{"location":"pages/extend-m365-copilot/04-enhance-api-plugin/#exercise-1-add-projects-resource","title":"Exercise 1: Add /projects resource","text":"<p>In this exercise you will add a /projects resource to the Trey Research API. This will allow you to request information about projects using GET requests, and to assign a consultant to a project using a POST request. In the process, you'll learn about the appPackage/trey-Plugin.json and trey-definition.json files as you modify them to add the new projects API calls.</p>"},{"location":"pages/extend-m365-copilot/04-enhance-api-plugin/#step-1-add-azure-function-code","title":"Step 1: Add Azure function code","text":"<p>To begin, create a new file, projects.ts in the /src/functions folder of your solution from Lab 2. Then copy the code from here.</p> <p>This will implement a new Azure function to provide access to Trey Research projects</p> <p></p>"},{"location":"pages/extend-m365-copilot/04-enhance-api-plugin/#step-2-review-the-azure-function-code-optional","title":"Step 2: Review the Azure function code (optional)","text":"<p>Let's take a moment to review the code.</p> <p>This is a version 4 Azure function, so the code looks a lot like traditional Express code for NodeJS. The <code>projects</code> class implements an HTTP request trigger, which is called when the \"/projects\" path is accessed. This is followed by some in-line code that defines the methods and route. For now, access is anonymous; we'll add authentication in Lab E6.</p> <pre><code>export async function projects(\n    req: HttpRequest,\n    context: InvocationContext\n): Promise&lt;Response&gt; {\n    // ...\n}\napp.http(\"projects\", {\n    methods: [\"GET\", \"POST\"],\n    authLevel: \"anonymous\",\n    route: \"projects/{*id}\",\n    handler: projects,\n});\n</code></pre> <p>The class includes a switch statement for handling GET vs. POST requests, and obtains the parameters from the URL path (in the case of a project ID), query strings (such as ?projectName=foo, in the case of a GET), and the request body (in the case of a POST). It then accesses the project data using the ProjectApiService, which was part of the starting solution. It also sends responses for each request and logging of requests to the debug console.</p> <p></p>"},{"location":"pages/extend-m365-copilot/04-enhance-api-plugin/#step-3-add-http-test-requests","title":"Step 3: Add HTTP test requests","text":"<p>Now let's add the new requests to the http/treyResearchAPI.http file so we can try them out. Open the file and add this text to the bottom, then save your changes, or copy the updated file from here </p> <pre><code>########## /api/projects - working with projects ##########\n\n### Get all projects\n{{base_url}}/projects\n\n### Get project by id\n{{base_url}}/projects/1\n\n### Get project by project or client name\n{{base_url}}/projects/?projectName=supply\n\n### Get project by consultant name\n{{base_url}}/projects/?consultantName=dominique\n\n### Add consultant to project\nPOST {{base_url}}/projects/assignConsultant\nContent-Type: application/json\n\n{\n    \"projectName\": \"contoso\",\n    \"consultantName\": \"sanjay\",\n    \"role\": \"architect\",\n    \"forecast\": 30\n}\n</code></pre> <p></p>"},{"location":"pages/extend-m365-copilot/04-enhance-api-plugin/#step-4-test-the-new-resource","title":"Step 4: Test the new resource","text":"<p>If your app is still running from Lab 2, stop the debugger and restart it. Or, just start the debugger normally and wait for the app to start. When everything is ready, Teams Toolkit will display a web browser wanting you to log into Microsoft 365. Minimize this browser as you don't need it yet, but closing it would stop the debugger.</p> <p>Now try sending the new requests and you should be able to see Trey Research project details or assign a new consultant to a project using the POST request.</p> <p></p> <p></p>"},{"location":"pages/extend-m365-copilot/04-enhance-api-plugin/#exercise-2-add-projects-to-the-application-package","title":"Exercise 2: Add projects to the application package","text":"<p>The API plugin's application package is a zip file that contains all the information Copilot needs to use the API. In this exercise, you'll add information about the new /projects resource to the app package.</p>"},{"location":"pages/extend-m365-copilot/04-enhance-api-plugin/#step-1-update-the-open-api-specifiction-file","title":"Step 1: Update the Open API Specifiction file","text":"<p>An important part of the application package is the Open API Specification (OAS) definition file. OAS defines a standard format for describing a REST API, and is based on the popular \"Swagger\" definition.</p> <p>To begin, in the /appPackage folder, open the file trey-definition.json.  Since editing large JSON files can be tricky, please just copy the updated file from here and save the new trey-definition.json. In the steps that follow, you can review and understand the changes.</p> <p></p>"},{"location":"pages/extend-m365-copilot/04-enhance-api-plugin/#step-2-review-the-updates-optional","title":"Step 2: Review the updates (optional)","text":"<p>The first update was to add the <code>/projects/</code> path to the <code>paths</code> collection in the JSON.  As you can see, this includes all the available query strings when retrieving the <code>/projects/</code> resource, along with data types and required fields. It also includes the data that will be returned in API responses, including different payloads for status 200 (successful) and 400 (failed) responses.</p> <pre><code>\"/projects/\": {\n    \"get\": {\n        \"operationId\": \"getProjects\",\n        \"summary\": \"Get projects matching a specified project name and/or consultant name\",\n        \"description\": \"Returns detailed information about projects matching the specified project name and/or consultant name\",\n        \"parameters\": [\n            {\n                \"name\": \"consultantName\",\n                \"in\": \"query\",\n                \"description\": \"The name of the consultant assigned to the project\",\n                \"required\": false,\n                \"schema\": {\n                    \"type\": \"string\"\n                }\n            },\n            {\n                \"name\": \"projectName\",\n                \"in\": \"query\",\n                \"description\": \"The name of the project or name of the client\",\n                \"required\": false,\n                \"schema\": {\n                    \"type\": \"string\"\n                }\n            }\n        ],\n        \"responses\": {\n            \"200\": {\n                \"description\": \"Successful response\",\n                \"content\": {\n                    \"application/json\": {\n                        \"schema\": {\n                            \"type\": \"object\",\n                            \"properties\": {\n                                \"results\": {\n                                    \"type\": \"array\",\n                                    \"items\": {\n                                        \"type\": \"object\",\n                                        \"properties\": {\n                                            \"name\": {\n                                                \"type\": \"string\"\n                                            },\n                                            \"description\": {\n                                                \"type\": \"string\"\n                                            },\n                                            \"location\": {\n                                                \"type\": \"object\",\n                                                \"properties\": {\n                                                    \"street\": {\n                                                        \"type\": \"string\"\n                                                    },\n                                                    \"city\": {\n                                                        \"type\": \"string\"\n                                                    },\n                                                    \"state\": {\n                                                        \"type\": \"string\"\n                                                    },\n                                                    \"country\": {\n                                                        \"type\": \"string\"\n                                                    },\n                                                    \"postalCode\": {\n                                                        \"type\": \"string\"\n                                                    },\n                                                    \"latitude\": {\n                                                        \"type\": \"number\"\n                                                    },\n                                                    \"longitude\": {\n                                                        \"type\": \"number\"\n                                                    },\n                                                    \"mapUrl\": {\n                                                        \"type\": \"string\",\n                                                        \"format\": \"uri\"\n                                                    }\n                                                }\n                                            },\n                                            \"role\": {\n                                                \"type\": \"string\"\n                                            },\n                                            \"forecastThisMonth\": {\n                                                \"type\": \"integer\"\n                                            },\n                                            \"forecastNextMonth\": {\n                                                \"type\": \"integer\"\n                                            },\n                                            \"deliveredLastMonth\": {\n                                                \"type\": \"integer\"\n                                            },\n                                            \"deliveredThisMonth\": {\n                                                \"type\": \"integer\"\n                                            }\n                                        }\n                                    }\n                                },\n                                \"status\": {\n                                    \"type\": \"integer\"\n                                }\n                            }\n                        }\n                    }\n                }\n            },\n            \"404\": {\n                \"description\": \"Project not found\"\n            }\n        }\n    }\n},\n</code></pre> <p>You will also find that a path has been added at <code>/projects/assignConsultant</code> to handle the POST requests.</p> <p>Descriptions are important!</p> <p>This file, along with all the files in the app package, are going to be read by an intelligence. It may be artificial, but it's still intelligent enough to read the descriptions! You can help Copilot properly use your API by using descriptive names and descriptions in this and all the application package files!</p> <p></p>"},{"location":"pages/extend-m365-copilot/04-enhance-api-plugin/#step-3-add-projects-to-the-plugin-definition-file","title":"Step 3: Add projects to the plugin definition file","text":"<p>Now open the file trey-plugin.json within the /appPackage folder. This file contains extra information not included in the OAS definition file. Replace the contents of trey-plugin.json with this updated JSON.</p> <p></p>"},{"location":"pages/extend-m365-copilot/04-enhance-api-plugin/#step-4-review-the-changes-to-the-plugin-definition-file-optional","title":"Step 4: Review the changes to the plugin definition file (optional)","text":"<p>The plugin JSON file contains a collection of functions, each of which corresponds to a type of API call. Copilot will choose among these functions when utilizing your plugin at runtime.</p> <p>The new trey-plugin.json file includes new functions <code>getProjects</code> and <code>postAssignConsultant</code>. For example, here is <code>getProjects</code>:</p> <pre><code>{\n    \"name\": \"getProjects\",\n    \"description\": \"Returns detailed information about projects matching the specified project name and/or consultant name\",\n    \"capabilities\": {\n        \"response_semantics\": {\n            \"data_path\": \"$.results\",\n            \"properties\": {\n            \"title\": \"$.name\",\n            \"subtitle\": \"$.description\"\n            }\n        }\n    }\n},\n</code></pre> <p>Notice that it includes some <code>response_semantics</code> which instruct Copilot's orchestrator how to interpret the response payload. It defines the mapping of structured data in a response payload to specific properties required by the function. It enables the orchestrator to interpret and transform raw response data into meaningful content for rendering or further processing. For e.g. look at the response semantics below:</p> <pre><code>\n\"functions\": [\n    {\n      \"name\": \"getConsultants\",\n      \"description\": \"Returns detailed information about consultants identified from filters like name of the consultant, name of project, certifications, skills, roles and hours available. Multiple filters can be used in combination to refine the list of consultants returned\",\n      \"capabilities\": {\n        \"response_semantics\": {\n          \"data_path\": \"$.results\",\n          \"properties\": {\n            \"title\": \"$.name\",\n            \"subtitle\": \"$.id\",\n            \"url\": \"$.consultantPhotoUrl\"\n          }\n        }\n      }\n    },..]\n\n</code></pre> <p>Here <code>data_path</code> is : <code>$.results</code> in the <code>response_semantics</code> of function <code>getConsultants</code>. It means the main data resides under the <code>results</code> key in the JSON, which ensures the system extracts data starting at that path. It also defines mappings of specific fields from the raw data to corresponding semantic properties under <code>properties</code> field to readily use it for rendering.</p> <p>e.g. </p> <pre><code>     \"title\": \"$.name\",\n      \"subtitle\": \"$.id\",\n      \"url\": \"$.consultantPhotoUrl\"\n</code></pre> <p>The POST request has a similar function:</p> <pre><code>{\n    \"name\": \"postAssignConsultant\",\n    \"description\": \"Assign (add) consultant to a project when name, role and project name is specified.\",\n    \"capabilities\": {\n    \"response_semantics\": {\n        \"data_path\": \"$\",\n        \"properties\": {\n        \"title\": \"$.results.clientName\",\n        \"subtitle\": \"$.results.status\"\n        }\n    },\n    \"confirmation\": {\n        \"type\": \"AdaptiveCard\",\n        \"title\": \"Assign consultant to a project when name, role and project name is specified.\",\n        \"body\": \"* **ProjectName**: {{function.parameters.projectName}}\\n* **ConsultantName**: {{function.parameters.consultantName}}\\n* **Role**: {{function.parameters.role}}\\n* **Forecast**: {{function.parameters.forecast}}\"\n    }\n    }\n}\n</code></pre> <p>It includes an adaptive card to be used in the confirmation card, which is shown to users to confirm an action prior to issuing a POST request.</p> <p>Scrolling down, you can see the <code>runtimes</code> object which defines the type of plugin, the OAS definition file location, and a list of functions. The new functions have been added to the list.</p> <pre><code>\"runtimes\": [\n{\n    \"type\": \"OpenApi\",\n    \"auth\": {\n    \"type\": \"None\"\n    },\n    \"spec\": {\n    \"url\": \"trey-definition.json\"\n    },\n    \"run_for_functions\": [\n    \"getConsultants\",\n    \"getUserInformation\",\n    \"getProjects\",\n    \"postBillhours\",\n    \"postAssignConsultant\"\n    ]\n}\n],\n</code></pre> <p>Finally, it includes some conversation starters which are prompt suggestions shown to users; the new file has a conversation starter relating to projects.</p> <pre><code>\"capabilities\": {\n\"localization\": {},\n\"conversation_starters\": [\n    {\n    \"text\": \"What Trey projects am i assigned to?\"\n    },\n    {\n    \"text\": \"Charge 5 hours to the Contoso project for Trey Research\"\n    },\n    {\n    \"text\": \"Which Trey consultants are Azure certified?\"\n    },\n    {\n    \"text\": \"Find a Trey consultant who is available now and has Python skills\"\n    },\n    {\n    \"text\": \"Add Avery as a developer on the Contoso project for Trey\"\n    }\n]\n}\n</code></pre> <p></p>"},{"location":"pages/extend-m365-copilot/04-enhance-api-plugin/#exercise-3-test-the-plugin-in-copilot","title":"Exercise 3: Test the plugin in Copilot","text":"<p>Before you test the application, update the manifest version of your app package in the <code>appPackage\\manifest.json</code> file, follow these steps:</p> <ol> <li> <p>Open the <code>manifest.json</code> file located in the <code>appPackage</code> folder of your project.</p> </li> <li> <p>Locate the <code>version</code> field in the JSON file. It should look something like this: <code>json    \"version\": \"1.0.0\"</code></p> </li> <li> <p>Increment the version number to a small increment. For example, change it to: <code>json    \"version\": \"1.0.1\"</code></p> </li> <li> <p>Save the file after making the change.</p> </li> </ol>"},{"location":"pages/extend-m365-copilot/04-enhance-api-plugin/#step-1-restart-the-application","title":"Step 1: Restart the application","text":"<p>Stop and restart your project to force it to re-deploy the application package. You will be brought into Microsoft Teams. Once you're back in Copilot, open the right flyout 1\ufe0f\u20e3 to show your previous chats and agents and select the Trey Genie Local agent 2\ufe0f\u20e3.</p> <p></p> <p></p>"},{"location":"pages/extend-m365-copilot/04-enhance-api-plugin/#step-2-prompt-the-trey-genie","title":"Step 2: Prompt the Trey Genie","text":"<p>Now try a prompt such as \"what projects are we doing for adatum?\"</p> <p></p> <p>You may see a confirmation card, even for the GET request. If you do, allow the request to view the project details.</p> <p></p> <p></p> <p>CONGRATULATIONS!</p> <p>You've now completed enhancing your API plugin. You are now ready to proceed to the next lab to add rich card responses using adaptive cards. </p> <p></p>"},{"location":"pages/extend-m365-copilot/05-add-adaptive-card/","title":"Lab E5 - Add adaptive cards","text":"<p>Do these labs if you want to build a Declarative agent where Microsoft 365 provides the AI model and orchestration</p> <ul> <li>E0 - Setup</li> <li>E1 - First declarative agent</li> <li>E2 - Build an API</li> <li>E3 - Add a declarative agent and API plugin</li> <li>E4 - Enhance the API and plugin</li> <li>E5 - Add adaptive cards</li> <li>E6 - Add Entra ID authentication</li> <li>Bonus - Add Graph Connector</li> </ul> Table of Contents <p>In this lab you will further enhance the reponse from Copilot for Microsoft 365 from text to rich cards using Adaptive Cards. </p> <p>In this lab you will learn:</p> <ul> <li>What are Adaptive Cards</li> <li>How to create and test an Adaptive Card</li> <li>How to update Microsoft 365 Copilot responses to use Adaptive Cards for rich content</li> </ul> <p>Note</p> <p>This lab builds on the previous one, Lab E4. You should be able to continue working in the same folder for labs E2-E6, but solution folders have been provided for your reference. The finished solution for this lab is in the /src/extend-m365-copilot/path-e-lab05-add-adaptive-cards/trey-research-lab05-END folder.</p>"},{"location":"pages/extend-m365-copilot/05-add-adaptive-card/#introduction","title":"Introduction","text":"What are Adaptive Cards?  Adaptive Cards are platform-independent UI snippets authored in JSON that can be exchanged between apps and services. Once delivered to an app, the JSON transforms into native UI that automatically adapts to its environment. This enables the design and integration of lightweight UI across major platforms and frameworks.      \" frameborder=\"0\" allowfullscreen&gt; Adaptive cards"},{"location":"pages/extend-m365-copilot/05-add-adaptive-card/#exercise-1-create-and-test-a-simple-adaptive-card","title":"Exercise 1: Create and test a simple Adaptive Card","text":"<p>Let's dive in and discover how fun it is to create adaptive cards.</p>"},{"location":"pages/extend-m365-copilot/05-add-adaptive-card/#step-1-define-your-adaptive-card-in-json","title":"Step 1: Define Your Adaptive Card in JSON","text":"<p>Create a new file named <code>adaptiveCard.json</code> and add the following JSON content:</p> <pre><code>{\n  \"type\": \"AdaptiveCard\",\n  \"body\": [\n    {\n      \"type\": \"TextBlock\",\n      \"text\": \"Hello, Adaptive Cards!\",\n      \"size\": \"large\",\n      \"weight\": \"bolder\"\n    }\n  ],\n  \"actions\": [\n    {\n      \"type\": \"Action.OpenUrl\",\n      \"title\": \"Click me\",\n      \"url\":\"https://www.contoso.com\"\n    }\n  ],\n  \"$schema\": \"http://adaptivecards.io/schemas/adaptive-card.json\",\n  \"version\": \"1.3\"\n}\n</code></pre> <p>This JSON defines a simple Adaptive Card with a text block and a button.</p> <p></p>"},{"location":"pages/extend-m365-copilot/05-add-adaptive-card/#step-2-test-your-adaptive-card","title":"Step 2: Test Your Adaptive Card","text":"<p>To test your Adaptive Card, you can use the Adaptive Cards Designer.</p> <ol> <li>Open the Adaptive Cards Designer  .</li> <li>Copy the JSON content from your <code>adaptiveCard.json</code> file.</li> <li>Paste the JSON content into the \"Card Payload Editor\" section on the lower part of the designer.</li> <li>You will see a live preview of your Adaptive Card on the upper part of the designer.</li> </ol> <p>Congrats! You are now fully skilled to develop Adaptive cards for your plugin!</p> <p></p>"},{"location":"pages/extend-m365-copilot/05-add-adaptive-card/#exercise-2-update-the-plugin-manifest","title":"Exercise 2: Update the plugin manifest","text":"<p>We are going to update the plugin manifest file called trey-plugin.json in the appPackage folder with a response template using adaptive cards. We will find each function or API call and update the templates.</p>"},{"location":"pages/extend-m365-copilot/05-add-adaptive-card/#step-1-add-an-adaptive-card-for-get-apiconsultants-requests","title":"Step 1: Add an adaptive card for GET /api/consultants requests","text":"<ul> <li>Locate the function getConsultants and after the <code>properties</code> node add below <code>static_template</code> node.</li> </ul> <pre><code> \"static_template\": {\n            \"$schema\": \"http://adaptivecards.io/schemas/adaptive-card.json\",\n            \"type\": \"AdaptiveCard\",\n            \"version\": \"1.5\",\n            \"body\": [\n              {\n                \"type\": \"Container\",\n                \"$data\": \"${$root}\",\n                \"items\": [\n                  {\n                    \"speak\": \"${name}\",\n                    \"type\": \"ColumnSet\",\n                    \"columns\": [\n                      {\n                        \"type\": \"Column\",\n                        \"items\": [\n                          {\n                            \"type\": \"TextBlock\",\n                            \"text\": \"${name}\",\n                            \"weight\": \"bolder\",\n                            \"size\": \"extraLarge\",\n                            \"spacing\": \"none\",\n                            \"wrap\": true,\n                            \"style\": \"heading\"\n                          },\n                          {\n                            \"type\": \"TextBlock\",\n                            \"text\": \"${email}\",\n                            \"wrap\": true,\n                            \"spacing\": \"none\"\n                          },\n                          {\n                            \"type\": \"TextBlock\",\n                            \"text\": \"${phone}\",\n                            \"wrap\": true,\n                            \"spacing\": \"none\"\n                          },\n                          {\n                            \"type\": \"TextBlock\",\n                            \"text\": \"${location.city}, ${location.country}\",\n                            \"wrap\": true\n                          }\n                        ]\n                      },\n                      {\n                        \"type\": \"Column\",\n                        \"items\": [\n                          {\n                            \"type\": \"Image\",\n                            \"url\": \"${consultantPhotoUrl}\",\n                            \"altText\": \"${name}\"\n                          }\n                        ]\n                      }\n                    ]\n                  }\n                ]\n              }   \n\n            ]\n }\n</code></pre>"},{"location":"pages/extend-m365-copilot/05-add-adaptive-card/#step-2-add-an-adaptive-card-for-get-apime-requests","title":"Step 2: Add an adaptive card for GET /api/me requests:","text":"<ul> <li>Locate the function getUserInformation and after the <code>properties</code> node add below <code>static_template</code> node.</li> </ul> <pre><code>\n  \"static_template\":{\n            \"$schema\": \"http://adaptivecards.io/schemas/adaptive-card.json\",\n            \"type\": \"AdaptiveCard\",\n            \"version\": \"1.5\",\n            \"body\": [\n              {\n                \"type\": \"Container\",\n                \"$data\": \"${$root}\",\n                \"items\": [\n                  {\n                    \"speak\": \"${name}\",\n                    \"type\": \"ColumnSet\",\n                    \"columns\": [\n                      {\n                        \"type\": \"Column\",\n                        \"items\": [\n                          {\n                            \"type\": \"TextBlock\",\n                            \"text\": \"${name}\",\n                            \"weight\": \"bolder\",\n                            \"size\": \"extraLarge\",\n                            \"spacing\": \"none\",\n                            \"wrap\": true,\n                            \"style\": \"heading\"\n                          },\n                          {\n                            \"type\": \"TextBlock\",\n                            \"text\": \"${email}\",\n                            \"wrap\": true,\n                            \"spacing\": \"none\"\n                          },\n                          {\n                            \"type\": \"TextBlock\",\n                            \"text\": \"${phone}\",\n                            \"wrap\": true,\n                            \"spacing\": \"none\"\n                          },\n                          {\n                            \"type\": \"TextBlock\",\n                            \"text\": \"${location.city}, ${location.country}\",\n                            \"wrap\": true\n                          }\n                        ]\n                      },\n                      {\n                        \"type\": \"Column\",\n                        \"items\": [\n                          {\n                            \"type\": \"Image\",\n                            \"url\": \"${consultantPhotoUrl}\",\n                            \"altText\": \"${name}\"\n                          }\n                        ]\n                      }\n                    ]\n                  }\n                ]\n              }   \n\n            ]\n  }\n</code></pre>"},{"location":"pages/extend-m365-copilot/05-add-adaptive-card/#step-3-add-an-adaptive-card-for-get-apiprojects-requests","title":"Step 3: Add an adaptive card for GET /api/projects requests:","text":"<ul> <li>Locate the function getProjects and after the <code>properties</code> node add below <code>static_template</code> node.</li> </ul> <pre><code>  \"static_template\": {\n            \"$schema\": \"http://adaptivecards.io/schemas/adaptive-card.json\",\n            \"type\": \"AdaptiveCard\",\n            \"version\": \"1.5\",\n            \"body\": [\n              {\n                \"type\": \"Container\",\n                \"$data\": \"${$root}\",\n                \"items\": [\n                  {\n                    \"speak\": \"${description}\",\n                    \"type\": \"ColumnSet\",\n                    \"columns\": [\n                      {\n                        \"type\": \"Column\",\n                        \"items\": [\n                          {\n                            \"type\": \"TextBlock\",\n                            \"text\": \"${name}\",\n                            \"weight\": \"bolder\",\n                            \"size\": \"extraLarge\",\n                            \"spacing\": \"none\",\n                            \"wrap\": true,\n                            \"style\": \"heading\"\n                          },\n                          {\n                            \"type\": \"TextBlock\",\n                            \"text\": \"${description}\",\n                            \"wrap\": true,\n                            \"spacing\": \"none\"\n                          },\n                          {\n                            \"type\": \"TextBlock\",\n                            \"text\": \"${location.city}, ${location.country}\",\n                            \"wrap\": true\n                          },\n                          {\n                            \"type\": \"TextBlock\",\n                            \"text\": \"${clientName}\",\n                            \"weight\": \"Bolder\",\n                            \"size\": \"Large\",\n                            \"spacing\": \"Medium\",\n                            \"wrap\": true,\n                            \"maxLines\": 3\n                          },\n                          {\n                            \"type\": \"TextBlock\",\n                            \"text\": \"${clientContact}\",\n                            \"size\": \"small\",\n                            \"wrap\": true\n                          },\n                          {\n                            \"type\": \"TextBlock\",\n                            \"text\": \"${clientEmail}\",\n                            \"size\": \"small\",\n                            \"wrap\": true\n                          }\n                        ]\n                      },\n                      {\n                        \"type\": \"Column\",\n                        \"items\": [\n                          {\n                            \"type\": \"Image\",\n                            \"url\": \"${location.mapUrl}\",\n                            \"altText\": \"${location.street}\"\n                          }\n                        ]\n                      }\n                    ]\n                  }\n                ]\n              },\n              {\n                \"type\": \"TextBlock\",\n                \"text\": \"Project Metrics\",\n                \"weight\": \"Bolder\",\n                \"size\": \"Large\",\n                \"spacing\": \"Medium\",\n                \"horizontalAlignment\": \"Center\",\n                \"separator\": true\n              },\n              {\n                \"type\": \"ColumnSet\",\n                \"columns\": [\n                  {\n                    \"type\": \"Column\",\n                    \"width\": \"stretch\",\n                    \"items\": [\n                      {\n                        \"type\": \"TextBlock\",\n                        \"text\": \"Forecast This Month\",\n                        \"weight\": \"Bolder\",\n                        \"spacing\": \"Small\",\n                        \"horizontalAlignment\": \"Center\"\n                      },\n                      {\n                        \"type\": \"TextBlock\",\n                        \"text\": \"${forecastThisMonth} \",\n                        \"size\": \"ExtraLarge\",\n                        \"weight\": \"Bolder\",\n                        \"horizontalAlignment\": \"Center\"\n                      }\n                    ]\n                  },\n                  {\n                    \"type\": \"Column\",\n                    \"width\": \"stretch\",\n                    \"items\": [\n                      {\n                        \"type\": \"TextBlock\",\n                        \"text\": \"Forecast Next Month\",\n                        \"weight\": \"Bolder\",\n                        \"spacing\": \"Small\",\n                        \"horizontalAlignment\": \"Center\"\n                      },\n                      {\n                        \"type\": \"TextBlock\",\n                        \"text\": \"${forecastNextMonth} \",\n                        \"size\": \"ExtraLarge\",\n                        \"weight\": \"Bolder\",\n                        \"horizontalAlignment\": \"Center\"\n                      }\n                    ]\n                  }\n                ]\n              },\n              {\n                \"type\": \"ColumnSet\",\n                \"columns\": [\n                  {\n                    \"type\": \"Column\",\n                    \"width\": \"stretch\",\n                    \"items\": [\n                      {\n                        \"type\": \"TextBlock\",\n                        \"text\": \"Delivered Last Month\",\n                        \"weight\": \"Bolder\",\n                        \"spacing\": \"Small\",\n                        \"horizontalAlignment\": \"Center\"\n                      },\n                      {\n                        \"type\": \"TextBlock\",\n                        \"text\": \"${deliveredLastMonth} \",\n                        \"size\": \"ExtraLarge\",\n                        \"weight\": \"Bolder\",\n                        \"horizontalAlignment\": \"Center\"\n                      }\n                    ]\n                  },\n                  {\n                    \"type\": \"Column\",\n                    \"width\": \"stretch\",\n                    \"items\": [\n                      {\n                        \"type\": \"TextBlock\",\n                        \"text\": \"Delivered This Month\",\n                        \"weight\": \"Bolder\",\n                        \"spacing\": \"Small\",\n                        \"horizontalAlignment\": \"Center\"\n                      },\n                      {\n                        \"type\": \"TextBlock\",\n                        \"text\": \"${deliveredThisMonth} \",\n                        \"size\": \"ExtraLarge\",\n                        \"weight\": \"Bolder\",\n                        \"horizontalAlignment\": \"Center\"\n                      }\n                    ]\n                  }\n                ]\n              }\n            ],\n            \"actions\": [\n              {\n                \"type\": \"Action.OpenUrl\",\n                \"title\": \"View map\",\n                \"url\": \"${location.mapUrl}\"\n              }\n            ]\n  }\n</code></pre>"},{"location":"pages/extend-m365-copilot/05-add-adaptive-card/#step-4-add-an-adaptive-card-for-post-apibillhours-requests","title":"Step 4: Add an adaptive card for POST /api/billHours requests:","text":"<ul> <li>Locate the function postBillhours and after the <code>properties</code> node add below <code>static_template</code> node.</li> </ul> <pre><code>\"static_template\": {\n            \"type\": \"AdaptiveCard\",\n            \"$schema\": \"http://adaptivecards.io/schemas/adaptive-card.json\",\n            \"version\": \"1.5\",\n            \"body\": [\n              {\n                \"type\": \"TextBlock\",\n                \"text\": \"Project Status Summary\",\n                \"weight\": \"Bolder\",\n                \"size\": \"Large\",\n                \"separator\": true\n              },              \n              {\n                \"type\": \"Container\",\n                \"items\": [\n                  {\n                    \"type\": \"TextBlock\",\n                    \"text\": \"Client Name\",\n                    \"weight\": \"Bolder\",\n                    \"spacing\": \"Small\"\n                  },\n                  {\n                    \"type\": \"TextBlock\",\n                    \"text\": \"${if(results.clientName, results.clientName, 'N/A')}\",\n                    \"wrap\": true\n                  }\n                ]\n              },\n              {\n                \"type\": \"Container\",\n                \"items\": [\n                  {\n                    \"type\": \"TextBlock\",\n                    \"text\": \"Project Name\",\n                    \"weight\": \"Bolder\",\n                    \"spacing\": \"Small\"\n                  },\n                  {\n                    \"type\": \"TextBlock\",\n                    \"text\": \"${if(results.projectName, results.projectName, 'N/A')}\",\n                    \"wrap\": true\n                  }\n                ]\n              },  \n              {\n                \"type\": \"Container\",\n                \"items\": [\n                  {\n                    \"type\": \"TextBlock\",\n                    \"text\": \"Remaining Forecast\",\n                    \"weight\": \"Bolder\",\n                    \"spacing\": \"Small\"\n                  },\n                  {\n                    \"type\": \"TextBlock\",\n                    \"text\": \"${if(results.remainingForecast, results.remainingForecast, 'N/A')}\",\n                    \"wrap\": true\n                  }\n                ]\n              },           \n              {\n                \"type\": \"Container\",\n                \"items\": [\n                  {\n                    \"type\": \"TextBlock\",\n                    \"text\": \"Message\",\n                    \"weight\": \"Bolder\",\n                    \"spacing\": \"Small\"\n                  },\n                  {\n                    \"type\": \"TextBlock\",\n                    \"text\": \"${if(results.message, results.message, 'N/A')}\",\n                    \"wrap\": true\n                  }\n                ]\n              }\n            ]\n          }\n</code></pre>"},{"location":"pages/extend-m365-copilot/05-add-adaptive-card/#step-5-add-an-adaptive-card-for-post-apiassignconsultant-requests","title":"Step 5: Add an adaptive card for POST /api/assignConsultant requests:","text":"<ul> <li>Locate the function postAssignConsultant and after the <code>properties</code> node add below <code>static_template</code> node.</li> </ul> <pre><code> \"static_template\": {\n            \"type\": \"AdaptiveCard\",\n            \"$schema\": \"http://adaptivecards.io/schemas/adaptive-card.json\",\n            \"version\": \"1.5\",\n            \"body\": [\n              {\n                \"type\": \"TextBlock\",\n                \"text\": \"Project Overview\",\n                \"weight\": \"Bolder\",\n                \"size\": \"Large\",\n                \"separator\": true,\n                \"spacing\": \"Medium\"\n              },              \n              {\n                \"type\": \"Container\",\n                \"items\": [\n                  {\n                    \"type\": \"TextBlock\",\n                    \"text\": \"Client Name\",\n                    \"weight\": \"Bolder\",\n                    \"spacing\": \"Small\"\n                  },\n                  {\n                    \"type\": \"TextBlock\",\n                    \"text\": \"${if(results.clientName, results.clientName, 'N/A')}\",\n                    \"wrap\": true\n                  }\n                ]\n              },\n              {\n                \"type\": \"Container\",\n                \"items\": [\n                  {\n                    \"type\": \"TextBlock\",\n                    \"text\": \"Project Name\",\n                    \"weight\": \"Bolder\",\n                    \"spacing\": \"Small\"\n                  },\n                  {\n                    \"type\": \"TextBlock\",\n                    \"text\": \"${if(results.projectName, results.projectName, 'N/A')}\",\n                    \"wrap\": true\n                  }\n                ]\n              },\n              {\n                \"type\": \"Container\",\n                \"items\": [\n                  {\n                    \"type\": \"TextBlock\",\n                    \"text\": \"Consultant Name\",\n                    \"weight\": \"Bolder\",\n                    \"spacing\": \"Small\"\n                  },\n                  {\n                    \"type\": \"TextBlock\",\n                    \"text\": \"${if(results.consultantName, results.consultantName, 'N/A')}\",\n                    \"wrap\": true\n                  }\n                ]\n              },\n              {\n                \"type\": \"Container\",\n                \"items\": [\n                  {\n                    \"type\": \"TextBlock\",\n                    \"text\": \"Remaining Forecast\",\n                    \"weight\": \"Bolder\",\n                    \"spacing\": \"Small\"\n                  },\n                  {\n                    \"type\": \"TextBlock\",\n                    \"text\": \"${if(results.remainingForecast, results.remainingForecast, 'N/A')}\",\n                    \"wrap\": true\n                  }\n                ]\n              },\n              {\n                \"type\": \"Container\",\n                \"items\": [\n                  {\n                    \"type\": \"TextBlock\",\n                    \"text\": \"Message\",\n                    \"weight\": \"Bolder\",\n                    \"spacing\": \"Small\"\n                  },\n                  {\n                    \"type\": \"TextBlock\",\n                    \"text\": \"${if(results.message, results.message, 'N/A')}\",\n                    \"wrap\": true\n                  }\n                ]\n              }            \n            ]          \n          }\n\n</code></pre>"},{"location":"pages/extend-m365-copilot/05-add-adaptive-card/#exercise-3-test-the-plugin-in-copilot","title":"Exercise 3: Test the plugin in Copilot","text":"<p>Before you test the application, update the manifest version of your app package in the <code>appPackage\\manifest.json</code> file, follow these steps:</p> <ol> <li> <p>Open the <code>manifest.json</code> file located in the <code>appPackage</code> folder of your project.</p> </li> <li> <p>Locate the <code>version</code> field in the JSON file. It should look something like this: <code>json    \"version\": \"1.0.0\"</code></p> </li> <li> <p>Increment the version number to a small increment. For example, change it to: <code>json    \"version\": \"1.0.1\"</code></p> </li> <li> <p>Save the file after making the change.</p> </li> </ol>"},{"location":"pages/extend-m365-copilot/05-add-adaptive-card/#step-1-install-the-plugin","title":"Step 1: Install the plugin","text":"<p>Stop and restart your project to force it to re-deploy the application package. You will be brought into Microsoft Teams. Once you're back in Copilot, open the right flyout 1\ufe0f\u20e3 to show your previous chats and declarative agents and select the Trey Genie Local copilot 2\ufe0f\u20e3.</p> <p></p> <p></p>"},{"location":"pages/extend-m365-copilot/05-add-adaptive-card/#step-2-display-an-adaptive-card","title":"Step 2: Display an adaptive card","text":"<p>Now try a prompt such below</p> <p>what projects are we doing for adatum?</p> <p>Instead of just the text response you will also get a rich card with information of the project.</p> <p></p> <p>Now try a POST operation prompt such below</p> <p>please charge 1 hour to woodgrove bank in trey research</p> <p>Since the request requires Copilot to send some data via POST to the API plugin, you need to confirm that you want to allow Copilot to do so selecting the Confirm button.</p> <p></p> <p>Once confirmed, instead of just the text response you will also get a rich card with information of the project.</p> <p></p> <p>You can now test other prompts as well to see the improved responses from Microsoft 365 Copilot.</p> <p></p> <p>CONGRATULATIONS!</p> <p>You've completed adding adaptive card responses to your first API plugin. You are now ready to proceed to the next lab to add a declarative agent to the same API plugin. </p> <p></p>"},{"location":"pages/extend-m365-copilot/06-add-authentication/","title":"Lab E6 - Add Entra ID authentication","text":"<p>Do these labs if you want to build a Declarative agent where Microsoft 365 provides the AI model and orchestration</p> <ul> <li>E0 - Setup</li> <li>E1 - First declarative agent</li> <li>E2 - Build an API</li> <li>E3 - Add a declarative agent and API plugin</li> <li>E4 - Enhance the API and plugin</li> <li>E5 - Add adaptive cards</li> <li>E6 - Add Entra ID authentication</li> <li>Bonus - Add Graph Connector</li> </ul> Table of Contents <p>In this lab you will add authentication to your API plugin using OAuth 2.0 with Entra ID as the identity provider.</p> <p>Note</p> <p>This lab builds on the previous one, Lab E5. You should be able to continue working in the same folder for labs E2-E6, but solution folders have been provided for your reference. The finished solution for this lab is in the /src/extend-m365-copilot/path-e-lab06-add-authentication/trey-research-lab06-END folder.</p> <p>Note</p> <p>There are many detailed setup steps for Entra ID in this lab. A new version of Teams Toolkit is available which will automate many of these steps for you; we plan to provide a more streamlined version of the lab shortly.</p> <p>In this lab you will register Entra ID applications that are used to secure your plugin and API. Before you begin, choose a safe place for your app information. Here are the values you'll need to save:</p> <pre><code>API Base URL: \nAPI service Application (client) ID: \nAPI service Directory (tenant) ID: \nAuthorization endpoint: \nToken endpoint: \nAPI service client secret: \nAPI scope: \nPlugin service application (client) ID: \nPlugin service client secret: \n</code></pre>"},{"location":"pages/extend-m365-copilot/06-add-authentication/#exercise-1-set-up-a-persistent-developer-tunnel-optional","title":"Exercise 1: Set up a persistent developer tunnel (optional)","text":"<p>By default, Teams Toolkit creates a new developer tunnel - and thus a new URL for accesing your locally running API - every time you start the project. Normally this is fine because Teams Toolkit automatically updates the URL where needed, but since this lab will be a manual setup, you'll have to manually update the URL in Entra ID and in Teams Developer Portal each time you start the debugger. For that reason, you may wish to set up a persistent developer tunnel with a URL that does not change.</p> If you don't want to set up a persistent tunnel, open this note \u25b6\u25b6\u25b6 <p>You are free to skip this exercise and use the developer tunnel provided by Teams Toolkit. Once your project is running, you can copy this URL from the terminal tab 1\ufe0f\u20e3 by choosing the \"Start local tunnel\" terminal 2\ufe0f\u20e3; copy the Forwarding URL 3\ufe0f\u20e3. Note this URL will change every time you start the project, and you will need to manually update the app registration reply URL (exercise 2 step 1) and the Teams Developer Portal URL (exercise 5 step 1). </p>"},{"location":"pages/extend-m365-copilot/06-add-authentication/#step-1-install-the-developer-tunnel-cli","title":"Step 1: Install the developer tunnel CLI","text":"<p>Here are the command lines for installing the developer tunnel. Full instructions and download links for the Developer Tunnel are here.. </p> OS Command Windows <code>winget install Microsoft.devtunnel</code> Mac OS <code>brew install --cask devtunnel</code> Linux <code>curl -sL https://aka.ms/DevTunnelCliInstall | bash</code> <p>Tip</p> <p>You may have to restart your command line to update the file path before devtunnel commands will work</p> <p>Once you have it installed, you'll need to log in. You can use your Microsoft 365 account to log in.</p> <pre><code>devtunnel user login\n</code></pre> <p></p>"},{"location":"pages/extend-m365-copilot/06-add-authentication/#step-2-create-and-host-the-tunnel","title":"Step 2: Create and host the tunnel","text":"<p>Then you'll need to set up a persistent tunnel to the Azure Functions local port (7071). You can use these commands and substitute your own name instead of \"mytunnel\" if you wish.</p> <pre><code>devtunnel create mytunnel -a --host-header unchanged\ndevtunnel port create mytunnel -p 7071\ndevtunnel host mytunnel\n</code></pre> <p>The command line will display the connection information, such as:</p> <p></p> <p>Copy the \"Connect via browser\" URL and save it as the \"API Base URL\".</p> <p></p>"},{"location":"pages/extend-m365-copilot/06-add-authentication/#step-3-disable-the-dynamically-created-tunnel-in-your-project","title":"Step 3: Disable the dynamically created tunnel in your project","text":"<p>If your project is running locally, stop it. Then edit .vscode\\tasks.json and locate the \"Start Teams App task. Comment out the \"Start local tunnel\" depdendency and add its dependency, \"Start Azurite emulator\" instead. The resulting task should look like this:</p> <pre><code>{\n    \"label\": \"Start Teams App Locally\",\n    \"dependsOn\": [\n        \"Validate prerequisites\",\n        //\"Start local tunnel\",\n        \"Start Azurite emulator\",\n        \"Create resources\",\n        \"Build project\",\n        \"Start application\"\n    ],\n    \"dependsOrder\": \"sequence\"\n},\n</code></pre> <p></p>"},{"location":"pages/extend-m365-copilot/06-add-authentication/#step-4-manually-override-the-server-url","title":"Step 4: Manually override the server URL","text":"<p>Open env/.env.local and change the value of OPENAPI_SERVER_URL to the persistent tunnel URL.</p> <p></p>"},{"location":"pages/extend-m365-copilot/06-add-authentication/#exercise-2-register-an-entra-id-application-for-your-api","title":"Exercise 2: Register an Entra ID application for your API","text":""},{"location":"pages/extend-m365-copilot/06-add-authentication/#step-1-add-a-new-entra-id-app-registration","title":"Step 1: Add a new Entra ID app registration","text":"<p>Browse to the Entra ID admin center either via the Microsoft 365 Admin center or directly at https://entra.microsoft.com/. Make sure you are logged into your development tenant and not some other.</p> <p>Once you're there, click \"Identity\" 1\ufe0f\u20e3, then \"Applications\" 2\ufe0f\u20e3, and then \"App registrations\" 3\ufe0f\u20e3. Then click the \"+\" 4\ufe0f\u20e3 to add a new app registration.</p> <p></p> <p>Give your application a unique and descriptive name such as \"My API Service\" 1\ufe0f\u20e3. Under \"Supported account types\", select \"Accounts in this organizational directory only (Microsoft only - single tenant) 2\ufe0f\u20e3. Under \"Redirect URI (optional)\" select \"Web\" and enter the URL of your developer tunnel 3\ufe0f\u20e3. </p> <p>If you didn't make a persistent developer tunnel URL...</p> <p>...you will have to update the \"Redirect URI\" field with the new tunnel URL after each time you start your application in Teams Toolkit</p> <p>Then click \"Register\" 4\ufe0f\u20e3 to register your application.</p> <p></p> <p></p>"},{"location":"pages/extend-m365-copilot/06-add-authentication/#step-2-copy-application-info-to-a-safe-place","title":"Step 2: Copy application info to a safe place","text":"<p>Copy the Application ID (also called the Client ID) 1\ufe0f\u20e3 and the Directory ID (also called the Tenant ID) 2\ufe0f\u20e3 to a safe place; you'll need them later. Then click on the Endpoints button 3\ufe0f\u20e3 to open the Endpoints flyout.</p> <p></p> <p>Now copy the two endpoint URLs with name \"OAuth 2.0 authorization endpoint (v2)\" 1\ufe0f\u20e3 and \"OAuth 2.0 token endpoint (v2)\" 2\ufe0f\u20e3 and save them in the same safe place.</p> <p></p> <p></p>"},{"location":"pages/extend-m365-copilot/06-add-authentication/#step-3-create-client-secret","title":"Step 3: Create client secret","text":"<p>Next, navigate to \"Certificates &amp; secrets\" 1\ufe0f\u20e3 and click \"+ New client secret\" 2\ufe0f\u20e3. Give your secret a name and choose a duration, then select the Add button. The secret will be displayed; this is your one and only chance to view it as secrets are only displayed in the portal when they're first created. Copy the secret 3\ufe0f\u20e3 to your safe storage place.</p> <p></p> <p></p>"},{"location":"pages/extend-m365-copilot/06-add-authentication/#step-4-expose-an-api-scope","title":"Step 4: Expose an API Scope","text":"<p>In order to validate calls to your API, you need to expose an API Scope, which represents the permission to call the API. Though these could be very specific - allowing permission to do specific operations via the API - in this case we'll set up a simple scope called \"access_as_user\".</p> <p>First, browse to \"Expose an API\" 1\ufe0f\u20e3 and, next to \"Application ID URI\" click \"Add\" 2\ufe0f\u20e3. A flyout will open on the right; you can stay with the default value which is api://&lt;your application (client) ID&gt;. Go ahead and click \"Save and continue\" 3\ufe0f\u20e3 to proceed.</p> <p></p> <p>Under \"Add a scope\" enter \"access_as_user\" as the scope name 1\ufe0f\u20e3. Fill in the remaining fields as follows:</p> Field Value Who can consent? Admins and users Admin consent display name Access My API as the user Admin consent description Allows an API to access My API as a user User consent display name Access My API as you User consent description Allows an app to access My API as you State Enabled <p>When you're done, click \"Add Scope\" 2\ufe0f\u20e3.</p> <p></p> <p></p>"},{"location":"pages/extend-m365-copilot/06-add-authentication/#step-5-save-the-api-scope","title":"Step 5: Save the API Scope","text":"<p>Copy the scope to your safe place as the \"API Scope\".</p> <p></p> <p></p>"},{"location":"pages/extend-m365-copilot/06-add-authentication/#exercise-3-register-an-entra-id-application-for-your-plugin","title":"Exercise 3: Register an Entra ID application for your plugin","text":"<p>Now that you've registered an API for the application, it's time to register the plugin itself.</p> <p>About two Entra ID app registrations</p> <p>This lab is a guide on how to adapt assuming you already have a registered application for your API and want to integrate it into the agent as a plugin. That is why we have two app registrations.  When creating an API from scratch, you may not always need two app registrations to implement OAuth securely to plug into the agent. Instead, you can use an existing app registration. Here is how you can do it in one single app registration in this learn module</p>"},{"location":"pages/extend-m365-copilot/06-add-authentication/#step-1-register-the-plugin","title":"Step 1: Register the plugin","text":"<p>Return to the \"App registrations\" section and register a second application. This time call it \"My API Plugin\" 1\ufe0f\u20e3, and once again set \"Supported account types\" to \"Accounts in this organizational directory only\" 2\ufe0f\u20e3.</p> <p>Under \"Redirect URL\" select \"Web\", and this time set it to <code>https://teams.microsoft.com/api/platform/v1.0/oAuthRedirect</code> 3\ufe0f\u20e3. This is the Teams location that will handle completed logins to the API Plugin application.</p> <p>Click the \"Register\" button 4\ufe0f\u20e3 to complete the registration.</p> <p></p> <p>As before, view the app's \"Overview\" page and save the Application (client) ID for the API Plugin app.</p> <p></p>"},{"location":"pages/extend-m365-copilot/06-add-authentication/#step-2-create-a-client-secret","title":"Step 2: Create a client secret","text":"<p>As before, create a client secret and save it under \"Plugin service client secret\" in your safe location.</p> <p></p>"},{"location":"pages/extend-m365-copilot/06-add-authentication/#step-3-grant-permission","title":"Step 3: Grant permission","text":"<p>Your plugin needs to call your API service, so naturally it needs permission to do that. Begin by navigating to \"API permissions\". Then click the \"APIs my organization uses\" tab 1\ufe0f\u20e3 and search for your API service 2\ufe0f\u20e3. Select your API service from the results 3\ufe0f\u20e3.</p> <p></p> <p>Now you should see your API service application. Select the \"access_as_user\" permission and click \"Add permission\".</p> <p></p> <p></p>"},{"location":"pages/extend-m365-copilot/06-add-authentication/#exercise-4-update-the-api-app-registration-with-the-plugin-application-id","title":"Exercise 4: Update the API app registration with the plugin application ID","text":""},{"location":"pages/extend-m365-copilot/06-add-authentication/#step-1-add-the-plugin-apps-id-to-the-api-service-app","title":"Step 1: Add the Plugin app's ID to the API service app","text":"<p>Now the API Service application needs to allow the API Plugin application to issue tokens for it. To enable this, return to the App Registration for your API Service application. Select \"Manifest\" and find the entry for <code>knownClientApplications</code> 1\ufe0f\u20e3. Add your My Plugin App's client ID to this entry as follows:</p> <pre><code>\"knownClientApplications\": [\n    \"&lt;your-plugin-client-id&gt;\"\n]\n</code></pre> <p>Remember to click \"Save\" 2\ufe0f\u20e3 when you're done.</p> <p></p> <p></p>"},{"location":"pages/extend-m365-copilot/06-add-authentication/#exercise-5-register-the-oauth-information-in-the-teams-developer-portal","title":"Exercise 5: Register the OAuth information in the Teams Developer Portal","text":"<p>Now you're apps are all set up, but Microsoft 365 doesn't know anything about it. It wouldn't be safe to store secrets in the app manifest, so Teams has set up a place in the Teams Developer Portal to safely store this information. In this exercise you'll use the Teams Developer Portal to register your OAuth client application so Copilot can authenticate users for it.</p>"},{"location":"pages/extend-m365-copilot/06-add-authentication/#step-1-create-a-new-oauth-client-registration","title":"Step 1: Create a new OAuth client registration","text":"<p>Browse to the Teams Developer Portal at https://dev.teams.microsoft.com. Select \"Tools\" 1\ufe0f\u20e3 and then \"OAuth client registration\" 2\ufe0f\u20e3.</p> <p></p> <p>Click \"Register client\", if you don't have any already registered client application, or \"+ New OAuth client registration\", if you already have existing client applications, and fill in the form. Several of the fields are from your safely stored information you've been building up over the last few exercises.</p> Field Value Name Choose a name you'll remember Base URL your API service Base URL Restrict usage by org select \"My organization only\" Restrict usage by app select \"Any Teams app\" Client ID Your Plugin Application (client) ID Client secret Your Plugin Application client secret Authorization endpoint Your authorization endpoint (same for both API Service and API Plugin apps) Token endpoint Your token endpoint (same for both API Service and API Plugin apps) Refresh endpoint Your token endpoint (same for both API Service and API Plugin apps) API scope Your API Service application's scope <p></p> <p>If you didn't make a persistent developer tunnel URL...</p> <p>...you will have to update the \"Base URL\" field with your new tunnel URL each time you start your application in Teams Toolkit</p> <p></p>"},{"location":"pages/extend-m365-copilot/06-add-authentication/#step-2-save-your-oauth-registration-id","title":"Step 2: Save your OAuth registration ID","text":"<p>The portal will display your OAuth client registration ID. Save this for the next step.</p> <p></p>"},{"location":"pages/extend-m365-copilot/06-add-authentication/#exercise-6-update-your-application-package","title":"Exercise 6: Update your application package","text":""},{"location":"pages/extend-m365-copilot/06-add-authentication/#step-1-update-the-plugin-file","title":"Step 1: Update the Plugin file","text":"<p>Open your working folder in Visual Studio Code. In the appPackage folder, open the trey-plugin.json file. This is where information is stored that Copilot needs, but is not already in the Open API Specification (OAS) file.</p> <p>Under <code>Runtimes</code> you will find an <code>auth</code> property with <code>type</code> of <code>\"None\"</code>, indicating the API is currently not authenticated. Change it as follows to tell Copilot to authenticate using the OAuth settings you saved in the vault.</p> <pre><code>\"auth\": {\n  \"type\": \"OAuthPluginVault\",\n  \"reference_id\":  \"${{OAUTH_CLIENT_REGISTRATION_ID}}\"\n},\n</code></pre> <p>Then add this line to your env/.env.local file:</p> <pre><code>OAUTH_CLIENT_REGISTRATION_ID=&lt;registration id you saved in the previous exercise&gt;\n</code></pre> <p>The next time you start and prompt your API plugin, it should prompt you to sign in. However we've done nothing to secure the application; anyone on the Internet can call it! In the next step you'll update the application code to check for a valid login and access the API as the actual Microsoft 365 user instead of \"Avery Howard\" (which is a name from Microsoft's fictitious name generator).</p> <p></p>"},{"location":"pages/extend-m365-copilot/06-add-authentication/#exercise-7-update-the-application-code","title":"Exercise 7: Update the application code","text":""},{"location":"pages/extend-m365-copilot/06-add-authentication/#step-1-install-the-jwt-validation-library","title":"Step 1: Install the JWT validation library","text":"<p>From a command line in your working directory, type:</p> <pre><code>npm i jwt-validate\n</code></pre> <p>This will install a library for validating the incoming Entra ID authorization token.</p> <p>Warning</p> <p>Microsoft does not provide a supported library for validating Entra ID tokens in NodeJS, but instead provides this detailed documentation on how to write your own. Another useful article is also available from Microsoft MVP Andrew Connell. This lab uses a community provided library written by Waldek Mastykarz, which is intended to follow this guidance. Note that this library is not supported by Microsoft and is under an MIT License, so use it at your own risk.</p> <p></p>"},{"location":"pages/extend-m365-copilot/06-add-authentication/#step-2-add-environment-variables-for-your-api","title":"Step 2: Add environment variables for your API","text":"<p>In the env folder in your working directory, open env.local and add these lines for your API Service app's client ID and tenant ID.</p> <pre><code>API_APPLICATION_ID=&lt;your-api-service-client-id&gt;\nAPI_TENANT_ID=&lt;your-tenant-id&gt;\n</code></pre> <p>To make these values available inside your code running in Teams Toolkit, you also need to update the teamsapp.local.yml file in the root of your working folder. Look for the comment \"Generate runtime environment variables\" and add the new values under the STORAGE_ACCOUNT_CONNECTION_STRING:</p> <pre><code>  - uses: file/createOrUpdateEnvironmentFile\n    with:\n      target: ./.localConfigs\n      envs:\n        STORAGE_ACCOUNT_CONNECTION_STRING: ${{SECRET_STORAGE_ACCOUNT_CONNECTION_STRING}},\n        API_APPLICATION_ID: ${{API_APPLICATION_ID}}\n        API_TENANT_ID: ${{API_TENANT_ID}}\n</code></pre> <p></p>"},{"location":"pages/extend-m365-copilot/06-add-authentication/#step-3-update-the-identity-service","title":"Step 3: Update the identity service","text":"<p>In the src/services folder, open IdentityService.ts.  At the top of the file along with the other <code>import</code> statements, add this one:</p> <pre><code>import { TokenValidator, ValidateTokenOptions, getEntraJwksUri } from 'jwt-validate';\n</code></pre> <p>Then, right under the <code>class Identity</code> statement, add this line:</p> <pre><code>    private validator: TokenValidator;\n</code></pre> <p>Now look for the comment</p> <pre><code>// ** INSERT REQUEST VALIDATION HERE (see Lab E6) **\n</code></pre> <p>Replace the comment with this code:</p> <pre><code>// Try to validate the token and get user's basic information\ntry {\n    const { API_APPLICATION_ID, API_TENANT_ID } = process.env;\n    const token = req.headers.get(\"Authorization\")?.split(\" \")[1];\n    if (!token) {\n        throw new HttpError(401, \"Authorization token not found\");\n    }\n\n    // create a new token validator for the Microsoft Entra common tenant\n    if (!this.validator) {\n        // We need a new validator object which we will continue to use on subsequent\n        // requests so it can cache the Entra ID signing keys\n        // For multitenant, use:\n        // const entraJwksUri = await getEntraJwksUri();\n        const entraJwksUri = await getEntraJwksUri(API_TENANT_ID);\n        this.validator = new TokenValidator({\n            jwksUri: entraJwksUri\n        });\n        console.log (\"Token validator created\");\n    }\n\n    // Use these options for single-tenant applications\n    const options: ValidateTokenOptions = {\n        audience: `api://${API_APPLICATION_ID}`,\n        issuer: `https://sts.windows.net/${API_TENANT_ID}/`,\n        // NOTE: If this is a multi-tenant app, look for \n        // issuer: \"https://sts.windows.net/common/\",\n        // Also you may wish to manage a list of allowed tenants\n        // and test them as well\n        //   allowedTenants: [process.env[\"AAD_APP_TENANT_ID\"]],\n        scp: [\"access_as_user\"]\n    };\n\n    // validate the token\n    const validToken = await this.validator.validateToken(token, options);\n\n    userId = validToken.oid;\n    userName = validToken.name;\n    userEmail = validToken.upn;\n    console.log(`Request ${this.requestNumber++}: Token is valid for user ${userName} (${userId})`);\n}\ncatch (ex) {\n    // Token is missing or invalid - return a 401 error\n    console.error(ex);\n    throw new HttpError(401, \"Unauthorized\");\n}\n</code></pre> <p>Learn from the code</p> <p>Have a look at the new source code. First, it obtains the token from the <code>Authorization</code> header in the HTTPs request. This header contains the word \"Bearer\", a space, and then the token, so a JavaScript <code>split(\" \")</code> is used to obtain only the token.</p> <p>Also note that the code will throw an exception if authentication should fail for any reason; the Azure function will then return the appropriate error.</p> <p>The code then creates a validator for use with the <code>jwks-validate</code> library. This call reads the latest private keys from Entra ID, so it is an async call that may take some time to run.</p> <p>Next, the code sets up a <code>ValidateTokenOptions</code> object. Based on this object, in addition to validating that the token was signed with Entra ID's private key, the library will validate that:</p> <ul> <li> <p>the audience must be the same as the API service app URI; this ensures that the token is intended for our web service and no other</p> </li> <li> <p>the issuer must be from the security token service for our tenant</p> </li> <li> <p>the scope must match the scope defined in our app registration, which is <code>\"access_as_user\"</code>.</p> </li> </ul> <p>If the token is valid, the library returns an object with all the \"claims\" that were inside, including the user's unique ID, name, and email. We will use these values instead of relying on the fictitious \"Avery Howard\".</p> <p>If your app will be multi-tenant</p> <p>Check the comments in the above code for notes about validating tokens for a multi-tenant app</p> <p>Once the code has a <code>userId</code> it will look for a Consultant record for the user. This was hard-coded to Avery Howard's ID in the original code. Now it will use the user ID for the logged in user, and create a new Consultant record if it doesn't find one in the database.</p> <p>As a result, when you run the app for the first time, it should create a new Consultant for your logged-in user with a default set of skills, roles, etc. If you want to change them to make your own demo, you can do that using the Azure Storage Explorer</p> <p></p> <p>Note that project assignments are stored in the <code>Assignment</code> table and reference the project ID and the assigned consultant's consultant ID.</p> <p></p>"},{"location":"pages/extend-m365-copilot/06-add-authentication/#exercise-8-test-the-application","title":"Exercise 8: Test the application","text":"<p>Before you test the application, update the manifest version of your app package in the <code>appPackage\\manifest.json</code> file, follow these steps:</p> <ol> <li> <p>Open the <code>manifest.json</code> file located in the <code>appPackage</code> folder of your project.</p> </li> <li> <p>Locate the <code>version</code> field in the JSON file. It should look something like this: <code>json    \"version\": \"1.0.0\"</code></p> </li> <li> <p>Increment the version number to a small increment. For example, change it to: <code>json    \"version\": \"1.0.1\"</code></p> </li> <li> <p>Save the file after making the change.</p> </li> </ol>"},{"location":"pages/extend-m365-copilot/06-add-authentication/#step-1-restart-the-application","title":"Step 1: (Re)start the application","text":"<p>If your app is still running from an earlier lab, stop it to force it to re-create the application package.</p> <p>Then press F5 to run the application again, and install it as before.</p> <p>Prompt the plugin, \"What Trey projects am I assigned to?\". You may see a confirmation card asking if it's OK to call your API. No authentication is happening here; click \"Allow Once\" to proceed.</p> <p></p> <p>The confirmation card will be replaced with a login card. Click \"Sign in to Trey\" to sign in. At first you should see a pop-up window asking you to log in and to consent to permissions. On subsequent vists this may be hidden as your credentials have been cached by Entra ID in your local browser.</p> <p></p> <p>There are cases where your admin has not allowed you to consent as a user and may see something like below: </p> <p>This is because the admin has restricted applications to allow user consent tenant wide. In this case, you have to request admin to manually grant global consent for all users for the plugin API registration as below:</p> <p></p> <p>The login card should be replaced by Copilot's response to your prompt. Since you were just added to the database, you aren't assigned to any projects.</p> <p>Since you were just added to the database, you're not assigned to any projects.</p> <p></p> <p>Ask Copilot to add you to the Woodgrove project. Copilot will press you for details if you forgot to include any required values.</p> <p></p> <p>Now check out your default skills and confirm the project assignment by asking, \"What are my skills and what projects am I assigned to?\"</p> <p></p> <p></p> <p>CONGRATULATIONS!</p> <p>You have completed lab E6, Add Authentication!</p> <p></p>"},{"location":"pages/extend-m365-copilot/EB-add-graphconnector/","title":"Bonus Lab - Add Knowldege capability to Trey Genie using a Microsoft Graph connector","text":"<p>Do these labs if you want to build a Declarative agent where Microsoft 365 provides the AI model and orchestration</p> <ul> <li>E0 - Setup</li> <li>E1 - First declarative agent</li> <li>E2 - Build an API</li> <li>E3 - Add a declarative agent and API plugin</li> <li>E4 - Enhance the API and plugin</li> <li>E5 - Add adaptive cards</li> <li>E6 - Add Entra ID authentication</li> <li>Bonus - Add Graph Connector</li> </ul> Table of Contents <p>In this lab you will learn how to add your own data into the Microsoft Graph to be then organically utilised by the declarative agent as it's own knowledge.  In the process you will learn all how to deploy a Microsoft Graph connector and use the connector in Trey Genie declarative agent. </p> <p>Note</p> <p>This lab builds on the Lab E4. You should be able to continue working in the same folder for labs E2-E6, but solution folders have been provided for your reference. The finished Trey Genie declarative solution for this lab is in the /src/extend-m365-copilot/path-e-bonus-gc-lab/trey-research-labEB-END folder. The Microsoft Graph connector source code is in /src/extend-m365-copilot/path-e-bonus-gc-lab/trey-feedback-connector folder.</p> <p>In this lab you will learn to:</p> <ul> <li>deploy a Microsoft Graph connector of your own data into Microsoft Graph and have it power various Microsoft 365 experiences</li> <li>customise the trey genie declarative agent to use the Graph connector as a capability to extend its knowledge</li> <li>learn how to run and test your app </li> </ul> <p>Prerequisites: Tenant Admin Access</p> <p>Additonal prerequisites are needed to run this lab. You will need tenant administrator privileges as Microsoft Graph connectors use app-only authentication to access the connector APIs.</p> <p>Prerequisites: Azure Functions Visual Studio Code extension</p> <ul> <li>Azure Functions Visual Studio Code extension</li> </ul>"},{"location":"pages/extend-m365-copilot/EB-add-graphconnector/#exercise-1-deploy-graph-connector","title":"Exercise 1 : Deploy Graph Connector","text":""},{"location":"pages/extend-m365-copilot/EB-add-graphconnector/#step-1-download-sample-project","title":"Step 1: Download sample project","text":"<ul> <li>In your browser, go to this link</li> <li>Extract the trey-feedback-connector.zip file</li> </ul> <p>Note</p> <p>The extracted folder of the sample project is trey-feedback-connector. It has a folder called content which consist of feedback files from various clients for consultants at Trey Research. The files are all created by AI and are for demo purposes only.  The aim is to deploy these external files into Microsoft 365 data to be available as knowledge base for our declarative agent Trey Genie. </p> <p></p>"},{"location":"pages/extend-m365-copilot/EB-add-graphconnector/#step-2-create-external-connection","title":"Step 2: Create external connection","text":"<ul> <li>Open the folder trey-feedback-connector in Visual Studio Code</li> <li>In the Activity Bar of Visual Studio Code, open the Teams Toolkit extension</li> <li>Create a file .env.local in the env folder of the root folder trey-feedback-connector</li> <li>Paste below contents in the newly created file</li> </ul> <pre><code>APP_NAME=TreyFeedbackConnectorApp\nCONNECTOR_ID=tfcfeedback\nCONNECTOR_NAME=Trey Feedback Connector\nCONNECTOR_DESCRIPTION=The Trey Feedback Connector seamlessly integrate feedback data from various clients about consultants in Trey Research.\nCONNECTOR_BASE_URL=https://localhost:3000/\n\n</code></pre> <ul> <li>Select F5, which will then kick off the creation of the Entra ID app registration needed for your connector API to authenicate and load data into Microsoft Graph </li> <li>In the <code>Terminal</code> window, for the <code>func:host start</code> Task, you will notice below link provided. Using this link you can grant the app-only permission for the Entra ID app</li> </ul> <ul> <li>Copy the link and open in a browser where you are logged in as the tenant admin for the Microsoft 365 tenant. </li> <li>Grant the required permissions to the app using the Grant admin consent button.</li> </ul> <ul> <li>Once granted, the connector creates an external connection, provisions the schema and ingests the sample contents in the content folder to your Microsoft 365 tenant. This takes a while, so keep the project running. </li> <li>Once all files in the content folder are loaded, the debugger can be stopped. </li> <li>You can also close this connector project folder.</li> </ul>"},{"location":"pages/extend-m365-copilot/EB-add-graphconnector/#step-3-test-the-connector-data-in-microsoft365-app","title":"Step 3: Test the connector data in Microsoft365 app","text":"<p>Now that your data is loaded into Microsoft 365 tenant, let's test if a regular search is picking up the contents in Microsoft365.com.</p> <p>Go to https://www.microsoft365.com/ and in the search box above, type <code>thanks Avery</code>.</p> <p>You will see the results as below from the external connection which are basically the clients' feedback for consultant Avery Howard.</p> <p></p> <p>Now that your data is part of Microsoft 365 data or Microsoft Graph, let's go ahead and add this connector data as focused knowledge for our declarative agent for Trey Research called Trey Genie.</p> <p></p>"},{"location":"pages/extend-m365-copilot/EB-add-graphconnector/#exercise-2-add-graph-connector-to-declarative-agent","title":"Exercise 2 : Add Graph Connector to Declarative Agent","text":"<p>In the previous exercise, we established a new external connection to load our data into the Microsoft 365 tenant. Next, we will integrate this connector into our declarative agent to provide focused knowledge on Trey Research consultants.</p>"},{"location":"pages/extend-m365-copilot/EB-add-graphconnector/#step-1-get-the-connection-id-of-the-microsoft-graph-connector","title":"Step 1: Get the connection id of the Microsoft Graph Connector","text":"<p>In exercise 1, we added the environment variable in the .env.local file which has the configuration values for the Graph connector.  The connection id value we gave is <code>tfcfeedback</code>. When Teams Toolkit deploys this connector it will add a suffix of its environment value like <code>local</code> to the connection id. Hence we can infer the connection id is <code>tfcfeedbacklocal</code>. But the most straightforward way to get the Graph connector id is to use Graph Explorer.</p> <ul> <li>Browse to Microsoft Graph Explorer and sign in with your admin account.</li> <li>Select your user avatar in the upper right corner and select Consent to permissions.</li> <li>Search for <code>ExternalConnection.Read.All</code> and select Consent for that permission. Follow the prompts to grant consent.</li> <li>Enter <code>https://graph.microsoft.com/v1.0/external/connections?$select=id,name</code> in the request field and select Run query.</li> <li>Locate the connector you want and copy its id property.</li> </ul> <p></p> <p></p>"},{"location":"pages/extend-m365-copilot/EB-add-graphconnector/#step-2-update-declarative-agent-manifest","title":"Step 2: Update declarative agent manifest","text":"<p>Let's now resume with our declarative agent from Lab 4. If you have it open, then continue or go to the finished lab 4 solution in this folder /src/extend-m365-copilot/path-e-lab04-enhance-api-plugin/trey-research-lab04-END.</p> <ul> <li>Open the lab 4 solution for Trey Genie declarative agent.</li> <li>Go to appPackage\\trey-declarative-agent.json</li> <li>Add a new item into the <code>capabilities</code> array as below and save</li> </ul> <pre><code> {\n            \"name\": \"GraphConnectors\",\n            \"connections\": [\n                {\n                    \"connection_id\": \"tfcfeedbacklocal\"\n                }\n            ]\n}\n</code></pre> <p>Now the capability is added, it's time to test.</p> <p></p>"},{"location":"pages/extend-m365-copilot/EB-add-graphconnector/#exercise-3-test-the-plugin-in-copilot","title":"Exercise 3: Test the plugin in Copilot","text":"<p>Before you test the application, update the manifest version of your app package in the <code>appPackage\\manifest.json</code> file, follow these steps:</p> <ol> <li> <p>Open the <code>manifest.json</code> file located in the <code>appPackage</code> folder of your project.</p> </li> <li> <p>Locate the <code>version</code> field in the JSON file. It should look something like this: <code>json    \"version\": \"1.0.0\"</code></p> </li> <li> <p>Increment the version number to a small increment. For example, change it to: <code>json    \"version\": \"1.0.1\"</code></p> </li> <li> <p>Save the file after making the change.</p> </li> </ol>"},{"location":"pages/extend-m365-copilot/EB-add-graphconnector/#step-1-start-the-application","title":"Step 1: Start the application","text":"<p>This update ensures that the platform detects the changes and properly applies the latest version of your app.</p> <p>Start your project to force it to re-deploy the application package by selecting F5. You will be brought into Microsoft Teams. Once you're back in Copilot, open the right flyout 1\ufe0f\u20e3 to show your previous chats and agents and select the Trey Genie Local agent 2\ufe0f\u20e3.</p> <p></p> <p></p>"},{"location":"pages/extend-m365-copilot/EB-add-graphconnector/#step-2-test-knowledge-in-copilot","title":"Step 2: Test knowledge in Copilot","text":"<p>In the immersive experience of Trey Genie, use below prompts and test them</p> <ul> <li>Can you check for any feedback from clients for consultants Trey Research</li> <li>How did Avery's guidance specifically streamline the product development process?</li> </ul> <p></p> <p></p> <p>CONGRATULATIONS!</p> <p>You have completed lab Graph connector lab, Well done!</p> <p></p>"},{"location":"pages/extend-message-ext/","title":"Extend Teams Message Extension as a plugin","text":"<p>Disclaimer</p> <p>These samples and labs are intended for instructive and demonstration purposes and are not intended for use in production. Do not put them into production without upgrading them to production quality.</p> <p>In this path of Extend, you will learn how to use Teams Message Extensions as plugins in Microsoft Copilot for Microsoft 365. You will start with a working message extension sample available in the sample source code and run it as a plugin in Microsoft Copilot for Microsoft 365. You will also enhance the code to add some extra features. The source code utilizes the Northwind Database, providing you with the necessary enterprise data to test your plugin like in a real world scenario.</p> <p>In this lab, Northwind operates as a specialty foods e-commerce business located in Walla Walla, Washington. You will be working with the Northwind Inventory application, which provides access to product inventory and financial data.</p> <p>Here are the labs</p> <ul> <li>Lab M0 - Prerequisites Set up your development environment</li> <li>Lab M1 - Get to know Northwind message extension Get to know Northwind message extension</li> <li>Lab M2 - Run app in Microsoft Copilot for Microsoft 365 Run Northwind message extension as a plugin in Microsoft Copilot for Microsoft 365</li> <li>Lab M3 - Enhance plugin with new search command Enhance the plugin with a new search command</li> <li>Lab M4 - Add authentication Secure your plugin in Authentication</li> <li>Lab M5 - Enhance plugin with an action command Enhance the plugin with a new action command</li> </ul>"},{"location":"pages/extend-message-ext/#start-here-with-lab-m0-where-youll-set-up-development-your-environment","title":"Start here with Lab M0, where you'll set up development your environment.","text":""},{"location":"pages/extend-message-ext/00-prerequisites/","title":"Lab M0 - Prerequisites","text":"<p>In this lab, you will set up the development environment to build, test, and deploy the plugins that will extend the capabilities of Copilot for Microsoft 365.</p> Navigating the Extend Teams Message Extension labs (Extend Path) <ul> <li>Lab M0 - Prerequisites (\ud83d\udccdYou are here)</li> <li>Lab M1 - Get to know Northwind message extension </li> <li>Lab M2 - Run app in Microsoft Copilot for Microsoft 365 </li> <li>Lab M3 - Enhance plugin with new search command</li> <li>Lab M4 - Add authentication </li> <li>Lab M5 - Enhance plugin with an action command </li> </ul> <p>In this lab you will learn:</p> <ul> <li>How to set up your developer tenant for the entire lab exercises</li> <li>How to install and configure Teams toolkit for Visual Studio Code and other tools</li> <li>How to set up your development environment with a base project</li> </ul> <p>Attention</p> <p>To extend Copilot for Microsoft 365, you must ensure that your development environment meets the requirements.</p>"},{"location":"pages/extend-message-ext/00-prerequisites/#exercise-1-enable-teams-application-uploads","title":"Exercise 1: Enable Teams application uploads","text":"<p>You will need a Microsoft work or school account with permissions to upload custom Teams applications. </p> <p>By default, end users can't upload applications directly; instead an administrator needs to upload them into the enterprise app catalog. In this step you will ensure your tenant is set up for direct uploads by Teams Toolkit.</p> <ul> <li>Sign in to Microsoft Teams admin center with your admin credentials.</li> <li>Go to Teams apps &gt; Setup Policies &gt; Global.</li> <li>Toggle Upload custom apps to the \"On\" position.</li> <li>Select \"Save\". Your test tenant can permit custom app upload.</li> </ul> <p>The change can take up to 24 hours to take effect, but usually it's much faster.</p>"},{"location":"pages/extend-message-ext/00-prerequisites/#exercise-2-install-teams-toolkit-and-prerequisites","title":"Exercise 2: Install Teams Toolkit and prerequisites","text":"<p>You can complete these labs on a Windows, Mac, or Linux machine, but you do need the ability to install the prerequisites. If you are not permitted to install applications on your computer, you'll need to find another machine (or virtual machine) to use throughout the workshop.</p>"},{"location":"pages/extend-message-ext/00-prerequisites/#step-1-install-visual-studio-code","title":"Step 1: Install Visual Studio Code","text":"<p>It should be no surprise that Teams Toolkit for Visual Studio Code requires Visual Studio Code! You can download it here: Visual Studio Code.</p>"},{"location":"pages/extend-message-ext/00-prerequisites/#step-2-install-nodejs","title":"Step 2: Install NodeJS","text":"<p>Node.js is a runtime that allows you to run JavaScript on your computer. It uses the open-source V8 engine, which is used in popular web browsers like Google Chrome (and the Chromium-based version of Microsoft Edge). You will need Node.js to run the web server code used throughout this workshop.</p> <p>Browse to https://nodejs.org/en/download/ and install version 18 or 16 for your operating system. This lab has been tested using NodeJS version 18.16.0. If you already have another version of NodeJS installed, you may want to set up the Node Version Manager (or this variation for Microsoft Windows), which allows you to easily switch Node versions on the same computer.</p>"},{"location":"pages/extend-message-ext/00-prerequisites/#step-3-install-tools","title":"Step 3: Install Tools","text":"<p>These labs are based on the latest general available version of Teams Toolkit. Follow the steps as shown in the screen shot below.</p> <p>1\ufe0f\u20e3 Open Visual Studio Code and click on the Extensions toolbar button</p> <p>2\ufe0f\u20e3 Search for \"Teams\" and locate Teams Toolkit</p> <p>3\ufe0f\u20e3 Click \"Install\"</p> <p></p> <p>If you have Teams Toolkit installed but hidden</p> <p>If you previously installed Teams Toolkit, and then hid it on the Visual Studio sidebar, you might wonder why you can't see it. Right-click on the left sidebar and check off Teams Toolkit to bring it back into view.</p> <p>Azure Storage Explorer</p> <p>Azure Storage Explorer (OPTIONAL) - Download this if you want to view and edit the Northwind database used in this sample</p>"},{"location":"pages/extend-message-ext/00-prerequisites/#exercise-3-set-up-your-project-and-developer-tenant-data","title":"Exercise 3 - Set up your project and developer tenant data","text":""},{"location":"pages/extend-message-ext/00-prerequisites/#step-1-download-the-sample-code","title":"Step 1 - Download the sample code","text":"<p>In a web browser navigate to this link. You will get a prompt to download a ZIP file called Northwind.zip. </p> <ul> <li> <p>Save the ZIP file on your computer. </p> </li> <li> <p>Extract the ZIP file contents, it will extract into a folder called Northwind . </p> </li> <li> <p>Open Visual Studio Code. </p> </li> </ul> <p>In Visual Studio Code: </p> <ul> <li> <p>From the \"File\" menu choose the \"Open folder\"... option </p> </li> <li> <p>Open the folder Northwind.</p> </li> </ul> <p>These labs will refer to this Northwind folder as your \"root folder\" or \"working folder\" since this is where you'll be working.</p>"},{"location":"pages/extend-message-ext/00-prerequisites/#step-2-set-up-accounts-in-teams-toolkit","title":"Step 2 - Set up accounts in Teams Toolkit","text":"<p>Now select the Teams Toolkit icon in the left 1\ufe0f\u20e3 . If it offers options to create a new project, you're probably in the wrong folder. In the Visual Studio Code file menu select \"Open Folder\" and directly open the Northwind folder. You should see sections for Accounts, Environment, etc. as shown below.</p> <p>Under \"Accounts\" click \"Sign in to Microsoft 365\" 2\ufe0f\u20e3 and log in with your own Microsoft 365 account.</p> <p></p> <p>A browser window will pop up and offer to log into Microsoft 365. When it says \"You are signed in now and close this page\", please do so.</p> <p>Now verify that the \"Custom App Upload Enabled\" checker has a green checkmark. If it doesn't, that means that your user account doesn't have permission to upload Teams applications. Follow steps in Exercise 1 of this lab. </p> <p>Now verify that the \"Copilot Access Enabled\" checker has a green checkmark. If it doesn't, that means that your user account license for Copilot. This is required to continue the labs.</p> <p></p>"},{"location":"pages/extend-message-ext/00-prerequisites/#step-3-copy-sample-documents-to-your-test-users-onedrive","title":"Step 3 - Copy sample documents to your test user's OneDrive","text":"<p>The sample application includes some documents for Copilot to reference during the labs. In this step you will copy these files to your user's OneDrive so Copilot can find them. Depending on how the tenant is set up, you may be asked to set up multi-factor authentication as part of this process.</p> <p>Open your browser and browse to Microsoft 365 (https://www.office.com/). Log in using the Microsoft 365 account you will be using throughout the lab. You may be asked to set up multi-factor authentication.</p> <p>Using the \"waffle\" menu in the upper left corner of the page 1\ufe0f\u20e3 , navigate to the OneDrive application within Microsoft 365 2\ufe0f\u20e3 .</p> <p></p> <p>Within OneDrive, navigate to \"My Files\" 1\ufe0f\u20e3 . If there's a documents folder, click into that as well. If not, you can work directly within the \"My Files\" location.</p> <p></p> <p>Now click \"Add new\" 1\ufe0f\u20e3 and \"Folder\" 2\ufe0f\u20e3 to create a new folder.</p> <p></p> <p>Name the folder \"Northwind contracts\" and click \"Create\".</p> <p></p> <p>Now, from within this new folder, click \"Add new\" 1\ufe0f\u20e3  again but this time click \"Files upload\" 2\ufe0f\u20e3 .</p> <p></p> <p>Now browse to the sampleDocs folder within your working folder. Highlight all the files 1\ufe0f\u20e3 and click \"OK\" 2\ufe0f\u20e3  to upload them all.</p> <p></p> <p>By doing this step early, there's a good chance that the Microsoft 365 search engine will have discovered them by the time you're ready for them.</p>"},{"location":"pages/extend-message-ext/00-prerequisites/#congratulations","title":"Congratulations","text":"<p>You have completed the prerequisites lab. You are now ready to proceed to run your app. Select \"Next\" button below.</p> <p></p>"},{"location":"pages/extend-message-ext/01-nw-teams-app/","title":"Lab M1 - Get to know Northwind message extension","text":"<p>In this lab, you\u2019ll run the Northwind message extension, your base app. The initial exercises will make you familiar with the source code. Finally, you\u2019ll run the application in Teams.</p> Navigating the Extend Teams Message Extension labs (Extend Path) <ul> <li>Lab M0 - Prerequisites </li> <li>Lab M1 - Get to know Northwind message extension (\ud83d\udccdYou are here)</li> <li>Lab M2 - Run app in Microsoft Copilot for Microsoft 365 </li> <li>Lab M3 - Enhance plugin with new search command</li> <li>Lab M4 - Add authentication </li> <li>Lab M5 - Enhance plugin with an action command </li> </ul> <p>In this lab you will:</p> <ul> <li>Do a quick code tour of the Northwind Message extension</li> <li>Run the application on Teams</li> </ul>"},{"location":"pages/extend-message-ext/01-nw-teams-app/#exercise-1-code-tour","title":"Exercise 1 - Code tour","text":"<p>Let's examine the code in the base app called Northwind. </p>"},{"location":"pages/extend-message-ext/01-nw-teams-app/#step-1-examine-the-manifest","title":"Step 1 - Examine the manifest","text":"<p>The core of any Microsoft 365 application is its application manifest. This is where you provide the information Microsoft 365 needs to access your application.</p> <p>In your working directory called Northwind from previous lab , open the manifest.json file in the appPackage folder. This JSON file is placed in a zip archive with icon files to create the application package. The \"icons\" property includes paths to these icons.</p> <pre><code>\"icons\": {\n    \"color\": \"Northwind-Logo3-192-${{TEAMSFX_ENV}}.png\",\n    \"outline\": \"Northwind-Logo3-32.png\"\n},\n</code></pre> <p>Notice the token <code>${{TEAMSFX_ENV}}</code> in one of the icon names. Teams Toolkit will replace this token with your environment name, such as \"local\" or \"dev\" (for an Azure deployment in development). Thus, the icon color will change depending on the environment.</p> <p>Now have a look at the \"name\" and \"description\". Notice that the description is quite long! This is important so both users and Copilot can learn what your application does and when to use it.</p> <pre><code>    \"name\": {\n        \"short\": \"Northwind Inventory\",\n        \"full\": \"Northwind Inventory App\"\n    },\n    \"description\": {\n        \"short\": \"App allows you to find and update product inventory information\",\n        \"full\": \"Northwind Inventory is the ultimate tool for managing your product inventory. With its intuitive interface and powerful features, you'll be able to easily find your products by name, category, inventory status, and supplier city. You can also update inventory information with the app. \\n\\n **Why Choose Northwind Inventory:** \\n\\n Northwind Inventory is the perfect solution for businesses of all sizes that need to keep track of their inventory. Whether you're a small business owner or a large corporation, Northwind Inventory can help you stay on top of your inventory management needs. \\n\\n **Features and Benefits:** \\n\\n - Easy Product Search through Microsoft Copilot. Simply start by saying, 'Find northwind dairy products that are low on stock' \\r - Real-Time Inventory Updates: Keep track of inventory levels in real-time and update them as needed \\r  - User-Friendly Interface: Northwind Inventory's intuitive interface makes it easy to navigate and use \\n\\n **Availability:** \\n\\n To use Northwind Inventory, you'll need an active Microsoft 365 account . Ensure that your administrator enables the app for your Microsoft 365 account.\"\n    },\n</code></pre> <p>Scroll down a bit to \"composeExtensions\". Compose extension is the historical term for message extension; this is where the app's message extensions are defined.</p> <p>Within this is a bot, with the ID supplied by Teams Toolkit.</p> <pre><code>    \"composeExtensions\": [\n        {\n            \"botId\": \"${{BOT_ID}}\",\n            \"commands\": [\n                {\n                    ...\n</code></pre> <p>Message extensions communicate using the Azure Bot Framework; this provides a fast and secure communication channel between Microsoft 365 and your application. When you first ran your project, Teams Toolkit registered a bot, and will place its bot ID here.</p> <p>This message extension has two commands, which are defined in the <code>commands</code> array. Let's pick one command and see the structure. </p> <pre><code>{\n    \"id\": \"discountSearch\",\n    \"context\": [\n        \"compose\",\n        \"commandBox\"\n    ],\n    \"description\": \"Search for discounted products by category\",\n    \"title\": \"Discounts\",\n    \"type\": \"query\",\n    \"parameters\": [\n        {\n            \"name\": \"categoryName\",\n            \"title\": \"Category name\",\n            \"description\": \"Enter the category to find discounted products\",\n            \"inputType\": \"text\"\n        }\n    ]\n},\n</code></pre> <p>This allows user to search for discounted products within a Northwind category. This command accepts a single parameter, \"categoryName\". </p> <p>OK now let's move back to the first command, \"inventorySearch\". It has 5 parameters, which allows for much more sophisticated queries.</p> <pre><code>{\n    \"id\": \"inventorySearch\",\n    \"context\": [\n        \"compose\",\n        \"commandBox\"\n    ],\n    \"description\": \"Search products by name, category, inventory status, supplier location, stock level\",\n    \"title\": \"Product inventory\",\n    \"type\": \"query\",\n    \"parameters\": [\n        {\n            \"name\": \"productName\",\n            \"title\": \"Product name\",\n            \"description\": \"Enter a product name here\",\n            \"inputType\": \"text\"\n        },\n        {\n            \"name\": \"categoryName\",\n            \"title\": \"Category name\",\n            \"description\": \"Enter the category of the product\",\n            \"inputType\": \"text\"\n        },\n        {\n            \"name\": \"inventoryStatus\",\n            \"title\": \"Inventory status\",\n            \"description\": \"Enter what status of the product inventory. Possible values are 'in stock', 'low stock', 'on order', or 'out of stock'\",\n            \"inputType\": \"text\"\n        },\n        {\n            \"name\": \"supplierCity\",\n            \"title\": \"Supplier city\",\n            \"description\": \"Enter the supplier city of product\",\n            \"inputType\": \"text\"\n        },\n        {\n            \"name\": \"stockQuery\",\n            \"title\": \"Stock level\",\n            \"description\": \"Enter a range of integers such as 0-42 or 100- (for &gt;100 items). Only use if you need an exact numeric range.\",\n            \"inputType\": \"text\"\n        }\n    ]\n},\n</code></pre>"},{"location":"pages/extend-message-ext/01-nw-teams-app/#step-2-examine-the-bot-code","title":"Step 2 - Examine the \"Bot\" code","text":"<p>Now open the file searchApp.ts in folder src in the root folder. This application contains the \"bot\" code, which communicates with the Azure Bot Framework using the Bot Builder SDK.</p> <p>Notice that the bot extends an SDK class TeamsActivityHandler.</p> <pre><code>export class SearchApp extends TeamsActivityHandler {\n  constructor() {\n    super();\n  }\n\n  ...\n</code></pre> <p>By overriding the methods of the TeamsActivityHandler, the application is able to handle messages (called \"activities\") coming from Microsoft 365.</p> <p>The first of these is a Messaging Extension Query activity (\"messaging extension\" is another historical name for a message extension). This function is called when a user types into a message extension or when Copilot calls it.</p> <pre><code>  // Handle search message extension\n  public async handleTeamsMessagingExtensionQuery(\n    context: TurnContext,\n    query: MessagingExtensionQuery\n  ): Promise&lt;MessagingExtensionResponse&gt; {\n\n    switch (query.commandId) {\n      case productSearchCommand.COMMAND_ID: {\n        return productSearchCommand.handleTeamsMessagingExtensionQuery(context, query);\n      }\n      case discountedSearchCommand.COMMAND_ID: {\n        return discountedSearchCommand.handleTeamsMessagingExtensionQuery(context, query);\n      }\n    }\n  }\n</code></pre> <p>All it's doing is dispatching the query to the based on the command ID. These are the same command ID's used in the manifest above.</p> <p>The other type of activity our app needs to handle is the adaptive card actions, such as when a user clicks on \"Update stock\" or \"Reorder\" on an adaptive card. Since there is no specific method for an adaptive card action, the code overrides <code>onInvokeActivity()</code>, which is a much broader class of activity that includes message extension queries. For that reason, the code manually checks the activity name, and dispatches to the appropriate handler. If the activity name isn't for an adaptive card action, the <code>else</code> clause runs the base implementation of <code>onInvokeActivity()</code> which, among other things, will call our <code>handleTeamsMessagingExtensionQuery()</code> method if the Invoke activity is a query.</p> <pre><code>import {\n  TeamsActivityHandler,\n  TurnContext,\n  MessagingExtensionQuery,\n  MessagingExtensionResponse,\n  InvokeResponse\n} from \"botbuilder\";\nimport productSearchCommand from \"./messageExtensions/productSearchCommand\";\nimport discountedSearchCommand from \"./messageExtensions/discountSearchCommand\";\nimport revenueSearchCommand from \"./messageExtensions/revenueSearchCommand\";\nimport actionHandler from \"./adaptiveCards/cardHandler\";\n\nexport class SearchApp extends TeamsActivityHandler {\n  constructor() {\n    super();\n  }\n\n  // Handle search message extension\n  public async handleTeamsMessagingExtensionQuery(\n    context: TurnContext,\n    query: MessagingExtensionQuery\n  ): Promise&lt;MessagingExtensionResponse&gt; {\n\n    switch (query.commandId) {\n      case productSearchCommand.COMMAND_ID: {\n        return productSearchCommand.handleTeamsMessagingExtensionQuery(context, query);\n      }\n      case discountedSearchCommand.COMMAND_ID: {\n        return discountedSearchCommand.handleTeamsMessagingExtensionQuery(context, query);\n      }\n    }\n\n  }\n\n  // Handle adaptive card actions\n  public async onInvokeActivity(context: TurnContext): Promise&lt;InvokeResponse&gt; {\n    let runEvents = true;\n    // console.log (`\ud83c\udfac Invoke activity received: ${context.activity.name}`);\n    try {\n      if(context.activity.name==='adaptiveCard/action'){\n        switch (context.activity.value.action.verb) {\n          case 'ok': {\n            return actionHandler.handleTeamsCardActionUpdateStock(context);\n          }\n          case 'restock': {\n            return actionHandler.handleTeamsCardActionRestock(context);\n          }\n          case 'cancel': {\n            return actionHandler.handleTeamsCardActionCancelRestock(context);\n          }\n          default:\n            runEvents = false;\n            return super.onInvokeActivity(context);\n        }\n      } else {\n          runEvents = false;\n          return super.onInvokeActivity(context);\n      }\n    } ...\n</code></pre>"},{"location":"pages/extend-message-ext/01-nw-teams-app/#step-3-examine-the-message-extension-command-code","title":"Step 3 - Examine the message extension command code","text":"<p>In an effort to make the code more modular, readable, and reusable, each message extension command has been placed in its own TypeScript module. Have a look at src/messageExtensions/discountSearchCommand.ts as an example.</p> <p>First, note that the module exports a constant <code>COMMAND_ID</code>, which contains the same command ID found in the app manifest, and allows the switch statement in searchApp.ts to work properly.</p> <p>Then it provides a function, <code>handleTeamsMessagingExtensionQuery()</code>, to handle incoming queries for discounted products by category.</p> <pre><code>async function handleTeamsMessagingExtensionQuery(\n    context: TurnContext,\n    query: MessagingExtensionQuery\n): Promise&lt;MessagingExtensionResponse&gt; {\n\n    // Seek the parameter by name, don't assume it's in element 0 of the array\n    let categoryName = cleanupParam(query.parameters.find((element) =&gt; element.name === \"categoryName\")?.value);\n    console.log(`\ud83d\udcb0 Discount query #${++queryCount}: Discounted products with categoryName=${categoryName}`);\n\n    const products = await getDiscountedProductsByCategory(categoryName);\n\n    console.log(`Found ${products.length} products in the Northwind database`)\n    const attachments = [];\n    products.forEach((product) =&gt; {\n        const preview = CardFactory.heroCard(product.ProductName,\n            `Avg discount ${product.AverageDiscount}%&lt;br /&gt;Supplied by ${product.SupplierName} of ${product.SupplierCity}`,\n            [product.ImageUrl]);\n\n        const resultCard = cardHandler.getEditCard(product);\n        const attachment = { ...resultCard, preview };\n        attachments.push(attachment);\n    });\n    return {\n        composeExtension: {\n            type: \"result\",\n            attachmentLayout: \"list\",\n            attachments: attachments,\n        },\n    };\n}\n</code></pre> <p>Notice that the index in the <code>query.parameters</code> array may not correspond to the parameter's position in the manifest. While this is generally only an issue for a multi-parameter command, the code will still get the value based on the parameter name rather than hard coding an index. After cleaning up the parameter (trimming it, and handling the fact that sometimes Copilot assumes \"*\" is a wildcard that matches everything), the code calls the Northwind data access layer to <code>getDiscountedProductsByCategory()</code>.</p> <p>Then it iterates through the products and creates two cards for each:</p> <ul> <li>a preview card, which is implemented as a \"hero\" card (these predate adaptive cards and are very simple). This is what's displayed in the search results in the user interface and in some citations in Copilot.</li> <li>a result card, which is implemented as an \"adaptive\" card that includes all the details.</li> </ul> <p>In the next step, we'll review the adaptive card code and check out the Adaptive Card designer.</p>"},{"location":"pages/extend-message-ext/01-nw-teams-app/#step-4-examine-the-adaptive-cards-and-related-code","title":"Step 4 - Examine the adaptive cards and related code","text":"<p>The project's adaptive cards are in the src/adaptiveCards folder. There are 3 cards, each implemented as a JSON file.</p> <ul> <li>editCard.json - This is the initial card that's displayed by the message extension or a Copilot reference</li> <li>successCard.json - When a user takes action, this card is displayed to indicate success. It's mostly the same as the edit card except it includes a message to the user.</li> <li>errorCard.json - If an action fails, this card is displayed.</li> </ul> <p>Let's take a look at the edit card in the Adaptive Card Designer. Open your web browser to https://adaptivecards.io and click the \"Designer\" option at the top.</p> <p></p> <p>Notice the data binding expressions such as <code>\"text\": \"\ud83d\udce6 ${productName}\",</code>. This binds the <code>productName</code> property in the data to the text on the card.</p> <p>Now select \"Microsoft Teams\" as the host application 1\ufe0f\u20e3 . Paste the entire contents of editCard.json into the Card Payload Editor 2\ufe0f\u20e3 , and the contents of sampleData.json into the Sample Data Editor 3\ufe0f\u20e3 . The sample data is identical to a product as provided in the code.</p> <p></p> <p>You should see the card as rendered, except for a small error which arises due to the designer's inability to display one of the adaptive card formats.</p> <p>Near the top of the page, try changing the Theme and Emulated Device to see how the card would look in dark theme or on a mobile device. This is the tool that was used to build adaptive cards for the sample application.</p> <p>Now, back in Visual Studio Code, open cardHandler.ts. The function <code>getEditCard()</code> is called from each of the message extension commands to obtain a result card. The code reads the adaptive card JSON - which is considered a template - and then binds it to product data. The result is more JSON - the same card as the template, with the data binding expressions all filled in. Finally, the <code>CardFactory</code> module is used to convert the final JSON into an adaptive card object for rendering.</p> <pre><code>function getEditCard(product: ProductEx): any {\n\n    var template = new ACData.Template(editCard);\n    var card = template.expand({\n        $root: {\n            productName: product.ProductName,\n            unitsInStock: product.UnitsInStock,\n            productId: product.ProductID,\n            categoryId: product.CategoryID,\n            imageUrl: product.ImageUrl,\n            supplierName: product.SupplierName,\n            supplierCity: product.SupplierCity,\n            categoryName: product.CategoryName,\n            inventoryStatus: product.InventoryStatus,\n            unitPrice: product.UnitPrice,\n            quantityPerUnit: product.QuantityPerUnit,\n            unitsOnOrder: product.UnitsOnOrder,\n            reorderLevel: product.ReorderLevel,\n            unitSales: product.UnitSales,\n            inventoryValue: product.InventoryValue,\n            revenue: product.Revenue,\n            averageDiscount: product.AverageDiscount\n        }\n    });\n    return CardFactory.adaptiveCard(card);\n}\n</code></pre> <p>Scrolling down, you'll see the handler for each of the action buttons on the card. The card submits data when an action button is clicked - specifically <code>data.txtStock</code>, which is the \"Quantity\" input box on the card, and <code>data.productId</code>, which is sent in each card action to let the code know what product to update.</p> <pre><code>async function handleTeamsCardActionUpdateStock(context: TurnContext) {\n\n    const request = context.activity.value;\n    const data = request.action.data;\n    console.log(`\ud83c\udfac Handling update stock action, quantity=${data.txtStock}`);\n\n    if (data.txtStock &amp;&amp; data.productId) {\n\n        const product = await getProductEx(data.productId);\n        product.UnitsInStock = Number(data.txtStock);\n        await updateProduct(product);\n\n        var template = new ACData.Template(successCard);\n        var card = template.expand({\n            $root: {\n                productName: product.ProductName,\n                unitsInStock: product.UnitsInStock,\n                productId: product.ProductID,\n                categoryId: product.CategoryID,\n                imageUrl: product.ImageUrl,\n                ...\n</code></pre> <p>As you can see, the code obtains these two values, updates the database, and then sends a new card that contains a message and the updated data.</p>"},{"location":"pages/extend-message-ext/01-nw-teams-app/#exercise-2-run-the-sample-as-a-message-extension","title":"Exercise 2 - Run the sample as a Message Extension","text":""},{"location":"pages/extend-message-ext/01-nw-teams-app/#step-1-set-up-the-project-for-first-use","title":"Step 1 - Set up the project for first use","text":"<p>Open your working folder in Visual Studio Code. If you have already opened it for the code tour, you can continue from there.</p> <p>Teams Toolkit stores environment variables in the env folder, and it will fill in all the values automatically when you start your project the first time. However there's one value that's specific to the sample application, and that's the connection string for accessing the Northwind database.</p> <p>In this project, the Northwind database is stored in Azure Table Storage; when you're debugging locally, it uses the Azurite storage emulator. That's mostly built into the project, but the project won't build unless you provide the connection string.</p> <p>The necessary setting is provided in a file env/.env.local.user.sample. Make a copy of this file in the env folder, and call it .env.local.user. This is where secret or sensitive settings are stored.</p> <p>If you're not sure how to do this, here are the steps in Visual Studio Code. Expand the env folder and right click on .env.local.user.sample. Select \"Copy\". Then right click anywhere in the env folder and select \"Paste\". You will have a new file called .env.local.user copy.sample. Use the same context menu to rename the file to .env.local.user and you're done.</p> <p></p> <p>The resulting .env.local.user file should contain this line:</p> <pre><code>SECRET_STORAGE_ACCOUNT_CONNECTION_STRING=UseDevelopmentStorage=true\n</code></pre> <p>(OK it's not a secret! But it could be; if you deploy the project to Azure it will be!)</p>"},{"location":"pages/extend-message-ext/01-nw-teams-app/#step-2-run-the-application-locally","title":"Step 2 - Run the application locally","text":"<p>Click F5 to start debugging, or click the start button 1\ufe0f\u20e3. You will have an opportunity to select a debugging profile; select Debug in Teams (Edge) 2\ufe0f\u20e3 or choose another profile.</p> <p></p> <p>If you see this screen, you need to fix your env/.env.local.user file; this is explained in the previous step.</p> <p></p> <p>The first time your app runs, you may be prompted to allow NodeJS to go through your firewall; this is necessary to allow the application to communicate.</p> <p>It may take a while the first time as it's loading all the npm packages. Eventually, a browser window will open and invite you to log in.</p> <p>The debugging will open teams in a browser window. Make sure you login using the same credentials you signed into Teams Toolkit. Once you're in, Microsoft Teams should open up and display a dialog offering to open your application. </p> <p></p> <p>Once opened it immediately ask you where you want to open the app in. By default it's personal chat. You could also select it in a channel or group chat as shown. Select \"Open\".</p> <p></p> <p>Now you are in a personal chat with the app.</p>"},{"location":"pages/extend-message-ext/01-nw-teams-app/#step-3-test-in-microsoft-teams","title":"Step 3 - Test in Microsoft Teams","text":"<p>To test the app on the teams, select the \"+\" sign in the chat message compose area. And select \"+ Get more apps\" button to open the dialog to search apps. Choose \"Northwind Inventory\" app with a blue background. See the process below.</p> <p></p> <p>Once the app is opened from the compose area, you will see a search box in the default tab \"Products Inventory\". You will also find the \"Discount\" search tab greyed out. Continue searching for a product, type in \"Chai\" which is a product available in Northwind database to see if the item is displayed as shown below.</p> <p></p> <p>You can select the card for Chai and send it in the conversation. </p> <p>You could also test the button actions in the adaptive card as demonstrated below. </p> <p></p> <p>This will confirm that the message extension is working and ready to be used as a plugin, which we will see in the next lab.</p> <p>NOTE: This is really only useful in conversations with other users; the chat in the Northwind Inventory app is just for testing.</p>"},{"location":"pages/extend-message-ext/01-nw-teams-app/#step-4-advanced-queries","title":"Step 4 - Advanced queries","text":"<p>Back in Visual Studio Code, have a look at the app manifest, which is in a file called manifest.json in the appPackage directory. You'll notice that the app information that was displayed when you installed the app is all here.</p> <p>Scroll down a bit to <code>composeExtensions:</code>. Compose extensions is the historical name for a message extension; the Northwind Inventory message extension is defined here.</p> <p>Here's an abbreviated version of that JSON for easy reference.</p> <pre><code>\"composeExtensions\": [\n    {\n        \"botId\": \"${{BOT_ID}}\",\n        \"commands\": [\n            {\n                \"id\": \"inventorySearch\",\n                ...\n                \"description\": \"Search products by name, category, inventory status, supplier location, stock level\",\n                \"title\": \"Product inventory\",\n                \"type\": \"query\",\n                \"parameters\": [ ... ]\n            },\n            {\n                \"id\": \"discountSearch\",\n                ...\n                \"description\": \"Search for discounted products by category\",\n                \"title\": \"Discounts\",\n                \"type\": \"query\",\n                \"parameters\": [ ...]\n            }\n        ]\n    }\n],\n</code></pre> <p>Notice first that there's a bot ID. That's because Microsoft Teams uses the Azure bot channel to exchange secure, real-time messages with your application. Teams Toolkit will register the bot and fill in the ID for you.</p> <p>Then there's a collection of commands. These correspond to the tabs in the search dialog in Teams. In this application, the commands are really intended for Copilot more than regular users!</p> <p>You already ran the first command when you searched for a product by name. You can try the other one now.</p> <p>Enter \"Beverages\", \"Dairy\", or \"Produce\" into the \"Discounts\" tab, and you'll see the products within those categories that are discounted. Copilot will use this to answer questions about discounted products.</p> <p></p> <p>Now examine the first command again. You'll notice it has 5 parameters!</p> <pre><code>\"parameters\": [\n    {\n        \"name\": \"productName\",\n        \"title\": \"Product name\",\n        \"description\": \"Enter a product name here\",\n        \"inputType\": \"text\"\n    },\n    {\n        \"name\": \"categoryName\",\n        \"title\": \"Category name\",\n        \"description\": \"Enter the category of the product\",\n        \"inputType\": \"text\"\n    },\n    {\n        \"name\": \"inventoryStatus\",\n        \"title\": \"Inventory status\",\n        \"description\": \"Enter what status of the product inventory. Possible values are 'in stock', 'low stock', 'on order', or 'out of stock'\",\n        \"inputType\": \"text\"\n    },\n    {\n        \"name\": \"supplierCity\",\n        \"title\": \"Supplier city\",\n        \"description\": \"Enter the supplier city of product\",\n        \"inputType\": \"text\"\n    },\n    {\n        \"name\": \"stockQuery\",\n        \"title\": \"Stock level\",\n        \"description\": \"Enter a range of integers such as 0-42 or 100- (for &gt;100 items). Only use if you need an exact numeric range.\",\n        \"inputType\": \"text\"\n    }\n]\n</code></pre> <p>Unfortunately, Teams can only display the first parameter, but Copilot can use all 5. This will allow it to do more advanced queries of the Northwind inventory data.</p> <p>As a work-around to the Teams UI limitation, in the \"Northwind Inventory\" tab, the application will accept up to 5 parameters comma separated, using the format:</p> <pre><code>name,category,inventoryStatus,supplierCity,supplierName\n</code></pre> <p></p> <p>Read the descriptions in the JSON above carefully when entering a query. Try entering these, and as you do, keep an eye on the debug console tab in Visual Studio Code, where you'll see each query as it's run.</p> <ul> <li>\"chai\" - find products with names that begin with \"chai</li> <li>\"c,bev\" - find products in categories beginning with \"bev\" and names that begin with \"c</li> <li>\",,out\" - find products that are out of stock</li> <li>\",,on,london\" - find products that are on order from suppliers in London</li> <li>\"tofu,produce,,osaka\" - find products in the \"produce\" category with suppliers in Osaka and names that begin with \"tofu\"</li> </ul> <p>Each query term filters the list of products down. The format of each query term is arbitrary - just be sure to explain it to Copilot in the description of each parameter.</p>"},{"location":"pages/extend-message-ext/01-nw-teams-app/#step-6-optional-view-northwind-database-in-azure-storage-explorer","title":"Step 6 (optional) - View Northwind database in Azure Storage Explorer","text":"<p>The Northwind Database isn't fancy but it's real! If you want to peek at or even modify the data, open the Azure Storage Explorer while Azurite is running. </p> <p>Note</p> <p>Running the app starts Azurite automatically. For more information check the Azurite documention here. As long as your project is started successfully you can view the storage.</p> <p>To view the Northwind data, open \"Emulator &amp; Attached\", \"Storage Accounts\", \"Emulator - Default Ports\", and \"Tables\". There you'll see the old Northwind database tables, which aren't nearly as handy in a NO SQL environment, but there they are!</p> <p></p> <p>The code reads the Products table on each query, but the other tables are only accessed when the app starts. So if you want to add a new category, you'll need to restart the app for it to appear.</p>"},{"location":"pages/extend-message-ext/01-nw-teams-app/#congratulations","title":"Congratulations","text":"<p>You have mastered running the Northwind message extension. Now it's time to test it as plugin in Microsoft Copilot for Microsoft 365 in the next lab. Select Next.</p>"},{"location":"pages/extend-message-ext/02-nw-plugin/","title":"Lab M2 - Run app in Microsoft Copilot for Microsoft 365","text":"<p>In this lab, you\u2019ll run the Northwind app as a plugin in Microsoft Copilot for Microsoft 365. </p> Navigating the Extend Teams Message Extension labs (Extend Path) <ul> <li>Lab M0 - Prerequisites </li> <li>Lab M1 - Get to know Northwind message extension </li> <li>Lab M2 - Run app in Microsoft Copilot for Microsoft 365 (\ud83d\udccdYou are here)</li> <li>Lab M3 - Enhance plugin with new search command</li> <li>Lab M4 - Add authentication </li> <li>Lab M5 - Enhance plugin with an action command </li> </ul> <p>NOTE</p> <p>The completed exercise with all of the code changes can be downloaded from here. This can be useful for troubleshooting purposes. If you ever need to reset your edits, you can clone again the repository and start over.</p> <p>In this lab you will:</p> <ul> <li>Run the message extension you ran on Microsoft Teams on Microsoft Copilot </li> <li>You will learn how to use natural language prompts to search and find items in the Northwind database </li> </ul>"},{"location":"pages/extend-message-ext/02-nw-plugin/#exercise-1-run-the-sample-as-a-copilot-plugin","title":"Exercise 1 - Run the sample as a Copilot plugin","text":"<p>If you are coming from previous lab, you can keep the debugger running and skip Step 1 and go to Step 2 or if it had stopped, go to Step 1. </p>"},{"location":"pages/extend-message-ext/02-nw-plugin/#step-1-run-the-app-locally","title":"Step 1 : Run the app locally","text":"<p>Restart by clicking F5 to start debugging, or click the start button 1\ufe0f\u20e3. You will have an opportunity to select a debugging profile; select Debug in Teams (Edge) 2\ufe0f\u20e3 or choose another profile.</p> <p></p> <p>The debugging will open teams in a browser window. Make sure you login using the same credentials you signed into Teams Toolkit. Once you're in, Microsoft Teams should open up and display a dialog offering to open your application. </p> <p></p> <p>Once opened it immediately ask you where you want to open the app in. By default it's personal chat. You could also select it in a channel or group chat as shown. Select \"Open\".</p> <p></p> <p>Now you are in a personal chat with the app.</p>"},{"location":"pages/extend-message-ext/02-nw-plugin/#step-2-test-in-microsoft-copilot-for-microsoft-365-single-parameter","title":"Step 2 - Test in Microsoft Copilot for Microsoft 365 (single parameter)","text":"<p>Reminder</p> <p>To perform the following exercise, your account must have a valid license for Copilot for Microsoft 365.</p> <p>Go to Teams in browser https://teams.microsoft.com/v2/ logged into your developer tenant. If you have a Copilot for Microsoft 365, the new app will be automatically pinned above your chats. Just open Teams, select \u201cchats\u201d and you\u2019ll see Copilot.</p> <p>Once in the Copilot app experience, Check the lower left of the chat user interface, below the compose box. You should see a plugin icon 1\ufe0f\u20e3 . Click this and enable the Northwind Inventory plugin 2\ufe0f\u20e3 .</p> <p></p> <p>For best results, start a new chat by typing \"New chat\" or by clicking on the New chat icon at the top right before each prompt or set of related prompts.</p> <p></p> <p>Here are some prompts to try that use only a single parameter of the message extension:</p> <ul> <li> <p>Find information about Chai in Northwind Inventory</p> </li> <li> <p>Find discounted seafood in Northwind. Show a table with the products, supplier names, average discount rate, and revenue per period.</p> </li> </ul> <p>Let's try the first one.  Find information about Chai in Northwind Inventory</p> <p></p> <p>Try using these adaptive cards to take action on the products. If there's a single item returned back, Copilot may show the whole card as above. For multiple response  Copilot may show a small number next to each. You can hover over these numbers to display the adaptive card. References will also be listed below the response.</p> <p>Here is an example of multiple items returned with references.</p> <p></p> <p>Next, try  Find discounted seafood in Northwind. Show a table with the products, supplier names, average discount rate, and revenue per period.</p> <p></p> <p>As you're testing, watch the log messages within your application. - Go to Visual Studio Code where you project is runnning. - Find the terminal that has the \"Start application\" task running.</p> <p>You should be able to see when Copilot calls your plugin. For example, after the previous prompt you should see below log</p> <p></p>"},{"location":"pages/extend-message-ext/02-nw-plugin/#step-3-test-in-microsoft-copilot-for-microsoft-365-multiple-parameters","title":"Step 3 - Test in Microsoft Copilot for Microsoft 365 (multiple parameters)","text":"<p>In this exercise, you'll try some prompts that exercise the multi-parameter feature in the sample plugin. These prompts will request data that can be retrieved by name, category, inventory status, supplier city, and stock level, as defined in the manifest.</p> <p>For example, try prompting Find Northwind beverages with more than 100 items in stock. To respond, Copilot must identify products:</p> <ul> <li>where the category is beverages</li> <li>where inventory status is in stock</li> <li>where the stock level is more than 100</li> </ul> <p></p> <p>The plugin code applies all three filters, providing a result set.</p> <p>If you look at the log messages in your terminal in VS Code, you can see that Copilot was able to understand this requirement and fill in 3 of the parameters in the first message extension command.</p> <p></p> <p>By using this prompt, Copilot might look also in your OneDrive files to find the payment terms with each supplier's contract. In this case, you will notice that some of the references won't have the Northwind Inventory icon, but the Word one.</p> <p>Here is an example:</p> <p></p> <p>Here are some more prompts to try:</p> <ul> <li> <p>Find Northwind dairy products that are low on stock. Show me a table with the product, supplier, units in stock and on order.</p> </li> <li> <p>We\u2019ve been receiving partial orders for Tofu. Find the supplier in Northwind and draft an email summarizing our inventory and reminding them they should stop sending partial orders per our MOQ policy.</p> </li> <li> <p>Northwind will have a booth at Microsoft Community Days  in London. Find products with local suppliers and write a LinkedIn post to promote the booth and products.</p> </li> <li> <p>What beverage is high in demand due to social media that is low stock in Northwind in London. Reference the product details to update stock.</p> </li> </ul> <p>Which prompts work best for you? Try making up your own prompts and observe your log messages to see how Copilot accesses your plugin.</p>"},{"location":"pages/extend-message-ext/02-nw-plugin/#congratulations","title":"Congratulations","text":"<p>You\u2019ve done an excellent job testing the plugin in Microsoft Copilot for Microsoft 365. Now, proceed to the next lab to add code for another search criterion. Select Next.</p>"},{"location":"pages/extend-message-ext/03-enhance-nw-plugin/","title":"Lab M3 - Enhance plugin with new search command","text":"<p>In this lab, you will enhance the Northwind plugin by adding a new command. While the current message extension effectively provides information about products within the Northwind inventory database, it does not provide information related to Northwind\u2019s customers. Your task is to introduce a new command associated with an API call that retrieves products ordered by a customer name specified by the user. </p> Navigating the Extend Teams Message Extension labs (Extend Path) <ul> <li>Lab M0 - Prerequisites </li> <li>Lab M1 - Get to know Northwind message extension </li> <li>Lab M2 - Run app in Microsoft Copilot for Microsoft 365 </li> <li>Lab M3 - Enhance plugin with new search command(\ud83d\udccdYou are here)</li> <li>Lab M4 - Add authentication </li> <li>Lab M5 - Enhance plugin with an action command </li> </ul> <p>NOTE</p> <p>The completed exercise with all of the code changes can be downloaded from here. This can be useful for troubleshooting purposes. If you ever need to reset your edits, you can clone again the repository and start over.</p>"},{"location":"pages/extend-message-ext/03-enhance-nw-plugin/#exercise-1-code-changes","title":"Exercise 1 - Code changes","text":""},{"location":"pages/extend-message-ext/03-enhance-nw-plugin/#step-1-extend-the-message-extension-plugin-user-interface","title":"Step 1 -  Extend the Message Extension / plugin User Interface","text":"<p>In your working directory called Northwind from previous lab , open manifest.json in the  appPackage folder. Look for discountSearch in the commands array. After the closing braces of the discountSearch command, add a comma ,. Then, copy the companySearch command snippet and add it to the commands array.</p> <pre><code>{\n    \"id\": \"companySearch\",\n    \"context\": [\n        \"compose\",\n        \"commandBox\"\n    ],\n    \"description\": \"Given a company name, search for products ordered by that company\",\n    \"title\": \"Customer\",\n    \"type\": \"query\",\n    \"parameters\": [\n        {\n            \"name\": \"companyName\",\n            \"title\": \"Company name\",\n            \"description\": \"The company name to find products ordered by that company\",\n            \"inputType\": \"text\"\n        }\n    ]\n}\n</code></pre> <p>COMMAND_ID</p> <p>The \"id\" is the connection between the UI and the code. This value is defined as COMMAND_ID in the discount/product/SearchCommand.ts files. See how each of these files has a unique COMMAND_ID that corresponds to the value of \"id\".</p>"},{"location":"pages/extend-message-ext/03-enhance-nw-plugin/#step-2-implement-product-search-by-company","title":"Step 2 - Implement Product Search by Company","text":"<p>You will implement a product search by Company name and return a list of the company's ordered products. Find this information using the tables below:</p> Table Find Look Up By Customer Customer Id Customer Name Orders Order Id Customer Id OrderDetail Product Order Id <p>Here's how it works:  Use the Customer table to find the Customer Id with the Customer Name. Query the Orders table with the Customer Id to retrieve the associated Order Ids. For each Order Id, find the associated products in the OrderDetail table. Finally, return a list of products ordered by the specified company name.</p> <p>Open .\\src\\northwindDB\\products.ts</p> <p>Update the <code>import</code> statement on line 1 to include OrderDetail, Order and Customer. It should look as follows</p> <pre><code>import {\n    TABLE_NAME, Product, ProductEx, Supplier, Category, OrderDetail,\n    Order, Customer\n} from './model';\n</code></pre> <p>Add the new function <code>searchProductsByCustomer()</code> as in the below snippet, right after the <code>import { getInventoryStatus } from '../adaptiveCards/utils';</code>import statement.</p> <pre><code>export async function searchProductsByCustomer(companyName: string): Promise&lt;ProductEx[]&gt; {\n\n    let result = await getAllProductsEx();\n\n    let customers = await loadReferenceData&lt;Customer&gt;(TABLE_NAME.CUSTOMER);\n    let customerId=\"\";\n    for (const c in customers) {\n        if (customers[c].CompanyName.toLowerCase().includes(companyName.toLowerCase())) {\n            customerId = customers[c].CustomerID;\n            break;\n        }\n    }\n\n    if (customerId === \"\") \n        return [];\n\n    let orders = await loadReferenceData&lt;Order&gt;(TABLE_NAME.ORDER);\n    let orderdetails = await loadReferenceData&lt;OrderDetail&gt;(TABLE_NAME.ORDER_DETAIL);\n    // build an array orders by customer id\n    let customerOrders = [];\n    for (const o in orders) {\n        if (customerId === orders[o].CustomerID) {\n            customerOrders.push(orders[o]);\n        }\n    }\n\n    let customerOrdersDetails = [];\n    // build an array order details customerOrders array\n    for (const od in orderdetails) {\n        for (const co in customerOrders) {\n            if (customerOrders[co].OrderID === orderdetails[od].OrderID) {\n                customerOrdersDetails.push(orderdetails[od]);\n            }\n        }\n    }\n\n    // Filter products by the ProductID in the customerOrdersDetails array\n    result = result.filter(product =&gt; \n        customerOrdersDetails.some(order =&gt; order.ProductID === product.ProductID)\n    );\n\n    return result;\n}\n</code></pre>"},{"location":"pages/extend-message-ext/03-enhance-nw-plugin/#step-3-create-a-handler-for-the-new-command","title":"Step 3: Create a handler for the new command","text":"<p>In VS Code, duplicate the productSearchCommand.ts file located in the src/messageExtensions folder. Then, rename the copied file to \"customerSearchCommand.ts\"</p> <p>Change value of COMMAND_ID constant to:</p> <pre><code>const COMMAND_ID = \"companySearch\";\n</code></pre> <p>Replace below import statement from: </p> <pre><code>import { searchProducts } from \"../northwindDB/products\";`\n</code></pre> <p>to </p> <pre><code>import { searchProductsByCustomer } from \"../northwindDB/products\";\n</code></pre> <p>Inside the existing brackets of handleTeamsMessagingExtensionQuery , replace exisiting code with below snippet:</p> <pre><code>\n    let companyName;\n\n    // Validate the incoming query, making sure it's the 'companySearch' command\n    // The value of the 'companyName' parameter is the company name to search for\n    if (query.parameters.length === 1 &amp;&amp; query.parameters[0]?.name === \"companyName\") {\n        [companyName] = (query.parameters[0]?.value.split(','));\n    } else { \n        companyName = cleanupParam(query.parameters.find((element) =&gt; element.name === \"companyName\")?.value);\n    }\n    console.log(`\ud83c\udf7d\ufe0f Query #${++queryCount}:\\ncompanyName=${companyName}`);    \n\n    const products = await searchProductsByCustomer(companyName);\n\n    console.log(`Found ${products.length} products in the Northwind database`)\n    const attachments = [];\n    products.forEach((product) =&gt; {\n        const preview = CardFactory.heroCard(product.ProductName,\n            `Customer: ${companyName}`, [product.ImageUrl]);\n\n        const resultCard = cardHandler.getEditCard(product);\n        const attachment = { ...resultCard, preview };\n        attachments.push(attachment);\n    });\n    return {\n        composeExtension: {\n            type: \"result\",\n            attachmentLayout: \"list\",\n            attachments: attachments,\n        },\n    };\n\n</code></pre>"},{"location":"pages/extend-message-ext/03-enhance-nw-plugin/#step-4-update-the-command-routing","title":"Step 4 - Update the command routing","text":"<p>In this step you will route the <code>companySearch</code> command to the handler you implemented in the previous step.</p> <p>Open searchApp.ts in the src folder and add the following import statement: </p> <pre><code>import customerSearchCommand from \"./messageExtensions/customerSearchCommand\";\n</code></pre> <p>In the switch statement of the handler function <code>handleTeamsMessagingExtensionQuery</code> add another case statement as below:</p> <pre><code>      case customerSearchCommand.COMMAND_ID: {\n        return customerSearchCommand.handleTeamsMessagingExtensionQuery(context, query);\n      }\n</code></pre> <p>Note</p> <p>in the UI-based operation of the Message Extension / plugin, this command is explicitly called. However, when invoked by Microsoft 365 Copilot, the command is triggered by the Copilot orchestrator.</p>"},{"location":"pages/extend-message-ext/03-enhance-nw-plugin/#exercise-2-run-the-app-search-for-product-by-company-name","title":"Exercise 2 - Run the App! Search for product by company name","text":"<p>Now you're ready to test the sample as a plugin for Copilot for Microsoft 365.</p>"},{"location":"pages/extend-message-ext/03-enhance-nw-plugin/#step-1-run-the-updated-app-locally","title":"Step 1: Run the updated app locally","text":"<p>Stop the local debugger if it is kept running. Since you have updated the manifest with a new command, you will want to re install the app with the new package.  Update the manifest version in the manifest.json file inside the appPackage folder from \"1.0.9\" to \"1.0.10\". This ensurers the new changes of the app is refelected. </p> <p>Restart debugger by clicking F5, or click the start button 1\ufe0f\u20e3. You will have an opportunity to select a debugging profile; select Debug in Teams (Edge) 2\ufe0f\u20e3 or choose another profile.</p> <p></p> <p>The debugging will open teams in a browser window. Make sure you login using the same credentials you signed into Teams Toolkit. Once you're in, Microsoft Teams should open up and display a dialog offering to open your application. </p> <p></p> <p>Once opened it immediately ask you where you want to open the app in. By default it's personal chat. You could also select it in a channel or group chat as shown. Select \"Open\".</p> <p></p> <p>Now you are in a personal chat with the app. But we are testing in Copilt so follow next instruction. </p> <p>In Teams click on Chat and then Copilot. Copilot should be the top-most option. Click on the Plugin icon and select Northwind Inventory to enable the plugin.</p>"},{"location":"pages/extend-message-ext/03-enhance-nw-plugin/#step-2-test-with-new-command-in-copilot","title":"Step 2: Test with new command in Copilot","text":"<p>Enter the prompt: </p> <p>What are the products ordered by 'Consolidated Holdings' in Northwind Inventory?</p> <p>The Terminal output shows Copilot understood the query and executed the <code>companySearch</code> command, passing company name extracted by Copilot. </p> <p>Here's the output in Copilot: </p> <p>Here is another prompt to try:</p> <p>What are the products ordered by 'Consolidated Holdings' in Northwind Inventory? Please list the product name, price and supplier in a table.</p>"},{"location":"pages/extend-message-ext/03-enhance-nw-plugin/#step-3-test-the-command-as-message-extension-optional","title":"Step 3: Test the command as Message extension (Optional)","text":"<p>Of course, you can test this new command also by using the sample as a Message Extension, like we did in previous lab.</p> <ol> <li>In the Teams sidebar, move to the Chats section and pick any chat or start a new chat with a colleague.</li> <li>Click on the + sign to access to the Apps section.</li> <li>Pick the Northwind Inventory app.</li> <li>Notice how now you can see a new tab called Customer.</li> <li>Search for Consolidated Holdings and see the products ordered by this company. They will match the ones that Copilot returned you in the previous step.</li> </ol> <p></p>"},{"location":"pages/extend-message-ext/03-enhance-nw-plugin/#congratulations","title":"Congratulations","text":"<p>You are now a plugin champion. You are now ready to secure your plugin with authentication. Proceed to the next lab. Select \"Next\"</p>"},{"location":"pages/extend-message-ext/04-add-authentication/","title":"Lab M4 - Add authentication","text":"<p>In this lab you will secure your Northwind plugin from the previous lab with authentication using Entra ID SSO (single sign-on) to search and find your own contacts like suppliers information from Outlook.  </p> Navigating the Extend Teams Message Extension labs (Extend Path) <ul> <li>Lab M0 - Prerequisites </li> <li>Lab M1 - Get to know Northwind message extension </li> <li>Lab M2 - Run app in Microsoft Copilot for Microsoft 365 </li> <li>Lab M3 - Enhance plugin with new search command</li> <li>Lab M4 - Add authentication (\ud83d\udccdYou are here)</li> <li>Lab M5 - Enhance plugin with an action command </li> </ul> <p>Attention</p> <p>This lab requires you to have an Azure Subscripton to provision bot services.</p> <p>NOTE</p> <p>The completed exercise with all of the code changes can be downloaded from here. This can be useful for troubleshooting purposes. If you ever need to reset your edits, you can clone again the repository and start over.</p> <p>In this lab you will learn to:</p> <ul> <li> <p>how to add Entra ID single sign-on (SSO) to your plugin so users can seamlessly log into your app with the same account they use in Microsoft Teams</p> </li> <li> <p>Access the Microsoft Graph API to access user data in Microsoft 365. Your app will act on behalf of the logged-in user so they can securely access their own content within your application like contacts from Outlook in this lab.</p> </li> </ul>"},{"location":"pages/extend-message-ext/04-add-authentication/#introduction-tasks-involved-to-implement-sso-brief","title":"Introduction : Tasks involved to implement SSO (brief)","text":"<p>Implementing SSO for your plugin (Message extension app) involves several steps. Here is a high level over view of the process:</p>"},{"location":"pages/extend-message-ext/04-add-authentication/#register-your-app-in-microsoft-entra-id-configure-your-bot-in-azure-bot-service","title":"Register Your App in Microsoft Entra ID &amp; Configure Your Bot in Azure Bot Service","text":"<ul> <li>Create a new app registration in the Azure portal.</li> <li>Configure the app with necessary permissions and scopes.</li> <li>Generate a client secret for your app.</li> <li>Create a bot in the Azure Bot Service.</li> <li>Add the Microsoft 365 channel to your bot.</li> <li>Set up OAuth connection settings in the Azure portal.</li> </ul>"},{"location":"pages/extend-message-ext/04-add-authentication/#enable-sso-in-your-teams-app","title":"Enable SSO in Your Teams App","text":"<ul> <li>Update your message extension's bot code to handle authentication and token exchange.</li> <li>Use the Bot Framework SDK to integrate SSO capabilities.</li> <li>Implement the OAuth flow to obtain access tokens for the user.</li> </ul>"},{"location":"pages/extend-message-ext/04-add-authentication/#configure-authentication-in-teams","title":"Configure Authentication in Teams","text":"<ul> <li>Add the necessary permissions in the Teams app manifest.</li> </ul>"},{"location":"pages/extend-message-ext/04-add-authentication/#exercise-1-register-your-app-in-microsoft-entra-id-and-configure-your-bot-in-azure-bot-service","title":"Exercise 1: Register Your App in Microsoft Entra ID and Configure Your Bot in Azure Bot Service","text":"<p>Luckily for you, we\u2019ve streamlined everything so that it\u2019s ready to go as soon as you hit F5. However, let\u2019s go over the specific changes you\u2019ll need to make in the project for registering and configuring these resources. </p>"},{"location":"pages/extend-message-ext/04-add-authentication/#step-1-copy-files-and-folders","title":"Step 1: Copy files and folders","text":"<p>Create a new folder called entra inside folder infra in your root folder. </p> <p>Create two new files in the entra folder called entra.bot.manifest.json and entra.graph.manifest.json </p> <p>Copy code from this file into entra.bot.manifest.json and same for entra.graph.manifest.json from this file.</p> <p>These files are needed to provision the Entra ID app registrations (previously know as Azure Active Directory app registrations) needed for the bot as well as the one for graph for token exchange between them. </p> <p>Next in the infra folder create files azure.local.bicep and copy code from this file and create file azure.parameters.local.json in the same folder infra and copy code from this file</p> <p>These file help with the bot registration. This will ensure the bot service is provisioned in Azure even when you run app locally. This is required for this authentication flow.</p> <p>What is happening with these files?</p> <p>When Teams Toolkit runs the app locally, it will provision a new Azure AI Bot Service into the resource group which uses the F0 SKU which grants unlimited messages to be sent to standard channels, this includes Microsoft Teams and Microsoft 365 channel (Outlook and Copilot) and does not incur a cost.</p>"},{"location":"pages/extend-message-ext/04-add-authentication/#step-2-update-existing-code","title":"Step 2: Update existing code","text":"<p>Next, open file azurebot.bicep under botRegistration folder which is under infra folder and add below code snippet after declaration of \"param botAppDomain\"</p> <pre><code>param graphAadAppClientId string\n@secure()\nparam graphAadAppClientSecret string\n\nparam connectionName string\n</code></pre> <p>Next add below snippet to provision bot service into the same file at end of line.</p> <pre><code>resource botServicesMicrosoftGraphConnection 'Microsoft.BotService/botServices/connections@2022-09-15' = {\n  parent: botService\n  name: connectionName\n  location: 'global'\n  properties: {\n    serviceProviderDisplayName: 'Azure Active Directory v2'\n    serviceProviderId: '30dd229c-58e3-4a48-bdfd-91ec48eb906c'\n    clientId: graphAadAppClientId\n    clientSecret: graphAadAppClientSecret\n    scopes: 'email offline_access openid profile Contacts.Read'\n    parameters: [\n      {\n        key: 'tenantID'\n        value: 'common'\n      }\n      {\n        key: 'tokenExchangeUrl'\n        value: 'api://${botAppDomain}/botid-${botAadAppClientId}'\n      }\n    ]\n  }\n}\n\n</code></pre> <p>This will create a new OAUTH connection for token exchange between bot service and the graph entra ID app.</p> <p>Changes to infrastructure for plugin</p> <p>We require a different infrastructure to run this setup compared to the non-authenticated plugins we've previously built in this path and hence we need to rewire. Next steps will help you with this. </p> <p>Next, open the teamsapp.local.yml file and replace its content with the code snippet below. This will rewire parts of the infrastructure, including deploying a bot service in Azure for our lab. </p> <pre><code># yaml-language-server: $schema=https://aka.ms/teams-toolkit/1.0.0/yaml.schema.json\n# Visit https://aka.ms/teamsfx-v5.0-guide for details on this file\n# Visit https://aka.ms/teamsfx-actions for details on actions\nversion: 1.0.0\n\nprovision:\n\n  - uses: script\n    name: Ensure database\n    with:\n      run: node db-setup.js\n      workingDirectory: scripts\n\n  # Creates a Teams app\n  - uses: teamsApp/create\n    with:\n      # Teams app name\n      name: NorthwindProducts-${{TEAMSFX_ENV}}\n    # Write the information of created resources into environment file for\n    # the specified environment variable(s).\n    writeToEnvironmentFile:\n      teamsAppId: TEAMS_APP_ID\n\n  - uses: aadApp/create\n    with:\n      name: ${{APP_INTERNAL_NAME}}-bot-${{TEAMSFX_ENV}}\n      generateClientSecret: true\n      signInAudience: AzureADMultipleOrgs\n    writeToEnvironmentFile:\n      clientId: BOT_ID\n      clientSecret: SECRET_BOT_PASSWORD\n      objectId: BOT_AAD_APP_OBJECT_ID\n      tenantId: BOT_AAD_APP_TENANT_ID\n      authority: BOT_AAD_APP_OAUTH_AUTHORITY\n      authorityHost: BOT_AAD_APP_OAUTH_AUTHORITY_HOST\n\n  - uses: aadApp/update\n    with:\n      manifestPath: \"./infra/entra/entra.bot.manifest.json\"\n      outputFilePath : \"./build/entra.bot.manifest.${{TEAMSFX_ENV}}.json\"\n  - uses: aadApp/create\n    with:\n      name: ${{APP_INTERNAL_NAME}}-graph-${{TEAMSFX_ENV}}\n      generateClientSecret: true\n      signInAudience: AzureADMultipleOrgs\n    writeToEnvironmentFile:\n      clientId: GRAPH_AAD_APP_ID\n      clientSecret: SECRET_GRAPH_AAD_APP_CLIENT_SECRET\n      objectId: GRAPH_AAD_APP_OBJECT_ID\n      tenantId: GRAPH_AAD_APP_TENANT_ID\n      authority: GRAPH_AAD_APP_OAUTH_AUTHORITY\n      authorityHost: GRAPH_AAD_APP_OAUTH_AUTHORITY_HOST\n\n  - uses: aadApp/update\n    with:\n      manifestPath: \"./infra/entra/entra.graph.manifest.json\"\n      outputFilePath : \"./build/entra.graph.manifest.${{TEAMSFX_ENV}}.json\"\n\n  - uses: arm/deploy\n    with:\n      subscriptionId: ${{AZURE_SUBSCRIPTION_ID}}\n      resourceGroupName: ${{AZURE_RESOURCE_GROUP_NAME}}\n      templates:\n        - path: ./infra/azure.local.bicep\n          parameters: ./infra/azure.parameters.local.json\n          deploymentName: Create-resources-for-${{APP_INTERNAL_NAME}}-${{TEAMSFX_ENV}}\n      bicepCliVersion: v0.9.1\n\n  # Validate using manifest schema\n  - uses: teamsApp/validateManifest\n    with:\n      # Path to manifest template\n      manifestPath: ./appPackage/manifest.json\n\n  # Build Teams app package with latest env value\n  - uses: teamsApp/zipAppPackage\n    with:\n      # Path to manifest template\n      manifestPath: ./appPackage/manifest.json\n      outputZipPath: ./appPackage/build/appPackage.${{TEAMSFX_ENV}}.zip\n      outputJsonPath: ./appPackage/build/manifest.${{TEAMSFX_ENV}}.json\n  # Validate app package using validation rules\n  - uses: teamsApp/validateAppPackage\n    with:\n      # Relative path to this file. This is the path for built zip file.\n      appPackagePath: ./appPackage/build/appPackage.${{TEAMSFX_ENV}}.zip\n\n  # Apply the Teams app manifest to an existing Teams app in\n  # Teams Developer Portal.\n  # Will use the app id in manifest file to determine which Teams app to update.\n  - uses: teamsApp/update\n    with:\n      # Relative path to this file. This is the path for built zip file.\n      appPackagePath: ./appPackage/build/appPackage.${{TEAMSFX_ENV}}.zip\n\n  # Extend your Teams app to Outlook and the Microsoft 365 app\n  - uses: teamsApp/extendToM365\n    with:\n      # Relative path to the build app package.\n      appPackagePath: ./appPackage/build/appPackage.${{TEAMSFX_ENV}}.zip\n    # Write the information of created resources into environment file for\n    # the specified environment variable(s).\n    writeToEnvironmentFile:\n      titleId: M365_TITLE_ID\n      appId: M365_APP_ID\n\ndeploy:\n# Run npm command\n  - uses: cli/runNpmCommand\n    name: install dependencies\n    with:\n      args: install --no-audit\n\n  # Generate runtime environment variables\n  - uses: file/createOrUpdateEnvironmentFile\n    with:\n      target: ./.localConfigs\n      envs:\n        BOT_ID: ${{BOT_ID}}\n        BOT_PASSWORD: ${{SECRET_BOT_PASSWORD}}\n        STORAGE_ACCOUNT_CONNECTION_STRING: ${{SECRET_STORAGE_ACCOUNT_CONNECTION_STRING}}\n        CONNECTION_NAME: ${{CONNECTION_NAME}}\n\n</code></pre> <p>Open .env.local file under env folder and completely remove all variable and add below for a fresh start. </p> <pre><code>APP_INTERNAL_NAME=Northwind\nAPP_DISPLAY_NAME=Northwind\nCONNECTION_NAME=MicrosoftGraph\n\n</code></pre> <p>Open .env.local.user file under env folder and completely remove all variable and add below for a fresh start. </p> <pre><code>SECRET_BOT_PASSWORD=\nSECRET_GRAPH_AAD_APP_CLIENT_SECRET=\nSECRET_STORAGE_ACCOUNT_CONNECTION_STRING=UseDevelopmentStorage=true\n</code></pre>"},{"location":"pages/extend-message-ext/04-add-authentication/#exercise-2-new-search-command-for-contacts","title":"Exercise 2: New search command for Contacts","text":""},{"location":"pages/extend-message-ext/04-add-authentication/#step-1-add-a-command-to-search-contacts-suppliers","title":"Step 1: Add a command to search contacts (suppliers)","text":"<p>To start, add a new command for searching contacts. We\u2019ll eventually retrieve contact details from Microsoft Graph, but for now, we\u2019ll use mock data to ensure the message extension command functions correctly. Go to src folder &gt; messageExtensions and add an new file supplierContactSearchCommand.ts in it.</p> <p>Copy the content from below into the new file.</p> <pre><code>import {\n    CardFactory,\n    TurnContext\n} from \"botbuilder\";\n\n\nconst COMMAND_ID = \"supplierContactSearch\";\n\nlet queryCount = 0;\nasync function handleTeamsMessagingExtensionQuery(context: TurnContext, query: any): Promise&lt;any&gt; {\n\n    let name = '';\n    if (query.parameters.length === 1 &amp;&amp; query.parameters[0]?.name === \"name\") {\n        [name] = (query.parameters[0]?.value.split(','));\n    } else {\n        name = cleanupParam(query.parameters.find((element) =&gt; element.name === \"name\")?.value);\n    }\n    console.log(`\ud83c\udf7d\ufe0f Query #${++queryCount}:\\name of contact=${name}`);\n    const filteredProfile = [];\n    const attachments = [];\n\n    const allContacts = [\n    {\n        displayName: \"John Doe\",\n        emailAddresses: [\n        { address: \"john.doe@example.com\" }\n        ]\n    },\n    {\n        displayName: \"Jane Smith\",\n        emailAddresses: [\n        { address: \"jane.smith@example.com\" }\n        ]\n    },\n    {\n        displayName: \"Alice Johnson\",\n        emailAddresses: [\n        { address: \"alice.johnson@example.com\" }\n        ]\n    }\n];\n\n    allContacts.forEach((contact) =&gt; {\n        if (contact.displayName.toLowerCase().includes(name.toLowerCase()) || contact.emailAddresses[0]?.address.toLowerCase().includes(name.toLowerCase())) {\n            filteredProfile.push(contact);\n        }\n    });\n\n    filteredProfile.forEach((prof) =&gt; {\n        const preview = CardFactory.heroCard(prof.displayName,\n            `with email ${prof.emailAddresses[0]?.address}`);\n\n        const resultCard = CardFactory.heroCard(prof.displayName,\n            `with email ${prof.emailAddresses[0]?.address}`);\n        const attachment = { ...resultCard, preview };\n        attachments.push(attachment);\n    });\n    return {\n        composeExtension: {\n            type: \"result\",\n            attachmentLayout: \"list\",\n            attachments: attachments,\n        },\n    };\n\n}\nfunction cleanupParam(value: string): string {\n\n    if (!value) {\n        return \"\";\n    } else {\n        let result = value.trim();\n        result = result.split(',')[0];          // Remove extra data\n        result = result.replace(\"*\", \"\");       // Remove wildcard characters from Copilot\n        return result;\n    }\n}\n\nexport default { COMMAND_ID, handleTeamsMessagingExtensionQuery }\n</code></pre> <p>Go to src folder &gt; searchApp.ts file and import the newly created command.</p> <pre><code>import supplierContactSearchCommand from \"./messageExtensions/supplierContactSearchCommand\";\n</code></pre> <p>And add another case in the handleTeamsMessagingExtensionQuery for the newly added command after case customerSearchCommand.COMMAND_ID:</p> <pre><code>  case supplierContactSearchCommand.COMMAND_ID: {\n        return supplierContactSearchCommand.handleTeamsMessagingExtensionQuery(context, query);\n      } \n</code></pre> <p>Now to go appPackage &gt; manifest.json and add the command inside the commands array under the node composeExtensions.</p> <pre><code> {\n                    \"id\": \"supplierContactSearch\",\n                    \"context\": [\n                        \"compose\",\n                        \"commandBox\"\n                    ],\n                    \"description\": \"Search for a contact in the user's Outlook contacts list for Northwind\",\n                    \"title\": \"Contact search\",\n                    \"type\": \"query\",\n                    \"parameters\": [\n                        {\n                            \"name\": \"name\",\n                            \"title\": \"Contact search\",\n                            \"description\": \"Type name of the contact or company which forms the domain for email address of the contact, to search my Outlook contacts list\",\n                            \"inputType\": \"text\"\n                        }\n                    ] \n         } \n</code></pre> <p>So you have now added a new non authenticated command to search contacts from a mock list. </p>"},{"location":"pages/extend-message-ext/04-add-authentication/#step-2-sign-in-to-azure-in-teams-toolkit","title":"Step 2: Sign in to Azure in Teams Toolkit","text":"<p>Teams Toolkit requires you to sign in to an Azure account and have a subscription before you can provision the resource instances. You'll then use these resources to deploy your app to host it in Azure.</p> <p>On the Activity Bar of your project editor, select the Microsoft Teams icon 1\ufe0f\u20e3. This will open the Teams Toolkit extension panel.</p> <p>On the Teams Toolkit panel, under Accounts, select \"Sign in to Azure\" 2\ufe0f\u20e3.</p> <p></p> <p>In the dialog that appears, select \"Sign in\".</p> <p></p>"},{"location":"pages/extend-message-ext/04-add-authentication/#step-3-run-the-application-in-teams-to-test-new-command","title":"Step 3: Run the application in Teams to test new command","text":"<p>To test the new command you need to run the app locally.</p> <p>Click F5 to start debugging, or click the start button 1\ufe0f\u20e3. You will have an opportunity to select a debugging profile; select Debug in Teams (Edge) 2\ufe0f\u20e3 or choose another profile.</p> <p></p> <p>F5 in this lab</p> <p>When you press F5 to run the application, it will also provision all the necessary resources for the authenticated flow, as we configured everything using the Team Toolkit's actions in Exercise 1. </p> <p>Since you cleared the environments variable, you will install all Entra ID apps and bot services in Azure. During the first run, you'll need to select a resource group in your Azure subscription, which you logged into via the Teams toolkit, for provisioning resources.</p> <p></p> <p>Choose + New resource group to keep things tidy.And choose the default name teams toolkit has suggested and select Enter.</p> <p>Next, choose a Location. For this lab just choose Central US</p> <p></p> <p>Next Teams Toolkit will go ahead and provision the resources but will also ask you a confirmation before doing so.</p> <p></p> <p>Select Provision.</p> <p>Once it's provisioned all the resources, you will get the Northwind app install dialog in a browser, select Add.</p> <p></p> <p>Once installed, you will be given another dialog to open the app. This will open the app as a message extension in a personal chat. Select Open.</p> <p></p> <p>Since we only need to test if the command works or not, we will only test the app in Teams chat. In the personal chat with the app, select the Contacrt search and type a. </p> <p></p> <p>If it lists the contacts as shown above, the command is working, but with mock data. We will fix this in the next exercise.</p>"},{"location":"pages/extend-message-ext/04-add-authentication/#exercise-3-enable-authentication-for-new-command","title":"Exercise 3 : Enable authentication for new command","text":"<p>In the previous step, you have laid the foundation for the new command. Next you will add authentication on top of the command, replace the mock contact list and replace it with actual contact list from the logged in user's Outlook contacts.</p> <p>You will first install some npm packages needed for the plugin. Create a new terminal window in the project.</p> <p>Run below script in the terminal :</p> <pre><code>npm i @microsoft/microsoft-graph-client @microsoft/microsoft-graph-types\n</code></pre> <p>Locate config.ts file in the src folder. Add a \",\" after <code>storageAccountConnectionString: process.env.STORAGE_ACCOUNT_CONNECTION_STRING</code> and add the new property and value for <code>connectionName</code> as below.</p> <pre>\n const config = {\n  botId: process.env.BOT_ID,\n  botPassword: process.env.BOT_PASSWORD,\n  storageAccountConnectionString: process.env.STORAGE_ACCOUNT_CONNECTION_STRING,\n  connectionName: process.env.CONNECTION_NAME\n};\n</pre> <p>Now create a folder called services under src folder of your base project. Create two files AuthService.ts and GraphService.ts in the services folder. </p> <ul> <li> <p>AuthService : contains a class that provides authentication services. It includes a method getSignInLink which asynchronously retrieves a sign-in URL from a client using specific connection details and returns this URL.</p> </li> <li> <p>GraphService : defines a class that interacts with the Microsoft Graph API. It initializes a Graph client using an authentication token and provides a method getContacts to fetch the user's contacts, selecting specific fields (displayName and emailAddresses).</p> </li> </ul> <p>Next, copy paste below code into AuthService.ts</p> <pre><code>import {\n  AdaptiveCardInvokeResponse,\n  CloudAdapter,\n  MessagingExtensionQuery,\n  MessagingExtensionResponse,\n  TurnContext,\n} from 'botbuilder';\nimport { UserTokenClient } from 'botframework-connector';\nimport { Activity } from 'botframework-schema';\nimport config from '../config';\n\nexport class AuthService {\n  private client: UserTokenClient;\n  private activity: Activity;\n  private connectionName: string;\n\n  constructor(context: TurnContext) {\n    const adapter = context.adapter as CloudAdapter;\n    this.client = context.turnState.get&lt;UserTokenClient&gt;(\n      adapter.UserTokenClientKey\n    );\n    this.activity = context.activity;\n    this.connectionName = config.connectionName;\n  }\n\n  async getUserToken(\n    query?: MessagingExtensionQuery\n  ): Promise&lt;string | undefined&gt; {\n    const magicCode =\n      query?.state &amp;&amp; Number.isInteger(Number(query.state)) ? query.state : '';\n\n    const tokenResponse = await this.client.getUserToken(\n      this.activity.from.id,\n      this.connectionName,\n      this.activity.channelId,\n      magicCode\n    );\n\n    return tokenResponse?.token;\n  }\n\n  async getSignInComposeExtension(): Promise&lt;MessagingExtensionResponse&gt; {\n    const signInLink = await this.getSignInLink();\n\n    return {\n      composeExtension: {\n        type: 'auth',\n        suggestedActions: {\n          actions: [\n            {\n              type: 'openUrl',\n              value: signInLink,\n              title: 'SignIn',\n            },\n          ],\n        },\n      },\n    };\n  }\n\n  async getSignInAdaptiveCardInvokeResponse(): Promise&lt;AdaptiveCardInvokeResponse&gt; {\n    const signInLink = await this.getSignInLink();\n\n    return {\n      statusCode: 401,\n      type: 'application/vnd.microsoft.card.signin',\n\n      value: {\n        signinurl: signInLink,\n      },\n    };\n  }\n\n  async getSignInLink(): Promise&lt;string&gt; {\n    const { signInLink } = await this.client.getSignInResource(\n      this.connectionName,\n      this.activity,\n      ''\n    );\n\n    return signInLink;\n  }\n}\n\n</code></pre> <p>Next, copy paste below code into GraphService.ts</p> <pre><code>import { Client } from '@microsoft/microsoft-graph-client';\n\n\nexport class GraphService {\n  private _token: string;\n  private graphClient: Client;\n\n  constructor(token: string) {\n    if (!token || !token.trim()) {\n      throw new Error('SimpleGraphClient: Invalid token received.');\n    }\n    this._token = token;\n\n    this.graphClient = Client.init({\n      authProvider: done =&gt; {\n        done(null, this._token);\n      },\n    });\n  }\n  async getContacts(): Promise&lt;any&gt; {\n    const response = await this.graphClient\n      .api(`me/contacts`)\n      .select('displayName,emailAddresses')\n      .get();\n\n    return response.value;\n  }\n}\n\n</code></pre> <p>Now, go back to the supplierContactSearchCommand.ts file and import these two services we just added.</p> <pre><code>import { AuthService } from \"../services/AuthService\";\nimport { GraphService } from \"../services/GraphService\";\n</code></pre> <p>Next, add the code that initializes authentication, retrieves a user token, checks its validity, and then sets up a service to interact with the Microsoft Graph API if the token is valid. If the token is invalid, it prompts the user to sign in.</p> <p>Copy below code into the handleTeamsMessagingExtensionQuery function above the mock definition of allContacts constant.</p> <pre><code>  const credentials = new AuthService(context);\n  const token = await credentials.getUserToken(query);\n  if (!token) {\n    return credentials.getSignInComposeExtension();\n  }\n  const graphService = new GraphService(token);\n</code></pre> <p>Next, replace the mock definition of allContacts constant with below code:</p> <pre><code>const allContacts = await graphService.getContacts();\n</code></pre> <p>Next go to appPackage/manifest.json file and update the node validDomains as below</p> <pre><code>\"validDomains\": [\n        \"token.botframework.com\",\n        \"${{BOT_DOMAIN}}\"\n    ]\n</code></pre> <p>Also add comma \",\" after <code>validDomains</code> array and add a node for webApplicationInfo and update it with below value</p> <pre><code>    \"webApplicationInfo\": {\n        \"id\": \"${{BOT_ID}}\",\n        \"resource\": \"api://${{BOT_DOMAIN}}/botid-${{BOT_ID}}\"\n    },\n</code></pre> <p>Next, upgrade the manifest version from \"1.0.10\" to \"1.0.11\" so the changes are reflected. </p> <p>These manifest changes will make sure the sign-in url is correctly formed and sent to the user for consent.</p>"},{"location":"pages/extend-message-ext/04-add-authentication/#exercise-4-test-authentication","title":"Exercise 4:  Test authentication","text":""},{"location":"pages/extend-message-ext/04-add-authentication/#step-1-run-app-locally","title":"Step 1: Run app locally","text":"<p>Stop the local debugger if it is kept running. Since you have updated the manifest with a new command, you will want to re install the app with the new package. </p> <p>Restart debugger by clicking F5, or click the start button 1\ufe0f\u20e3. You will have an opportunity to select a debugging profile; select Debug in Teams (Edge) 2\ufe0f\u20e3 or choose another profile.</p> <p></p> <p>Provision</p> <p>Here you will again get a dialog confirming if you want to provision the resources. Select \"Provision\". This is not actually provisioning new resources just overwriting existing resources. </p> <p>The debugging will open teams in a browser window. Make sure you login using the same credentials you signed into Teams Toolkit. Once you're in, Microsoft Teams should open up and display a dialog offering to open your application. </p> <p></p> <p>Once opened it immediately ask you where you want to open the app in. By default it's personal chat. You could also select it in a channel or group chat as shown. Select \"Open\".</p> <p></p> <p>Now you are in a personal chat with the app. But we are testing in Copilt so follow next instruction. </p> <p>In Teams click on Chat and then Copilot. Copilot should be the top-most option. Click on the Plugin icon and select Northwind Inventory to enable the plugin.</p>"},{"location":"pages/extend-message-ext/04-add-authentication/#step-2-enter-test-data","title":"Step 2 : Enter test data","text":"<p>Before we test the plugin to bring actual contacts, we'll need to add some contact information. So let us first ensure we have some contacts in Microsoft 365.</p> <p>1\ufe0f\u20e3 From Microsoft Teams, click the \"waffle\" menu</p> <p>2\ufe0f\u20e3 Select Microsoft Outlook</p> <p></p> <p>1\ufe0f\u20e3 Within Outlook, click the \"Contacts\" button</p> <p>2\ufe0f\u20e3 Enter some new contacts</p> <p>The app is simple, and will only display the person or company name and email address. If you want to play along with the business scenario, make them sound like suppliers.</p> <p></p>"},{"location":"pages/extend-message-ext/04-add-authentication/#step-2-test-in-copilot","title":"Step 2: Test in Copilot","text":"<p>Ask Copilot for contacts by using this prompt- Find my conacts with name {first name} in Northwind (Replace {first name} with what name you have given for your contacts in Exercise 4, Step 1)</p> <p>You will get a sign-in button to authenticate (one time only) as shown in the screen. </p> <p></p> <p>This is the indication that you have an some sort of an authentication set in place to call this feature of the plugin. Select Sign in to Northwind Inventory</p> <p>You will now get a dialog to interact and provide consent as show in the GIF below. Once consented you should be able to get back results form Copilot for Microsoft 365. </p>"},{"location":"pages/extend-message-ext/04-add-authentication/#congratulations","title":"Congratulations","text":"<p>This was a hard one, but you ACED it! You are now ready add an action command. Proceed to the next lab. Select Next.</p>"},{"location":"pages/extend-message-ext/05-add-action/","title":"Lab M5 - Enhance plugin with an action command","text":""},{"location":"pages/in-a-box/","title":"Copilot Developer Camp In a Box","text":"<p>Here are presentation materials for running your own Copilot Developer Camp workshop!!</p> title deck with video demos deck for sharing 20 min CC01: Keynote download download 40 min CC02: Introducing Declarative Agents download download 40 min CC03: Introducing Custom Engine Agents part 1, part 2 download <p></p>"},{"location":"pages/internal/labFormat/","title":"Guide to formatting lab content","text":""},{"location":"pages/internal/labFormat/#formatting-text-elements","title":"Formatting text elements","text":"<p>These text elements are embedded into the lab instructions, so the formatting is always in-line</p> Element Treatment Example Function names monospaced with parenthesis Then, call <code>myFunction()</code> to do something ... Language keywords monospaced ... insert at the top of the <code>try</code> block ... Symbols in code (variable, object names etc.) monospaced ... the <code>foo</code> object contains something random ... File and folder names bold Copy the contents of foo.js into the bar folder Text on screen enclose in double quotes Now click on the \"foo\" button"},{"location":"pages/internal/labFormat/#includes","title":"Includes","text":"<p>Content that will be used on multiple pages should be placed in include files in the /docs/includes folder.</p> <p>Here is the syntax:</p> --8&lt;-- \"all-labs-toc.md\" <p>Here is an example::</p> <p>Do these labs if you want to build a Declarative agent where Microsoft 365 provides the AI model and orchestration</p> <ul> <li>E0 - Setup</li> <li>E1 - First declarative agent</li> <li>E2 - Build an API</li> <li>E3 - Add a declarative agent and API plugin</li> <li>E4 - Enhance the API and plugin</li> <li>E5 - Add adaptive cards</li> <li>E6 - Add Entra ID authentication</li> <li>Bonus - Add Graph Connector</li> </ul> <p>Do these labs if you want to build a Custom engine agent with custom AI model and orchestration using Azure OpenAI and Teams AI library</p> <ul> <li>B0 - Setup</li> <li>B1 - First custom engine agent</li> <li>B2 - Index your data in Azure AI Search</li> <li>B3 - Enhance the user experience</li> <li>B4 - Add single sign on authentication</li> <li>B5 - Add actions to handle complex tasks</li> </ul>"},{"location":"pages/internal/labFormat/#lab-steps","title":"Lab steps","text":"<p>Copilot Camp labs use custom web controls to help students track their progress. You will want to include a <code>&lt;cc-end-step /&gt;</code> element at the end of each lab step. See this test page for details.</p>"},{"location":"pages/internal/labFormat/#hyperlinks","title":"Hyperlinks","text":"<p>Links within the labs can be relative and should open within the current window like this.</p> <p>Links that go outside the labs, including links to source code in the same repo, should open a new window like this</p>"},{"location":"pages/internal/labFormat/#admonitions","title":"Admonitions","text":"<p>The documentation for admonitions is here. Here's how to use them in Copilot Developer Camp:</p> <p>Challenge</p> <p>Here's something to try on your own</p> <p>Note</p> <p>Use this format to emphasize or clarify the instructions</p> <p>Tip</p> <p>Use this format to show tips and best practices</p> <p>Warning</p> <p>Use this format to warn the student about a common pitfall in completing the labs</p> <p>Danger</p> <p>Use this format to warn the student about security issues or stability issues that may arise in a production application</p> Video briefing <p> Caption </p> Video briefing <p> Caption </p> More information <p> Caption 1 Caption 2 Caption 3 </p> TL;DR <p>Use this format to provide ancillary details that may be of interest but are not essential</p>"}]}